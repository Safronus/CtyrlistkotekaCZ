# -*- coding: utf-8 -*-

from PySide6.QtWidgets import (
    QApplication, QMainWindow, QVBoxLayout, QHBoxLayout, QWidget,
    QTabWidget, QGroupBox, QLabel, QLineEdit, QPushButton, QTextEdit,
    QCheckBox, QSpinBox, QProgressBar, QFileDialog, QMessageBox,
    QComboBox, QFrame, QListWidget, QListWidgetItem, QPlainTextEdit,
    QDialog, QTreeView, QMenu, QInputDialog, QGridLayout,  # <- P≈òID√ÅNO QGridLayout
    QFileSystemModel, QSizePolicy, QAbstractItemView
)
from PySide6.QtCore import (
    Qt, QThread, Signal, QTimer, QDir, QSize, QFileSystemWatcher,
    QObject, QEvent, QRect  # <- P≈òID√ÅNO pro event filtry
)
from PySide6.QtGui import (
    QFont, QAction, QPainter, QColor, QTextFormat, QSyntaxHighlighter, 
    QTextCharFormat, QShortcut, QKeySequence, QFontMetrics
)

from pathlib import Path
import json
import os
import sys
import datetime
import shutil
import time

# Import hlavn√≠ funkce z PDF gener√°toru
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from pdf_generator import main as generate_pdf_main

from PySide6.QtWidgets import QRubberBand
from PySide6.QtGui import QImage, QPainter

try:
    from shapely.geometry import Point, Polygon
except ImportError:
    # Vytvo≈ô√≠me dummy t≈ô√≠dy, aby aplikace nespadla, pokud shapely chyb√≠.
    # U≈æivatel bude upozornƒõn chybovou hl√°≈°kou.
    class Point:
        def __init__(self, *args): pass
        def within(self, other): return False
    class Polygon:
        def __init__(self, *args): pass

class PDFGeneratorThread(QThread):
    """Thread pro generov√°n√≠ PDF na pozad√≠ - opraven√° verze"""
    progress_updated = Signal(str)
    finished_success = Signal(object)
    finished_error = Signal(str)

    def __init__(self, n, m, location_config, def_cesta_lokaci, cesta_ctyrlistky, output_pdf, poznamky_dict, copy_folder, pages_per_pdf, status_dict=None, parent=None):
        super().__init__(parent)
        self.n = n
        self.m = m
        self.location_config = location_config
        self.location_path = def_cesta_lokaci
        self.clover_path = cesta_ctyrlistky
        self.output_pdf = output_pdf
        self.poznamky_dict = poznamky_dict
        self.copy_folder = copy_folder
        self.pages_per_pdf = pages_per_pdf
        self.status_dict = status_dict  # NOV√â: stavov√Ω slovn√≠k

    def run(self):
        """Spust√≠ generov√°n√≠ PDF s detailn√≠mi progress indik√°tory."""
        import sys
        class _SignalLogWriter:
            def __init__(self, emitter):
                self._emit = emitter
                self._buf = ""
            def write(self, s):
                self._buf += str(s)
                while "\n" in self._buf:
                    line, self._buf = self._buf.split("\n", 1)
                    if line.strip():
                        self._emit.emit(line.strip())
            def flush(self):
                if self._buf.strip():
                    self._emit.emit(self._buf.strip())
                    self._buf = ""
        old_out, old_err = sys.stdout, sys.stderr
        proxy = _SignalLogWriter(self.progress_updated)
        try:
            sys.stdout = proxy
            sys.stderr = proxy
            try:
                import platform
                if platform.system() == 'Darwin':
                    import resource
                    soft, hard = resource.getrlimit(resource.RLIMIT_NOFILE)
                    target_soft = max(int(soft), 10240)
                    RLIM_INFINITY = getattr(resource, "RLIM_INFINITY", (1 << 63) - 1)
                    if hard != RLIM_INFINITY and target_soft > int(hard):
                        target_soft = int(hard)
                    if target_soft > int(soft):
                        resource.setrlimit(resource.RLIMIT_NOFILE, (target_soft, hard))
                    self.progress_updated.emit(f"üîß macOS: Zv√Ω≈°en limit otev≈ôen√Ωch soubor≈Ø: {soft} ‚Üí {target_soft}")
            except Exception:
                pass
            generated_pdfs = generate_pdf_main(
                n=self.n,
                m=self.m,
                location_config=self.location_config,
                def_cesta_lokaci=self.location_path,
                cesta_ctyrlistky=self.clover_path,
                output_pdf=self.output_pdf,
                poznamky_dict=self.poznamky_dict,
                copy_folder=self.copy_folder,
                pages_per_pdf=self.pages_per_pdf,
                status_dict=self.status_dict,                # NOV√â: p≈ôed√°n√≠ stav≈Ø
                progress_callback=self.progress_updated.emit
            )
            proxy.flush()
            self.progress_updated.emit("phase_done:‚úÖ Generov√°n√≠ PDF dokonƒçeno!")
            self.finished_success.emit(generated_pdfs)
        except Exception as e:
            proxy.flush()
            err = f"‚ùå Chyba p≈ôi generov√°n√≠ PDF: {e}"
            self.progress_updated.emit(err)
            self.finished_error.emit(str(e))
        finally:
            sys.stdout = old_out
            sys.stderr = old_err
            
# Ujistƒõte se, ≈æe na zaƒç√°tku souboru pdf_generator_window.py m√°te tyto importy
from PySide6.QtGui import QPixmap, QShortcut, QKeySequence, QImage
from PySide6.QtWidgets import QDialog, QVBoxLayout, QHBoxLayout, QPushButton, QLabel, QApplication, QMessageBox, QRubberBand
from PySide6.QtCore import Qt, QSize, QRect, QPoint
import os
import shutil
import time
import sys
import io

# Tento blok zajist√≠, ≈æe aplikace nespadne, pokud chyb√≠ pot≈ôebn√© knihovny
try:
    from PIL import Image, ImageQt
    import piexif
    PIL_AVAILABLE = True
except ImportError:
    PIL_AVAILABLE = False


class ImagePreviewDialog(QDialog):
    # Ve t≈ô√≠dƒõ ImagePreviewDialog
    def __init__(self, image_paths, start_index, parent=None, crop_status_dict=None):
        super().__init__(parent)
        self.setWindowTitle("N√°hled fotografie")
        self.setModal(True)
        self.image_paths = image_paths
        self.current_index = start_index
        
        # NOV√â: P≈ôevzet√≠ slovn√≠ku pro stav o≈ôez√°n√≠
        self.crop_status = crop_status_dict if crop_status_dict is not None else {}
    
        self.rubber_band = None
        self.crop_origin = None
        self.original_pixmap = None
        self.is_moving_selection = False
        self.move_offset = QPoint()
        self.undo_backups = {}
        self.scroll_action_performed_in_gesture = False
        self.handle_size = 12
    
        self.setup_ui()
        self.shortcut_crop = QShortcut(QKeySequence("Ctrl+K"), self)
        self.shortcut_crop.activated.connect(self.crop_image)
        self.shortcut_undo = QShortcut(QKeySequence("Ctrl+Z"), self)
        self.shortcut_undo.activated.connect(self.undo_crop)
        self.load_current_image()

    def setup_ui(self):
        main_layout = QVBoxLayout(self)
        controls_layout = QHBoxLayout()

        self.crop_button = QPushButton("‚úÇÔ∏è O≈ôezat obr√°zek (‚åòK)")
        self.crop_button.setToolTip("P≈ôep√≠≈°e p≈Øvodn√≠ soubor ƒçtvercov√Ωm v√Ω≈ôezem.\nZachov√°v√° v≈°echna metadata.")
        self.crop_button.clicked.connect(self.crop_image)

        self.undo_button = QPushButton("‚Ü©Ô∏è Vr√°tit zpƒõt (‚åòZ)")
        self.undo_button.setToolTip("Vr√°t√≠ posledn√≠ o≈ôez√°n√≠ tohoto obr√°zku.")
        self.undo_button.clicked.connect(self.undo_crop)
        self.undo_button.setEnabled(False)

        controls_layout.addWidget(self.crop_button)
        controls_layout.addWidget(self.undo_button)
        main_layout.addLayout(controls_layout)

        self.image_label = QLabel("Naƒç√≠t√°n√≠ obr√°zku...")
        self.image_label.setAlignment(Qt.AlignCenter)
        self.image_label.setMouseTracking(True) # D≈Øle≈æit√© pro sledov√°n√≠ kurzoru
        main_layout.addWidget(self.image_label)

        self.info_label = QLabel()
        self.info_label.setAlignment(Qt.AlignCenter)
        self.info_label.setStyleSheet("font-size: 10px; color: #b0b0b0; margin-top: 5px;")
        main_layout.addWidget(self.info_label)
        
    def wheelEvent(self, event):
        """
        Zpracuje skrolov√°n√≠ koleƒçkem my≈°i nebo gestem na touchpadu pro navigaci.
        Vyu≈æ√≠v√° sledov√°n√≠ f√°z√≠ gesta, aby se zajistil posun pouze o jeden obr√°zek na gesto.
        """
        phase = event.phase()
    
        # Na zaƒç√°tku gesta (prsty se dotknou touchpadu) resetujeme z√°mek.
        if phase == Qt.ScrollPhase.ScrollBegin:
            self.scroll_action_performed_in_gesture = False
            event.accept()
            return
    
        # Na konci gesta (prsty se zvednou) tak√© resetujeme z√°mek.
        if phase == Qt.ScrollPhase.ScrollEnd:
            self.scroll_action_performed_in_gesture = False
            event.accept()
            return
    
        # Pokud je z√°mek aktivn√≠ (akce ji≈æ byla v tomto gestu provedena), ignorujeme dal≈°√≠ pohyb.
        if self.scroll_action_performed_in_gesture:
            event.accept()
            return
    
        # Pro plynul√° za≈ô√≠zen√≠ (touchpad) preferujeme pixelDelta. Pro koleƒçka my≈°i pou≈æijeme angleDelta.
        delta = event.pixelDelta().y() if not event.pixelDelta().isNull() else event.angleDelta().y()
    
        action_taken = False
        # Dostateƒçn√° zmƒõna pro vyvol√°n√≠ akce (chr√°n√≠ p≈ôed n√°hodn√Ωmi mikropohyby).
        if delta < -5:  # Pohyb dol≈Ø (prsty nahoru na touchpadu) -> Dal≈°√≠ obr√°zek
            if self.current_index < len(self.image_paths) - 1:
                self.current_index += 1
                self.load_current_image()
                action_taken = True
        elif delta > 5:  # Pohyb nahoru (prsty dol≈Ø na touchpadu) -> P≈ôedchoz√≠ obr√°zek
            if self.current_index > 0:
                self.current_index -= 1
                self.load_current_image()
                action_taken = True
    
        # Pokud byla provedena akce, zamkneme mo≈ænost dal≈°√≠ akce v r√°mci tohoto gesta.
        if action_taken:
            self.scroll_action_performed_in_gesture = True
    
        event.accept()

    def _load_orientation_corrected_pil_image(self, path):
        if not PIL_AVAILABLE:
            return None, None, None

        pil_img = Image.open(path)
        exif_dict = None
        icc_profile = pil_img.info.get("icc_profile")

        if "exif" in pil_img.info and pil_img.info['exif']:
            try:
                exif_dict = piexif.load(pil_img.info["exif"])
                orientation = exif_dict["0th"].get(piexif.ImageIFD.Orientation, 1)
                
                if orientation > 1:
                    if   orientation == 2: pil_img = pil_img.transpose(Image.FLIP_LEFT_RIGHT)
                    elif orientation == 3: pil_img = pil_img.transpose(Image.ROTATE_180)
                    elif orientation == 4: pil_img = pil_img.transpose(Image.FLIP_TOP_BOTTOM)
                    elif orientation == 5: pil_img = pil_img.transpose(Image.TRANSPOSE)
                    elif orientation == 6: pil_img = pil_img.transpose(Image.ROTATE_270)
                    elif orientation == 7: pil_img = pil_img.transpose(Image.TRANSVERSE)
                    elif orientation == 8: pil_img = pil_img.transpose(Image.ROTATE_90)
                
                exif_dict["0th"][piexif.ImageIFD.Orientation] = 1
            except Exception:
                exif_dict = None

        return pil_img, exif_dict, icc_profile

    def load_current_image(self):
        self.original_pixmap = self.pil_image_oriented = self.pil_exif_info = self.pil_icc_profile = None
        if self.rubber_band:
            self.rubber_band.hide()
        self.is_moving_selection = self.is_resizing_selection = False
        self.undo_button.setEnabled(self.current_index in self.undo_backups)

        if not self.image_paths or not (0 <= self.current_index < len(self.image_paths)):
            self.image_label.setText("Chyba: Neplatn√Ω index obr√°zku.")
            self.crop_button.setEnabled(False)
            return

        image_path = self.image_paths[self.current_index]

        if not PIL_AVAILABLE:
            self.image_label.setText("‚ùå Knihovny Pillow a piexif nejsou dostupn√©.\nNainstalujte je: pip install Pillow piexif")
            self.crop_button.setEnabled(False)
            return

        try:
            self.pil_image_oriented, self.pil_exif_info, self.pil_icc_profile = self._load_orientation_corrected_pil_image(image_path)
            if self.pil_image_oriented is None:
                raise ValueError("Nepoda≈ôilo se naƒç√≠st obr√°zek pomoc√≠ Pillow.")
            
            q_image = ImageQt.ImageQt(self.pil_image_oriented.convert("RGBA"))
            pixmap = QPixmap.fromImage(q_image)

        except Exception as e:
            self.image_label.setText(f"‚ùå\nNelze naƒç√≠st obr√°zek:\n{os.path.basename(image_path)}\n{e}")
            self.crop_button.setEnabled(False)
            self.setMinimumSize(400, 200)
            return
            
        self.setWindowTitle(f"N√°hled - {os.path.basename(image_path)}")
        self.info_label.setText(f"{self.current_index + 1} / {len(self.image_paths)}")
        
        self.original_pixmap = pixmap
        self.crop_button.setEnabled(True)

        screen_geometry = QApplication.primaryScreen().availableGeometry()
        max_width, max_height = screen_geometry.width() * 0.8, screen_geometry.height() * 0.8
        scaled_pixmap = pixmap.scaled(int(max_width), int(max_height), Qt.KeepAspectRatio, Qt.SmoothTransformation)
        
        self.image_label.setPixmap(scaled_pixmap)
        self.resize(scaled_pixmap.width() + 40, scaled_pixmap.height() + 110)
        

    def _get_pixmap_rect_in_label(self):
        if not self.image_label.pixmap() or self.image_label.pixmap().isNull():
            return QRect()
        pm_size = self.image_label.pixmap().size()
        lbl_size = self.image_label.size()
        x = (lbl_size.width() - pm_size.width()) // 2
        y = (lbl_size.height() - pm_size.height()) // 2
        return QRect(x, y, pm_size.width(), pm_size.height())

    def _get_corner_at_pos(self, pos):
        if not self.rubber_band or not self.rubber_band.isVisible():
            return None
        
        geom = self.rubber_band.geometry()
        s = self.handle_size
        
        if QRect(geom.topLeft(), QSize(s, s)).contains(pos): return "top_left"
        if QRect(geom.topRight() - QPoint(s, 0), QSize(s, s)).contains(pos): return "top_right"
        if QRect(geom.bottomLeft() - QPoint(0, s), QSize(s, s)).contains(pos): return "bottom_left"
        if QRect(geom.bottomRight() - QPoint(s, s), QSize(s, s)).contains(pos): return "bottom_right"
        
        return None

    # Ve t≈ô√≠dƒõ ImagePreviewDialog
    def crop_image(self):
        if not self.original_pixmap or self.original_pixmap.isNull(): return
        if not self.rubber_band or not self.rubber_band.isVisible():
            QMessageBox.information(self, "O≈ôez", "Nejprve my≈°√≠ vyberte oblast pro o≈ôez.")
            return
    
        try:
            from PIL import Image
            import piexif
        except ImportError as e:
            QMessageBox.critical(self, "Chyb√≠ knihovna", f"Pro o≈ôez je vy≈æadov√°na knihovna Pillow a piexif.\nChyba: {e}")
            return
    
        image_path = self.image_paths[self.current_index]
        try:
            if self.current_index not in self.undo_backups:
                backup_path = image_path + f".{int(time.time())}.bak"
                shutil.copy2(image_path, backup_path)
                self.undo_backups[self.current_index] = backup_path
        except Exception as e:
            QMessageBox.critical(self, "Chyba z√°lohov√°n√≠", f"Nepoda≈ôilo se vytvo≈ôit z√°lohu origin√°lu:\n{e}")
            return
    
        selection_in_label = self.rubber_band.geometry()
        pixmap_rect_in_label = self._get_pixmap_rect_in_label()
        if pixmap_rect_in_label.width() <= 0 or pixmap_rect_in_label.height() <= 0:
            QMessageBox.critical(self, "Chyba v√Ωpoƒçtu", "Nelze urƒçit rozmƒõry zobrazen√©ho obr√°zku pro o≈ôez.")
            return
    
        selection_on_pixmap = selection_in_label.translated(-pixmap_rect_in_label.topLeft())
        x_ratio = self.original_pixmap.width() / pixmap_rect_in_label.width()
        y_ratio = self.original_pixmap.height() / pixmap_rect_in_label.height()
        left = selection_on_pixmap.left() * x_ratio
        top = selection_on_pixmap.top() * y_ratio
        right = (selection_on_pixmap.left() + selection_on_pixmap.width()) * x_ratio
        bottom = (selection_on_pixmap.top() + selection_on_pixmap.height()) * y_ratio
        crop_box = (max(0, int(left)), max(0, int(top)), min(self.original_pixmap.width(), int(right)), min(self.original_pixmap.height(), int(bottom)))
    
        try:
            with Image.open(image_path) as pil_img:
                params = {"quality": 95}
                if "exif" in pil_img.info:
                    try:
                        exif_dict = piexif.load(pil_img.info["exif"])
                        if piexif.ImageIFD.Orientation in exif_dict["0th"]: exif_dict["0th"][piexif.ImageIFD.Orientation] = 1
                        exif_dict["Exif"].pop(piexif.ExifIFD.PixelXDimension, None)
                        exif_dict["Exif"].pop(piexif.ExifIFD.PixelYDimension, None)
                        params["exif"] = piexif.dump(exif_dict)
                    except Exception:
                        params["exif"] = pil_img.info["exif"]
                if "icc_profile" in pil_img.info:
                    params["icc_profile"] = pil_img.info["icc_profile"]
                
                cropped_pil_img = pil_img.crop(crop_box)
                cropped_pil_img.save(image_path, **params)
                
                if sys.platform == 'darwin' and self.current_index in self.undo_backups:
                    backup_for_attrs = self.undo_backups[self.current_index]
                    try:
                        xattrs = {name: os.getxattr(backup_for_attrs, name) for name in os.listxattr(backup_for_attrs)}
                        for name, value in xattrs.items():
                            try: os.setxattr(image_path, name, value)
                            except OSError: continue
                    except (OSError, AttributeError): pass
    
            self.rubber_band.hide()
            self.undo_button.setEnabled(True)
            
            # NOV√â: Aktualizace stavu o≈ôez√°n√≠
            photo_number_str = os.path.basename(image_path).split('+')[0]
            self.crop_status[photo_number_str] = True
            
            self.load_current_image()
        except Exception as e:
            QMessageBox.critical(self, "Chyba p≈ôi o≈ôezu", f"Nepoda≈ôilo se o≈ô√≠znout a ulo≈æit obr√°zek:\n{e}")
            self.undo_crop()

    # Ve t≈ô√≠dƒõ ImagePreviewDialog
    def undo_crop(self):
        backup_path = self.undo_backups.get(self.current_index)
        if not backup_path or not os.path.exists(backup_path):
            return
    
        current_image_path = self.image_paths[self.current_index]
        try:
            shutil.copy2(backup_path, current_image_path)
            self.undo_button.setEnabled(False)
            
            # NOV√â: Aktualizace stavu o≈ôez√°n√≠
            photo_number_str = os.path.basename(current_image_path).split('+')[0]
            if photo_number_str in self.crop_status:
                self.crop_status[photo_number_str] = False
                
            self.load_current_image()
        except Exception as e:
            QMessageBox.critical(self, "Chyba p≈ôi obnovƒõ", f"Nepoda≈ôilo se obnovit obr√°zek ze z√°lohy:\n{e}")

    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton and self.image_label.underMouse():
            pixmap_rect = self._get_pixmap_rect_in_label()
            pos_in_label = self.image_label.mapFrom(self, event.pos())
            
            if not pixmap_rect.contains(pos_in_label):
                super().mousePressEvent(event)
                return
            
            corner = self._get_corner_at_pos(pos_in_label)
            if self.rubber_band and self.rubber_band.isVisible() and corner:
                self.is_resizing_selection = True
                self.resize_corner = corner
            elif self.rubber_band and self.rubber_band.isVisible() and self.rubber_band.geometry().contains(pos_in_label):
                self.is_moving_selection = True
                self.move_offset = pos_in_label - self.rubber_band.geometry().topLeft()
            else:
                self.crop_origin = event.pos()
                if not self.rubber_band:
                    self.rubber_band = QRubberBand(QRubberBand.Rectangle, self.image_label)
                self.rubber_band.setGeometry(QRect(pos_in_label, QSize()))
                self.rubber_band.show()
                
        super().mousePressEvent(event)

    def mouseMoveEvent(self, event):
        pixmap_rect = self._get_pixmap_rect_in_label()
        if not pixmap_rect.isValid():
            super().mouseMoveEvent(event)
            return

        pos_in_label = self.image_label.mapFrom(self, event.pos())
        
        # Zmƒõna kurzoru p≈ôi najet√≠ na rohy
        if not (self.is_moving_selection or self.is_resizing_selection or self.crop_origin):
            corner = self._get_corner_at_pos(pos_in_label)
            if corner in ("top_left", "bottom_right"):
                self.image_label.setCursor(Qt.SizeFDiagCursor)
            elif corner in ("top_right", "bottom_left"):
                self.image_label.setCursor(Qt.SizeBDiagCursor)
            else:
                self.image_label.setCursor(Qt.ArrowCursor)

        if self.is_resizing_selection:
            current_geom = self.rubber_band.geometry()
            new_rect = QRect(current_geom)

            if self.resize_corner == "bottom_right":
                fixed_point = current_geom.topLeft()
                side = max(pos_in_label.x() - fixed_point.x(), pos_in_label.y() - fixed_point.y())
                new_rect.setSize(QSize(side, side))
            elif self.resize_corner == "top_left":
                fixed_point = current_geom.bottomRight()
                side = max(fixed_point.x() - pos_in_label.x(), fixed_point.y() - pos_in_label.y())
                new_rect.setTopLeft(QPoint(fixed_point.x() - side, fixed_point.y() - side))
            elif self.resize_corner == "top_right":
                fixed_point = current_geom.bottomLeft()
                side = max(pos_in_label.x() - fixed_point.x(), fixed_point.y() - pos_in_label.y())
                new_rect.setTopRight(QPoint(fixed_point.x() + side, fixed_point.y() - side))
            elif self.resize_corner == "bottom_left":
                fixed_point = current_geom.topRight()
                side = max(fixed_point.x() - pos_in_label.x(), pos_in_label.y() - fixed_point.y())
                new_rect.setBottomLeft(QPoint(fixed_point.x() - side, fixed_point.y() + side))
            
            self.rubber_band.setGeometry(new_rect.intersected(pixmap_rect))

        elif self.is_moving_selection:
            new_top_left = pos_in_label - self.move_offset
            moved_rect = QRect(new_top_left, self.rubber_band.size())
            # Omezen√≠ pohybu v r√°mci hranic pixmapy
            moved_rect.moveLeft(max(pixmap_rect.left(), moved_rect.left()))
            moved_rect.moveTop(max(pixmap_rect.top(), moved_rect.top()))
            moved_rect.moveRight(min(pixmap_rect.right(), moved_rect.right()))
            moved_rect.moveBottom(min(pixmap_rect.bottom(), moved_rect.bottom()))
            self.rubber_band.setGeometry(moved_rect)
        
        elif self.crop_origin:
            start_pos_in_label = self.image_label.mapFrom(self, self.crop_origin)
            rect = QRect(start_pos_in_label, pos_in_label).normalized()
            side = max(rect.width(), rect.height())
            
            top_left = rect.topLeft()
            if top_left.x() + side > pixmap_rect.right(): top_left.setX(pixmap_rect.right() - side)
            if top_left.y() + side > pixmap_rect.bottom(): top_left.setY(pixmap_rect.bottom() - side)
            
            final_rect = QRect(top_left, QSize(side, side))
            self.rubber_band.setGeometry(final_rect.intersected(pixmap_rect))

        super().mouseMoveEvent(event)

    def mouseReleaseEvent(self, event):
        if event.button() == Qt.LeftButton:
            self.crop_origin = None
            self.is_moving_selection = False
            self.is_resizing_selection = False
            self.resize_corner = None
            self.image_label.setCursor(Qt.ArrowCursor)
        super().mouseReleaseEvent(event)

    def keyPressEvent(self, event):
        key = event.key()
        if key in (Qt.Key_Space, Qt.Key_Escape): self.accept()
        elif key == Qt.Key_Down:
            if self.current_index < len(self.image_paths) - 1:
                self.current_index += 1; self.load_current_image()
        elif key == Qt.Key_Up:
            if self.current_index > 0:
                self.current_index -= 1; self.load_current_image()
        else: super().keyPressEvent(event)

    def closeEvent(self, event):
        # Automatick√Ω √∫klid v≈°ech vytvo≈ôen√Ωch z√°lo≈æn√≠ch soubor≈Ø.
        for backup_path in self.undo_backups.values():
            if os.path.exists(backup_path):
                try:
                    os.remove(backup_path)
                except OSError:
                    # Ignorujeme chyby p≈ôi zav√≠r√°n√≠, abychom nezablokovali aplikaci.
                    pass
        super().closeEvent(event)
        
class LineNumberArea(QWidget):
    def __init__(self, editor):
        super().__init__(editor)
        self._editor = editor

    def sizeHint(self):
        return QSize(self._editor.lineNumberAreaWidth(), 0)

    def paintEvent(self, event):
        self._editor.lineNumberAreaPaintEvent(event)


class JSONCodeEditor(QPlainTextEdit):
    """QPlainTextEdit s lev√Ωm sloupcem ƒç√≠sel ≈ô√°dk≈Ø a vlo≈æen√≠m 2 mezer na Tab."""
    def __init__(self, parent=None):
        super().__init__(parent)
        self._lineNumberArea = LineNumberArea(self)
        # Sign√°ly pro udr≈æen√≠ ≈°√≠≈ôky a p≈ôemalov√°n√≠
        self.blockCountChanged.connect(self.updateLineNumberAreaWidth)
        self.updateRequest.connect(self.updateLineNumberArea)
        self.cursorPositionChanged.connect(self.highlightCurrentLine)
        # V√Ωchoz√≠ font konzistentn√≠ s ostatn√≠mi editory
        self.setFont(QFont("Consolas", 11))
        self.updateLineNumberAreaWidth(0)
        self.highlightCurrentLine()
        # Vypnut√≠ zalamov√°n√≠ ≈ô√°dk≈Ø (JSON je p≈ôehlednƒõj≈°√≠ po ≈ô√°dc√≠ch)
        self.setLineWrapMode(QPlainTextEdit.NoWrap)

    # ≈†√≠≈ôka lev√©ho sloupce podle poƒçtu ƒç√≠slic
    def lineNumberAreaWidth(self):
        digits = len(str(max(1, self.blockCount())))
        space = 3 + self.fontMetrics().horizontalAdvance('9') * digits
        return space + 6  # mal√© odsazen√≠

    def updateLineNumberAreaWidth(self, _):
        self.setViewportMargins(self.lineNumberAreaWidth(), 0, 0, 0)

    def updateLineNumberArea(self, rect, dy):
        if dy:
            self._lineNumberArea.scroll(0, dy)
        else:
            self._lineNumberArea.update(0, rect.y(), self._lineNumberArea.width(), rect.height())
        if rect.contains(self.viewport().rect()):
            self.updateLineNumberAreaWidth(0)

    def resizeEvent(self, event):
        super().resizeEvent(event)
        cr = self.contentsRect()
        self._lineNumberArea.setGeometry(cr.left(), cr.top(), self.lineNumberAreaWidth(), cr.height())

    def lineNumberAreaPaintEvent(self, event):
        painter = QPainter(self._lineNumberArea)
        # Dark theme kompatibiln√≠ barvy (dr≈æ√≠ se st√°vaj√≠c√≠ho vzhledu)
        bg = QColor("#2b2b2b")
        fg = QColor("#b0b0b0")
        painter.fillRect(event.rect(), bg)

        block = self.firstVisibleBlock()
        blockNumber = block.blockNumber()
        top = int(self.blockBoundingGeometry(block).translated(self.contentOffset()).top())
        bottom = top + int(self.blockBoundingRect(block).height())

        while block.isValid() and top <= event.rect().bottom():
            if block.isVisible() and bottom >= event.rect().top():
                number = str(blockNumber + 1)
                painter.setPen(fg)
                fm = self.fontMetrics()
                x = self._lineNumberArea.width() - fm.horizontalAdvance(number) - 3
                painter.drawText(x, bottom - fm.descent(), number)
            block = block.next()
            top = bottom
            bottom = top + int(self.blockBoundingRect(block).height())
            blockNumber += 1

    def highlightCurrentLine(self):
        # Jemn√© zv√Ωraznƒõn√≠ aktu√°ln√≠ho ≈ô√°dku (nen√≠ agresivn√≠, dr≈æ√≠ dark theme)
        selection = QTextEdit.ExtraSelection()
        lineColor = QColor("#303030")
        selection.format.setBackground(lineColor)
        selection.format.setProperty(QTextFormat.FullWidthSelection, True)
        selection.cursor = self.textCursor()
        selection.cursor.clearSelection()
        self.setExtraSelections([selection])

    def keyPressEvent(self, event):
        # Vlo≈æ√≠ dvƒõ mezery m√≠sto standardn√≠ho Tab
        if event.key() == Qt.Key_Tab and not (event.modifiers() & (Qt.ControlModifier | Qt.AltModifier | Qt.MetaModifier)):
            self.insertPlainText("  ")
            return
        super().keyPressEvent(event)

# FILE: gui/pdf_generator_window.py
# CLASS: AnonymPhotosWidget (NOV√Å T≈ò√çDA)
# UM√çSTI vedle NotesPhotosWidget / PhotosStatusWidget.
class AnonymPhotosWidget(QWidget):
    """Widget pro zobrazen√≠ fotek bez anonymizace s jedinou akc√≠ 'Anonymizovat'."""

    def __init__(self, parent=None):
        super().__init__(parent)
        self.setup_ui()

    def setup_ui(self):
        layout = QVBoxLayout(self)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(6)

        # Nadpis
        label = QLabel("üì∏ Seznam fotek:")
        label.setStyleSheet("font-weight: bold; font-size: 12px; color: #e6e6e6;")
        label.setSizePolicy(QSizePolicy.Preferred, QSizePolicy.Fixed)
        layout.addWidget(label)

        # Seznam
        self.list_widget = QListWidget()
        self.list_widget.setMinimumHeight(150)
        self.list_widget.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.list_widget.setSelectionMode(QListWidget.ExtendedSelection)
        self.list_widget.setContextMenuPolicy(Qt.CustomContextMenu)
        self.list_widget.customContextMenuRequested.connect(self.show_context_menu)
        self.list_widget.setStyleSheet("""
            QListWidget {
                background-color: #1a1a1a;
                color: #e6e6e6;
                border: 1px solid #555555;
                border-radius: 4px;
                font-family: monospace;
                font-size: 10px;
            }
            QListWidget::item { padding: 2px 6px; border-bottom: 1px solid #333333; }
            QListWidget::item:selected { background-color: #2a3b4f; }
        """)
        layout.addWidget(self.list_widget, stretch=1)

        # Info
        self.info_label = QLabel("Naƒç√≠t√°n√≠...")
        self.info_label.setStyleSheet("font-size: 10px; color: #b0b0b0; font-style: italic;")
        self.info_label.setSizePolicy(QSizePolicy.Preferred, QSizePolicy.Fixed)
        self.info_label.setWordWrap(True)
        layout.addWidget(self.info_label)

    # --- PUBLIC API ---
    def update_photos_list(self, folder_path, crop_status=None):
        """Aktualizuje seznam fotek, kter√© NEJSOU v JSONu anonymizace."""
        import os, json
        self.list_widget.clear()
        if crop_status is None:
            crop_status = {}

        if not folder_path or not os.path.isdir(folder_path):
            self.list_widget.addItem("‚ùå Slo≈æka neexistuje nebo nen√≠ zad√°na")
            self.info_label.setText("Zkontrolujte cestu k fotk√°m ƒçty≈ôl√≠stk≈Ø")
            return

        try:
            files = os.listdir(folder_path)
            photo_extensions = {'.jpg', '.jpeg', '.png', '.heic', '.heif', '.tiff', '.tif', '.bmp'}
            photos_in_folder = set()
            invalid_files = []
            for filename in files:
                ext = os.path.splitext(filename)[1].lower()
                if ext in photo_extensions:
                    try:
                        number_part = filename.split('+')[0]
                        photo_number = int(number_part)
                        photos_in_folder.add(photo_number)
                    except (ValueError, IndexError):
                        invalid_files.append(filename)

            photos_anon = self.get_anonymized_numbers()
            show = photos_in_folder - photos_anon

            if not photos_in_folder:
                self.list_widget.addItem("‚ÑπÔ∏è Ve slo≈æce nejsou ≈æ√°dn√© fotky ƒçty≈ôl√≠stk≈Ø")
                self.info_label.setText("Slo≈æka je pr√°zdn√° nebo neobsahuje platn√© soubory")
            elif not show:
                self.list_widget.addItem("‚úÖ V≈°echny fotky jsou anonymizovan√©")
                self.info_label.setText(f"Celkem: {len(photos_in_folder)} fotek ‚Äì v≈°e anonymizov√°no")
            else:
                for photo_num in sorted(show):
                    is_cropped = crop_status.get(str(photo_num), False)
                    icon = "‚úÇÔ∏è" if is_cropped else "üñºÔ∏è"
                    item = QListWidgetItem(f"{icon} {photo_num}")
                    tip = "O≈ôezan√°" if is_cropped else "Neupraven√°"
                    item.setToolTip(f"Fotka ƒç√≠slo {photo_num} ({tip})\nNen√≠ anonymizovan√°.")
                    self.list_widget.addItem(item)
                self.info_label.setText(f"Bez anonymizace: {len(show)} z {len(photos_in_folder)} fotek")

            if invalid_files:
                self.list_widget.addItem("")
                self.list_widget.addItem("‚ö†Ô∏è Neplatn√© n√°zvy soubor≈Ø:")
                for invalid_file in invalid_files[:5]:
                    self.list_widget.addItem(f" {invalid_file}")
                if len(invalid_files) > 5:
                    self.list_widget.addItem(f" ... a {len(invalid_files) - 5} dal≈°√≠ch")
        except Exception as e:
            self.list_widget.addItem(f"‚ùå Chyba p≈ôi ƒçten√≠ slo≈æky: {str(e)}")
            self.info_label.setText("Chyba p≈ôi anal√Ωze fotek")

    # --- INTERN√ç ---
    def show_context_menu(self, position):
        """Kontextov√© menu s JEDINOU akc√≠ 'Anonymizovat'."""
        selected_items = self.list_widget.selectedItems()
        if not selected_items:
            return
        photo_items = [it for it in selected_items if it.text().startswith(("üñºÔ∏è", "‚úÇÔ∏è", "üì∑"))]
        if not photo_items:
            return

        menu = QMenu(self.list_widget)
        act = menu.addAction("üõ°Ô∏è Anonymizovat")
        act.triggered.connect(lambda: self._action_anonymize(photo_items))
        menu.exec(self.list_widget.mapToGlobal(position))

    def _action_anonymize(self, photo_items):
        """P≈ôid√° vybran√° ƒç√≠sla do JSONu anonymizace (slouƒç√≠ do interval≈Ø)."""
        import json
        from PySide6.QtWidgets import QMessageBox

        ids = []
        for it in photo_items:
            try:
                ids.append(int(it.text().split()[-1]))
            except Exception:
                continue
        if not ids:
            QMessageBox.information(self, "Anonymizovat", "Ve v√Ωbƒõru nebyla rozpozn√°na ≈æ√°dn√° ƒç√≠sla.")
            return

        win = self.window()
        if win is None or not hasattr(win, "anonym_config_text"):
            QMessageBox.warning(self, "Anonymizovat", "Nenalezen editor 'üõ°Ô∏è JSON anonymizace'.")
            return

        # Naƒçti JSON
        try:
            raw = win.anonym_config_text.toPlainText() or "{}"
            data = json.loads(raw)
            if not isinstance(data, dict):
                raise ValueError("Ko≈ôen JSONu mus√≠ b√Ωt objekt ({}).")
        except Exception as e:
            QMessageBox.warning(self, "Anonymizovat", f"Editor 'üõ°Ô∏è JSON anonymizace' obsahuje neplatn√Ω JSON.\n{e}")
            return

        # Vezmi aktu√°ln√≠ pole pro kl√≠ƒç "ANONYMIZOVANE"
        arr = data.get("ANONYMIZOVANE", [])
        existing = self._expand_intervals(arr)
        all_numbers = existing.union(set(ids))
        intervals = self._merge_to_intervals(sorted(all_numbers))
        data["ANONYMIZOVANE"] = intervals

        # Zapi≈° zpƒõt (kompaktn√≠ form√°t jako jinde)
        try:
            formatted = self._format_json_compact_fixed(data)
        except Exception:
            formatted = json.dumps(data, ensure_ascii=False, indent=2, sort_keys=True)
        win.anonym_config_text.setPlainText(formatted)

        # Refresh seznamu
        try:
            win.update_anonym_photos_list()
        except Exception:
            pass

        QMessageBox.information(self, "Anonymizovat", f"Anonymizov√°no: {len(ids)} polo≈æek.")

    # === Pomocn√© metody: pr√°ce s intervaly a form√°tov√°n√≠ (lok√°ln√≠ kopie, ≈æ√°dn√© z√°sahy do ostatn√≠ch t≈ô√≠d) ===
    def _expand_intervals(self, intervals_list) -> set[int]:
        numbers = set()
        for item in intervals_list or []:
            s = str(item).strip()
            if not s:
                continue
            if '-' in s:
                try:
                    a, b = s.split('-', 1)
                    ai = int(a.strip()); bi = int(b.strip())
                    if ai > bi: ai, bi = bi, ai
                    numbers.update(range(ai, bi + 1))
                except Exception:
                    continue
            else:
                if s.isdigit():
                    numbers.add(int(s))
        return numbers

    def _merge_to_intervals(self, numbers) -> list[str]:
        if not numbers:
            return []
        numbers = sorted(set(numbers))
        out = []
        start = end = numbers[0]
        for n in numbers[1:]:
            if n == end + 1:
                end = n
            else:
                out.append(str(start) if start == end else f"{start}-{end}")
                start = end = n
        out.append(str(start) if start == end else f"{start}-{end}")
        return out

    def _format_json_compact_fixed(self, data: dict) -> str:
        import json
        if not data:
            return "{}"
        keys = list(data.keys())
        keys.sort(key=lambda x: str(x))
        max_key_len = max(len(f'"{k}":') for k in keys)
        lines = ["{"]
        for i, k in enumerate(keys):
            v = data[k]
            v_json = json.dumps(v, ensure_ascii=False, separators=(',', ' '))
            comma = "," if i < len(keys) - 1 else ""
            key_pad = f'"{k}":'.ljust(max_key_len + 2)
            lines.append(f"  {key_pad} {v_json}{comma}")
        lines.append("}")
        return "\n".join(lines)

    def get_anonymized_numbers(self) -> set[int]:
        """Vr√°t√≠ mno≈æinu ƒç√≠sel, kter√° JSOU anonymizovan√° podle editoru v oknƒõ."""
        import json
        win = self.window()
        if win is None or not hasattr(win, "anonym_config_text"):
            return set()
        try:
            raw = win.anonym_config_text.toPlainText().strip()
            if not raw:
                return set()
            data = json.loads(raw)
            if not isinstance(data, dict):
                return set()
            arr = data.get("ANONYMIZOVANE", [])
            return self._expand_intervals(arr)
        except Exception:
            return set()
        
# FILE: gui/pdf_generator_window.py
# CLASS: NotesPhotosWidget (NOV√Å T≈ò√çDA)
# UM√çSTI vedle PhotosStatusWidget (stejn√° √∫rove≈à). Styl a logika v√Ωpisu p≈ôevzata,
# kontextov√© menu obsahuje JEDINOU akci ‚Äûüìù Zapsat pozn√°mku‚Äú.
class NotesPhotosWidget(QWidget):
    """Widget pro zobrazen√≠ fotek bez zapsan√© Nastaven√≠ pozn√°mek s jedinou akc√≠ 'Zapsat pozn√°mku'."""

    def __init__(self, parent=None):
        super().__init__(parent)
        self.setup_ui()

    def setup_ui(self):
        layout = QVBoxLayout(self)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(6)

        # Nadpis
        label = QLabel("üì∏ Seznam fotek:")
        label.setStyleSheet("font-weight: bold; font-size: 12px; color: #e6e6e6;")
        label.setSizePolicy(QSizePolicy.Preferred, QSizePolicy.Fixed)
        layout.addWidget(label)

        # Seznam fotek s multi-select
        self.list_widget = QListWidget()
        self.list_widget.setMinimumHeight(150)
        self.list_widget.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.list_widget.setSelectionMode(QListWidget.ExtendedSelection)

        # Kontextov√© menu
        self.list_widget.setContextMenuPolicy(Qt.CustomContextMenu)
        self.list_widget.customContextMenuRequested.connect(self.show_context_menu)

        self.list_widget.setStyleSheet("""
            QListWidget {
                background-color: #1a1a1a;
                color: #e6e6e6;
                border: 1px solid #555555;
                border-radius: 4px;
                font-family: monospace;
                font-size: 10px;
            }
            QListWidget::item {
                padding: 2px 6px;
                border-bottom: 1px solid #333333;
            }
            QListWidget::item:selected {
                background-color: #2a3b4f;
            }
        """)
        layout.addWidget(self.list_widget, stretch=1)

        # Info label
        self.info_label = QLabel("Naƒç√≠t√°n√≠...")
        self.info_label.setStyleSheet("font-size: 10px; color: #b0b0b0; font-style: italic;")
        self.info_label.setSizePolicy(QSizePolicy.Preferred, QSizePolicy.Fixed)
        self.info_label.setWordWrap(True)
        layout.addWidget(self.info_label)

    # --- PUBLIC API ---
    def update_photos_list(self, folder_path, crop_status=None):
        """Aktualizuje seznam fotek BEZ pozn√°mky (stejn√° logika ƒçten√≠ slo≈æky jako ve 'Stavech')."""
        import os
        self.list_widget.clear()
        if crop_status is None:
            crop_status = {}

        if not folder_path or not os.path.isdir(folder_path):
            self.list_widget.addItem("‚ùå Slo≈æka neexistuje nebo nen√≠ zad√°na")
            self.info_label.setText("Zkontrolujte cestu k fotk√°m ƒçty≈ôl√≠stk≈Ø")
            return

        try:
            files = os.listdir(folder_path)
            photo_extensions = {'.jpg', '.jpeg', '.png', '.heic', '.heif', '.tiff', '.tif', '.bmp'}
            photos_in_folder = set()
            invalid_files = []
            for filename in files:
                ext = os.path.splitext(filename)[1].lower()
                if ext in photo_extensions:
                    try:
                        number_part = filename.split('+')[0]
                        photo_number = int(number_part)
                        photos_in_folder.add(photo_number)
                    except (ValueError, IndexError):
                        invalid_files.append(filename)

            photos_with_notes = self.get_numbers_with_notes()
            photos_without_note = photos_in_folder - photos_with_notes

            if not photos_in_folder:
                self.list_widget.addItem("‚ÑπÔ∏è Ve slo≈æce nejsou ≈æ√°dn√© fotky ƒçty≈ôl√≠stk≈Ø")
                self.info_label.setText("Slo≈æka je pr√°zdn√° nebo neobsahuje platn√© soubory")
            elif not photos_without_note:
                self.list_widget.addItem("‚úÖ V≈°echny fotky maj√≠ pozn√°mku")
                self.info_label.setText(f"Celkem: {len(photos_in_folder)} fotek ‚Äì v≈°echny maj√≠ pozn√°mku")
            else:
                for photo_num in sorted(photos_without_note):
                    is_cropped = crop_status.get(str(photo_num), False)
                    icon = "‚úÇÔ∏è" if is_cropped else "üñºÔ∏è"
                    item = QListWidgetItem(f"{icon} {photo_num}")
                    tip = "O≈ôezan√°" if is_cropped else "Neupraven√°"
                    item.setToolTip(f"Fotka ƒç√≠slo {photo_num} ({tip})\nNem√° zapsanou pozn√°mku.")
                    self.list_widget.addItem(item)
                self.info_label.setText(f"Bez Nastaven√≠ pozn√°mek: {len(photos_without_note)} z {len(photos_in_folder)} fotek")

            if invalid_files:
                self.list_widget.addItem("")
                self.list_widget.addItem("‚ö†Ô∏è Neplatn√© n√°zvy soubor≈Ø:")
                for invalid_file in invalid_files[:5]:
                    self.list_widget.addItem(f" {invalid_file}")
                if len(invalid_files) > 5:
                    self.list_widget.addItem(f" ... a {len(invalid_files) - 5} dal≈°√≠ch")
        except Exception as e:
            self.list_widget.addItem(f"‚ùå Chyba p≈ôi ƒçten√≠ slo≈æky: {str(e)}")
            self.info_label.setText("Chyba p≈ôi anal√Ωze fotek")

    # --- INTERN√ç ---
    def show_context_menu(self, position):
        """Kontextov√© menu s JEDINOU akc√≠ 'Zapsat pozn√°mku' (funguje 1:1 jako ve Web fotky)."""
        selected_items = self.list_widget.selectedItems()
        if not selected_items:
            return

        # Pouze polo≈æky reprezentuj√≠c√≠ fotky
        photo_items = [it for it in selected_items if it.text().startswith(("üñºÔ∏è", "‚úÇÔ∏è", "üì∑"))]
        if not photo_items:
            return

        menu = QMenu(self.list_widget)
        act_note = menu.addAction("üìù Zapsat pozn√°mku")
        act_note.triggered.connect(lambda: self._action_write_note(photo_items))
        menu.exec(self.list_widget.mapToGlobal(position))

    def _action_write_note(self, photo_items):
        """Otev≈ôe mod√°ln√≠ vstup a zap√≠≈°e pozn√°mku do <PdfGeneratorWindow>.notes_text pro vybran√° ƒç√≠sla."""
        from PySide6.QtWidgets import QInputDialog, QMessageBox

        # Sesb√≠rej ƒç√≠sla
        ids = []
        for it in photo_items:
            try:
                num = int(it.text().split()[-1])
                ids.append(str(num))
            except Exception:
                continue

        if not ids:
            QMessageBox.information(self, "Zapsat pozn√°mku", "Ve v√Ωbƒõru nebyla rozpozn√°na ≈æ√°dn√° ƒç√≠sla.")
            return

        # Dialog
        note_text, ok = QInputDialog.getMultiLineText(
            self, "Zapsat pozn√°mku", "Pozn√°mka pro vybran√© polo≈æky:", ""
        )
        if not ok:
            return
        note_text = (note_text or "").strip()
        if not note_text:
            QMessageBox.information(self, "Zapsat pozn√°mku", "Pozn√°mka je pr√°zdn√° ‚Äì nic se nezapsalo.")
            return

        # Editor v hlavn√≠m oknƒõ
        win = self.window()
        if win is None or not hasattr(win, "notes_text"):
            QMessageBox.warning(self, "Zapsat pozn√°mku", "Nenalezen editor 'üìù JSON Nastaven√≠ pozn√°mek'.")
            return

        try:
            raw = win.notes_text.toPlainText() or "{}"
            data = json.loads(raw)
            if not isinstance(data, dict):
                raise ValueError("Ko≈ôen JSONu mus√≠ b√Ωt objekt ({}).")
        except Exception as e:
            QMessageBox.warning(self, "Zapsat pozn√°mku", f"Editor 'üìù JSON Nastaven√≠ pozn√°mek' obsahuje neplatn√Ω JSON.\n{e}")
            return

        # Zapi≈° pozn√°mku pro v≈°echna ƒç√≠sla
        for cid in ids:
            data[str(cid)] = note_text

        # Form√°tov√°n√≠: preferuj projektov√Ω formatter, jinak kompaktn√≠ fallback
        try:
            formatted = self.format_json_compact_fixed(data)
        except Exception:
            formatted = json.dumps(data, ensure_ascii=False, indent=2, sort_keys=True)

        win.notes_text.setPlainText(formatted)

        # Refresh prav√©ho seznamu + p≈ô√≠padn√© glob√°ln√≠ refreshe
        try:
            self.update_photos_list(win.edit_clover_path.text().strip(), getattr(win, 'crop_status', {}))
        except Exception:
            pass
        try:
            win.update_missing_photos_list()
        except Exception:
            pass

        QMessageBox.information(self, "Zapsat pozn√°mku", f"Zaps√°na pozn√°mka pro {len(ids)} polo≈æek.")

    def get_numbers_with_notes(self) -> set[int]:
        """Vr√°t√≠ mno≈æinu ƒç√≠sel, kter√° MAJ√ç pozn√°mku v editoru notes_text."""
        win = self.window()
        if win is None or not hasattr(win, "notes_text"):
            return set()
        try:
            raw = win.notes_text.toPlainText().strip()
            if not raw:
                return set()
            data = json.loads(raw)
            if not isinstance(data, dict):
                return set()
            out = set()
            for k in data.keys():
                try:
                    out.add(int(str(k).strip()))
                except Exception:
                    continue
            return out
        except Exception:
            return set()

    # Reuse stejn√©ho form√°tu jako PhotosStatusWidget (bez z√°vislosti na main window)
    def format_json_compact_fixed(self, data):
        """Form√°tuje JSON v kompaktn√≠m stylu ‚Äì ka≈æd√Ω kl√≠ƒç na jeden ≈ô√°dek se zarovn√°n√≠m."""
        if not data:
            return "{}"
        lines = ["{"]
        keys_list = list(data.keys())
        keys_list.sort(key=lambda x: (str(x)))
        max_key_len = max(len(f'"{key}":') for key in keys_list)
        for i, key in enumerate(keys_list):
            value = data[key]
            value_json = json.dumps(value, ensure_ascii=False, separators=(',', ' '))
            comma = "," if i < len(keys_list) - 1 else ""
            key_padded = f'"{key}":'.ljust(max_key_len + 2)
            lines.append(f"  {key_padded} {value_json}{comma}")
        lines.append("}")
        return "\n".join(lines)        
        
class PhotosStatusWidget(QWidget):
    """Widget pro zobrazen√≠ fotek ze slo≈æky ƒçty≈ôl√≠stk≈Ø s mo≈ænost√≠ p≈ôi≈ôazov√°n√≠ stav≈Ø"""

    def __init__(self, parent=None):
        super().__init__(parent)
        self.setup_ui()

    def setup_ui(self):
        layout = QVBoxLayout(self)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(6)

        # Nadpis
        label = QLabel("üì∏ Seznam fotek:")
        label.setStyleSheet("font-weight: bold; font-size: 12px; color: #e6e6e6;")
        label.setSizePolicy(QSizePolicy.Preferred, QSizePolicy.Fixed)
        layout.addWidget(label)

        # Seznam fotek s multi-select
        self.list_widget = QListWidget()
        self.list_widget.setMinimumHeight(150)
        self.list_widget.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.list_widget.setSelectionMode(QListWidget.ExtendedSelection)

        # Kontextov√© menu
        self.list_widget.setContextMenuPolicy(Qt.CustomContextMenu)
        self.list_widget.customContextMenuRequested.connect(self.show_context_menu)
        
        self.list_widget.setStyleSheet("""
            QListWidget {
                background-color: #1a1a1a;
                color: #e6e6e6;
                border: 1px solid #555555;
                border-radius: 4px;
                font-family: monospace;
                font-size: 10px;
            }
            QListWidget::item {
                padding: 2px 6px;
                border-bottom: 1px solid #333333;
            }
            QListWidget::item:selected {
                background-color: #2a3b4f;
            }
        """)

        layout.addWidget(self.list_widget, stretch=1)

        # Info label
        self.info_label = QLabel("Naƒç√≠t√°n√≠...")
        self.info_label.setStyleSheet("font-size: 10px; color: #b0b0b0; font-style: italic;")
        self.info_label.setSizePolicy(QSizePolicy.Preferred, QSizePolicy.Fixed)
        self.info_label.setWordWrap(True)
        layout.addWidget(self.info_label)

    def show_context_menu(self, position):
        """Zobraz√≠ kontextov√© menu s dostupn√Ωmi stavy s hezk√Ωmi ikonkami"""
        selected_items = self.list_widget.selectedItems()
        if not selected_items:
            return
    
        # Filtruj pouze fotky (ne chybov√© zpr√°vy)
        photo_items = []
        for item in selected_items:
            # OPRAVA: Zkontroluj v≈°echny mo≈æn√© ikony fotek
            if item.text().startswith(("üñºÔ∏è", "‚úÇÔ∏è", "üì∑")):
                photo_items.append(item)
    
        if not photo_items:
            return
    
        # Z√≠skej dostupn√© stavy z JSON konfigurace
        available_states = self.get_available_states()
    
        if not available_states:
            # Pokud nejsou ≈æ√°dn√© stavy, nab√≠dni vytvo≈ôen√≠ nov√©ho
            menu = QMenu(self.list_widget)
            no_states_action = menu.addAction("‚ö†Ô∏è Nejsou definovan√© ≈æ√°dn√© stavy")
            no_states_action.setEnabled(False)
            menu.addSeparator()
            add_bezfotky_action = menu.addAction("‚ûï P≈ôidat BEZFOTKY stav")
            add_bezfotky_action.triggered.connect(lambda: self.assign_to_state(photo_items, "BEZFOTKY"))
            menu.exec(self.list_widget.mapToGlobal(position))
            return
    
        # Definice ikon a tooltip≈Ø pro ka≈æd√Ω stav
        state_config = {
            "BEZFOTKY": {
                "icon": "üì∑",
                "tooltip": "Oznaƒçit jako BEZFOTKY - fotka nebyla po≈ô√≠zena"
            },
            "DAROVANY": {
                "icon": "üéÅ",
                "tooltip": "Oznaƒçit jako DAROVANY - ƒçty≈ôl√≠stek byl darov√°n"
            },
            "ZTRACENY": {
                "icon": "‚ùå",
                "tooltip": "Oznaƒçit jako ZTRACENY - ƒçty≈ôl√≠stek se ztratil"
            },
            "BEZGPS": {  # NOV√â: P≈ôid√°n stav BEZGPS
                "icon": "üìç",
                "tooltip": "Oznaƒçit jako BEZGPS - fotka nem√° GPS sou≈ôadnice"
            }
        }
    
        menu = QMenu(self.list_widget)
        menu.setTitle(f"P≈ôi≈ôadit stav k {len(photo_items)} fotk√°m")
    
        # P≈ôidej akce pro ka≈æd√Ω dostupn√Ω stav s hezk√Ωmi ikonkami
        for state in sorted(available_states):
            if state in state_config:
                config = state_config[state]
                action_text = f"{config['icon']} {state}"
                action = menu.addAction(action_text)
                action.setToolTip(config['tooltip'])
            else:
                # Fallback pro nezn√°m√© stavy
                action = menu.addAction(f"üìã {state}")
                action.setToolTip(f"Oznaƒçit jako {state}")
    
            action.triggered.connect(lambda checked, s=state: self.assign_to_state(photo_items, s))
    
        menu.exec(self.list_widget.mapToGlobal(position))

    def get_available_states(self):
        """Z√≠sk√° seznam dostupn√Ωch stav≈Ø - kombinace p≈ôeddefinovan√Ωch stav≈Ø a stav≈Ø z JSON"""
        # P≈ôeddefinovan√© povolen√© stavy z k√≥du
        ALLOWED_STATES = {"BEZFOTKY", "DAROVANY", "ZTRACENY", "BEZGPS"}
        
        main_window = self.find_main_window()
        if not main_window:
            return ALLOWED_STATES
        
        try:
            config_text = main_window.status_config_text.toPlainText().strip()
            if not config_text:
                # Pokud nen√≠ JSON, vrac√≠me pouze povolen√© stavy
                return ALLOWED_STATES
            
            data = json.loads(config_text)
            if isinstance(data, dict):
                # Vrac√≠me sjednocen√≠ kl√≠ƒç≈Ø z JSON a povolen√Ωch stav≈Ø
                json_states = set(data.keys())
                # Filtrujeme pouze platn√© stavy z JSON
                valid_json_states = json_states.intersection(ALLOWED_STATES)
                return ALLOWED_STATES.union(valid_json_states)
            else:
                return ALLOWED_STATES
        except json.JSONDecodeError:
            # Pokud je JSON neplatn√Ω, vrac√≠me povolen√© stavy
            return ALLOWED_STATES

    # FILE: gui/pdf_generator_window.py
    # CLASS: PhotosStatusWidget
    # FUNCTION: assign_to_state
    # √öPRAVA: Po p≈ôi≈ôazen√≠ stavu zobraz mod√°ln√≠ z√°pis Nastaven√≠ pozn√°mek nejen pro "DAROVANY",
    #         ale i pro "BEZFOTKY". Jinak beze zmƒõn.
    
    def assign_to_state(self, photo_items, state_name):
        """P≈ôi≈ôad√≠ vybran√© fotky k zadan√©mu stavu; pro 'DAROVANY' a 'BEZFOTKY' n√°slednƒõ vy≈æ√°d√° a zap√≠≈°e pozn√°mku."""
        from PySide6.QtWidgets import QMessageBox, QInputDialog
        import json
    
        # Z√≠skej ƒç√≠sla fotek
        photo_numbers = []
        for item in photo_items:
            try:
                # Extrakce ƒç√≠sla z textu "üì∑ 12345" / "üñºÔ∏è 12345" / "‚úÇÔ∏è 12345"
                number = int(item.text().split()[-1])
                photo_numbers.append(number)
            except (ValueError, IndexError):
                continue
    
        if not photo_numbers:
            return
    
        main_window = self.find_main_window()
        if not main_window:
            QMessageBox.warning(self, "Chyba", "Nepoda≈ôilo se naj√≠t hlavn√≠ okno")
            return
    
        try:
            # P≈ôeveƒè ƒç√≠sla fotek na intervaly pro zobrazen√≠
            photo_intervals = self.merge_numbers_to_intervals(sorted(photo_numbers))
            photo_display = ", ".join(photo_intervals)
    
            # Potvrzovac√≠ dialog
            reply = QMessageBox.question(
                self,
                "Potvrzen√≠ p≈ôi≈ôazen√≠",
                f"P≈ôi≈ôadit stav '{state_name}' k {len(photo_numbers)} fotk√°m?\n\n"
                f"Fotky: {photo_display}",
                QMessageBox.Yes | QMessageBox.No
            )
            if reply != QMessageBox.Yes:
                return
    
            # === Z√çSKEJ A UPRAV JSON STAV≈Æ ===
            config_text = main_window.status_config_text.toPlainText().strip()
            if config_text:
                data = json.loads(config_text)
            else:
                data = {}
    
            # Z√≠skej existuj√≠c√≠ ƒç√≠sla pro dan√Ω stav
            existing_numbers = self.get_existing_numbers_for_state(data.get(state_name, []))
    
            # Slouƒç s nov√Ωmi ƒç√≠sly
            all_numbers = existing_numbers.union(set(photo_numbers))
    
            # Vytvo≈ô intervaly
            intervals = self.merge_numbers_to_intervals(sorted(list(all_numbers)))
            data[state_name] = intervals
    
            # Form√°tuj a aktualizuj JSON stav≈Ø
            formatted_json = self.format_json_compact_fixed(data)
            main_window.status_config_text.setPlainText(formatted_json)
    
            added_count = len(set(photo_numbers) - existing_numbers)
            main_window.update_log(f"üìã P≈ôi≈ôazen stav '{state_name}' k {len(photo_numbers)} fotk√°m")
    
            # === DOPLNƒöNO: pro 'DAROVANY' a 'BEZFOTKY' n√°slednƒõ nab√≠dni z√°pis Nastaven√≠ pozn√°mek ===
            if state_name in ("DAROVANY", "BEZFOTKY"):
                dialog_title = f"Zapsat pozn√°mku ({state_name})"
                note_text, ok = QInputDialog.getMultiLineText(
                    self,
                    dialog_title,
                    "Pozn√°mka pro vybran√© polo≈æky:",
                    ""
                )
                if ok:
                    note_text = (note_text or "").strip()
                    if note_text:
                        # Editor ‚Äûüìù JSON Nastaven√≠ pozn√°mek‚Äú v hlavn√≠m oknƒõ
                        notes_editor = getattr(main_window, "notes_text", None)
                        if notes_editor and hasattr(notes_editor, "toPlainText") and hasattr(notes_editor, "setPlainText"):
                            try:
                                raw_notes = notes_editor.toPlainText() or "{}"
                                notes_data = json.loads(raw_notes)
                                if not isinstance(notes_data, dict):
                                    raise ValueError("Ko≈ôen JSONu mus√≠ b√Ωt objekt ({}).")
                            except Exception:
                                # pokud neplatn√Ω JSON, nezapisuj pozn√°mky, ale zachovej p≈ôi≈ôazen√≠ stavu
                                notes_data = None
    
                            if isinstance(notes_data, dict):
                                for cid in photo_numbers:
                                    notes_data[str(int(cid))] = note_text
                                # Form√°tov√°n√≠: preferuj projektov√Ω formatter, jinak kompaktn√≠ fallback
                                try:
                                    formatted_notes = self.format_json_compact_fixed(notes_data)
                                except Exception:
                                    formatted_notes = json.dumps(notes_data, ensure_ascii=False, indent=2, sort_keys=True)
                                notes_editor.setPlainText(formatted_notes)
                                # p≈ô√≠padn√Ω refresh seznam≈Ø
                                try:
                                    main_window.update_missing_photos_list()
                                except Exception:
                                    pass
    
            # √öspƒõ≈°n√° zpr√°va (p≈Øvodn√≠ chov√°n√≠ zachov√°no)
            QMessageBox.information(
                self,
                "√öspƒõch",
                f"‚úÖ P≈ôi≈ôazen stav '{state_name}' k {len(photo_numbers)} fotk√°m\n"
                f"Fotky: {photo_display}\n"
                f"Novƒõ p≈ôid√°no: {added_count} fotek\n"
                f"V√Ωsledn√© intervaly: {', '.join(intervals)}"
            )
    
        except Exception as e:
            QMessageBox.critical(self, "Chyba", f"Nepoda≈ôilo se aktualizovat konfiguraci:\n{str(e)}")

    def get_existing_numbers_for_state(self, intervals_list):
        """Rozbal√≠ seznam interval≈Ø na mno≈æinu ƒç√≠sel"""
        numbers = set()
        for item in intervals_list:
            item_str = str(item).strip()
            if not item_str:
                continue
            
            if '-' in item_str:
                try:
                    start_str, end_str = item_str.split('-', 1)
                    start_num = int(start_str.strip())
                    end_num = int(end_str.strip())
                    if start_num > end_num:
                        start_num, end_num = end_num, start_num
                    numbers.update(range(start_num, end_num + 1))
                except ValueError:
                    continue
            else:
                try:
                    numbers.add(int(item_str))
                except ValueError:
                    continue
        
        return numbers

    def merge_numbers_to_intervals(self, numbers):
        """Spoj√≠ ƒç√≠sla do interval≈Ø (nap≈ô. [1,2,3,5] -> ["1-3", "5"])"""
        if not numbers:
            return []

        # Se≈ôaƒè a odstra≈à duplicity
        numbers = sorted(set(numbers))
        intervals = []
        start = numbers[0]
        end = numbers[0]

        for n in numbers[1:]:
            if n == end + 1:  # Navazuj√≠c√≠ ƒç√≠slo
                end = n
            else:  # Mezera v sekvenci
                if start == end:
                    intervals.append(str(start))
                else:
                    intervals.append(f"{start}-{end}")
                start = n
                end = n

        # Zpracov√°n√≠ posledn√≠ho intervalu
        if start == end:
            intervals.append(str(start))
        else:
            intervals.append(f"{start}-{end}")

        return intervals

    def format_json_compact_fixed(self, data):
        """Form√°tuje JSON v kompaktn√≠m stylu - ka≈æd√Ω stav na jeden ≈ô√°dek se zarovn√°n√≠m"""
        if not data:
            return "{}"

        lines = ["{"]
        keys_list = list(data.keys())
        
        # Se≈ôazen√≠ kl√≠ƒç≈Ø alfabeticky
        keys_list.sort()

        # Najdi nejdel≈°√≠ kl√≠ƒç pro zarovn√°n√≠
        max_key_len = max(len(f'"{key}":') for key in keys_list)

        for i, key in enumerate(keys_list):
            value = data[key]
            value_json = json.dumps(value, ensure_ascii=False, separators=(',', ' '))
            comma = "," if i < len(keys_list) - 1 else ""
            
            # Zarovn√°n√≠ kl√≠ƒç≈Ø pro lep≈°√≠ ƒçitelnost
            key_padded = f'"{key}":'.ljust(max_key_len + 2)
            lines.append(f"  {key_padded} {value_json}{comma}")

        lines.append("}")
        return "\n".join(lines)
    
    def get_photos_with_assigned_states(self):
        """Z√≠sk√° seznam fotek, kter√© u≈æ maj√≠ p≈ôi≈ôazen√Ω stav z JSON konfigurace"""
        # Najdi hlavn√≠ okno p≈ôes hierarchii parent widgets
        parent = self.parent()
        while parent:
            if hasattr(parent, 'status_config_text'):
                main_window = parent
                break
            parent = parent.parent()
        else:
            return set()
    
        try:
            config_text = main_window.status_config_text.toPlainText().strip()
            if not config_text:
                return set()
    
            data = json.loads(config_text)
            if not isinstance(data, dict):
                return set()
    
            photos_with_states = set()
            
            for state_name, number_list in data.items():
                if not isinstance(number_list, list):
                    continue
                    
                for item in number_list:
                    item_str = str(item).strip()
                    if not item_str:
                        continue
                        
                    if '-' in item_str:
                        try:
                            start_str, end_str = item_str.split('-', 1)
                            start_num = int(start_str.strip())
                            end_num = int(end_str.strip())
                            if start_num > end_num:
                                start_num, end_num = end_num, start_num
                            for num in range(start_num, end_num + 1):
                                photos_with_states.add(num)
                        except ValueError:
                            continue
                    else:
                        try:
                            num = int(item_str)
                            photos_with_states.add(num)
                        except ValueError:
                            continue
            
            return photos_with_states
    
        except json.JSONDecodeError:
            return set()
        except Exception:
            return set()

    def find_main_window(self):
        """Najde hlavn√≠ okno aplikace"""
        parent = self.parent()
        while parent:
            if hasattr(parent, 'status_config_text'):
                return parent
            parent = parent.parent()
        return None

    # Ve t≈ô√≠dƒõ PhotosStatusWidget
    def update_photos_list(self, folder_path, crop_status=None):
        """Aktualizuje seznam fotek bez p≈ôi≈ôazen√©ho stavu ze slo≈æky s indikac√≠ o≈ôezu."""
        self.list_widget.clear()
        if crop_status is None:
            crop_status = {}
    
        if not folder_path or not os.path.isdir(folder_path):
            self.list_widget.addItem("‚ùå Slo≈æka neexistuje nebo nen√≠ zad√°na")
            self.info_label.setText("Zkontrolujte cestu k fotk√°m ƒçty≈ôl√≠stk≈Ø")
            return
    
        try:
            files = os.listdir(folder_path)
            photo_extensions = {'.jpg', '.jpeg', '.png', '.heic', '.heif', '.tiff', '.tif', '.bmp'}
            photos_in_folder = set()
            invalid_files = []
            for filename in files:
                ext = os.path.splitext(filename)[1].lower()
                if ext in photo_extensions:
                    try:
                        number_part = filename.split('+')[0]
                        photo_number = int(number_part)
                        photos_in_folder.add(photo_number)
                    except (ValueError, IndexError):
                        invalid_files.append(filename)
            
            photos_with_states = self.get_photos_with_assigned_states()
            photos_without_state = photos_in_folder - photos_with_states
    
            if not photos_in_folder:
                self.list_widget.addItem("‚ÑπÔ∏è Ve slo≈æce nejsou ≈æ√°dn√© fotky ƒçty≈ôl√≠stk≈Ø")
                self.info_label.setText("Slo≈æka je pr√°zdn√° nebo neobsahuje platn√© soubory")
            elif not photos_without_state:
                self.list_widget.addItem("‚úÖ V≈°echny fotky maj√≠ p≈ôi≈ôazen√Ω stav")
                self.info_label.setText(f"Celkem: {len(photos_in_folder)} fotek - v≈°echny maj√≠ stav")
            else:
                # OPRAVA: P≈ôid√°n√≠ ikony podle stavu o≈ôezu
                for photo_num in sorted(photos_without_state):
                    is_cropped = crop_status.get(str(photo_num), False)
                    icon = "‚úÇÔ∏è" if is_cropped else "üñºÔ∏è"
                    item = QListWidgetItem(f"{icon} {photo_num}")
                    crop_tooltip_text = "O≈ôezan√°" if is_cropped else "Neupraven√°"
                    item.setToolTip(f"Fotka ƒç√≠slo {photo_num} ({crop_tooltip_text})\nNem√° p≈ôi≈ôazen√Ω stav.")
                    self.list_widget.addItem(item)
                self.info_label.setText(f"Bez stavu: {len(photos_without_state)} z {len(photos_in_folder)} fotek")
    
            if invalid_files:
                self.list_widget.addItem("")
                self.list_widget.addItem("‚ö†Ô∏è Neplatn√© n√°zvy soubor≈Ø:")
                for invalid_file in invalid_files[:5]:
                    self.list_widget.addItem(f" {invalid_file}")
                if len(invalid_files) > 5:
                    self.list_widget.addItem(f" ... a {len(invalid_files) - 5} dal≈°√≠ch")
        except Exception as e:
            self.list_widget.addItem(f"‚ùå Chyba p≈ôi ƒçten√≠ slo≈æky: {str(e)}")
            self.info_label.setText("Chyba p≈ôi anal√Ωze fotek")

from PySide6.QtCore import QObject, QThread, Signal

class _AnnotateWorker(QObject):
    progress = Signal(int, str, str)  # row, date_str ("" pokud nedostupn√©), path_str ("" pokud nedostupn√©)
    finished = Signal()

    def __init__(self, rows_info, source_root_str):
        super().__init__()
        self._rows_info = rows_info  # list[tuple[row:int, num:int]]
        self._source_root_str = source_root_str

    def _get_taken_datetime(self, path):
        """
        Vr√°t√≠ datetime pro anotaci polo≈æek.
        1) Pokus o EXIF DateTimeOriginal (pokud dostupn√Ω).
        2) Jinak DATUM VYTVO≈òEN√ç SOUBORU (birthtime / getctime).
        3) Posledn√≠ fallback: mtime.
    
        Pozn.: Na macOS (a nƒõkter√Ωch BSD) je k dispozici st_birthtime.
              Na Windows os.path.getctime vrac√≠ creation time.
              Na Linuxu creation time typicky nen√≠, proto pad√°me na mtime.
        """
        from datetime import datetime
        import os
    
        if path is None:
            return None
    
        # 1) EXIF (pokud k dispozici)
        try:
            try:
                import pillow_heif  # type: ignore
                try:
                    pillow_heif.register_heif_opener()
                except Exception:
                    pass
            except Exception:
                pass
    
            from PIL import Image, ExifTags  # type: ignore
            exif_tag_map = {v: k for k, v in ExifTags.TAGS.items()}
            dt_tag = exif_tag_map.get("DateTimeOriginal")
            with Image.open(str(path)) as im:
                exif = im.getexif()
                if exif and dt_tag in exif:
                    raw = exif.get(dt_tag)
                    try:
                        return datetime.strptime(str(raw), "%Y:%m:%d %H:%M:%S")
                    except Exception:
                        for fmt in ("%Y-%m-%d %H:%M:%S", "%Y/%m/%d %H:%M:%S"):
                            try:
                                return datetime.strptime(str(raw), fmt)
                            except Exception:
                                continue
        except Exception:
            pass
    
        # 2) DATUM VYTVO≈òEN√ç SOUBORU
        try:
            st = os.stat(str(path))
            # macOS/FreeBSD: st_birthtime (skuteƒçn√© creation time)
            if hasattr(st, "st_birthtime") and st.st_birthtime:
                return datetime.fromtimestamp(st.st_birthtime)
            # Windows: getctime = creation time
            return datetime.fromtimestamp(os.path.getctime(str(path)))
        except Exception:
            pass
    
        # 3) Fallback: mtime
        try:
            return datetime.fromtimestamp(os.path.getmtime(str(path)))
        except Exception:
            return None

    def run(self):
        import os
        from pathlib import Path
    
        source_root = Path(self._source_root_str) if self._source_root_str else None
        id_to_path = {}
    
        # jednor√°zovƒõ projdi ko≈ôenovou slo≈æku (nererekurzivnƒõ) pro rychl√© mapov√°n√≠
        if source_root and source_root.is_dir():
            photo_ext = {'.jpg', '.jpeg', '.png', '.heic', '.heif', '.tiff', '.tif', '.bmp'}
            try:
                for entry in os.scandir(source_root):
                    if entry.is_file():
                        ext = os.path.splitext(entry.name)[1].lower()
                        if ext in photo_ext:
                            head = entry.name.split('+')[0]
                            if head.isdigit():
                                id_to_path[int(head)] = Path(entry.path)
            except Exception:
                pass
    
        # zpracuj jednotliv√© ≈ô√°dky
        for row, num in self._rows_info:
            path = id_to_path.get(num)
            if path is None and source_root and source_root.is_dir():
                # opatrn√Ω fallback: rekurzivn√≠ dohled√°n√≠ pouze pro chybƒõj√≠c√≠ kusy
                try:
                    for candidate in source_root.rglob(f"{num}*"):
                        if candidate.is_file():
                            path = candidate
                            break
                except Exception:
                    path = None
    
            dt = self._get_taken_datetime(path) if path else None
            # >>> ZMƒöNA: pln√Ω ƒças ‚Äì dny, hodiny, minuty, sekundy; bez mezery (podtr≈æ√≠tko), a≈• je to jeden token
            date_str = dt.strftime("%Y-%m-%d_%H:%M:%S") if dt else ""
            self.progress.emit(row, date_str, str(path) if path else "")
    
        self.finished.emit()

class MissingPhotosWidget(QWidget):
    """Widget pro zobrazen√≠ nep≈ôi≈ôazen√Ωch fotek ƒçty≈ôl√≠stk≈Ø s multi-select a kontextov√Ωm menu"""

    # Ve t≈ô√≠dƒõ MissingPhotosWidget
    def __init__(self, parent=None):
        super().__init__(parent)
        # ZMƒöNA: Budeme si pamatovat ƒç√≠slo fotky, ne objekt polo≈æky
        self.last_selected_photo_num = None 
        self.setup_ui()

    def setup_ui(self):
        layout = QVBoxLayout(self)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(6)
    
        # Nadpis - jen pot≈ôebn√° v√Ω≈°ka
        label = QLabel("üì∏ Nep≈ôi≈ôazen√© fotky ƒçty≈ôl√≠stk≈Ø:")
        label.setStyleSheet("font-weight: bold; font-size: 12px; color: #e6e6e6;")
        label.setSizePolicy(QSizePolicy.Preferred, QSizePolicy.Fixed)
        layout.addWidget(label)
    
        # Seznam - zabere hlavn√≠ ƒç√°st prostoru + multi-select
        self.list_widget = QListWidget()
        self.list_widget.setMinimumHeight(150)
        self.list_widget.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        
        # NOV√â: Povolit multi-select
        self.list_widget.setSelectionMode(QListWidget.ExtendedSelection)
        # NOV√â: Kontextov√© menu
        self.list_widget.setContextMenuPolicy(Qt.CustomContextMenu)
        self.list_widget.customContextMenuRequested.connect(self.show_context_menu)
        
        self.list_widget.setStyleSheet("""
            QListWidget {
                background-color: #1a1a1a;
                color: #e6e6e6;
                border: 1px solid #555555;
                border-radius: 4px;
                font-family: monospace;
                font-size: 10px;
            }
            QListWidget::item {
                padding: 2px 6px;
                border-bottom: 1px solid #333333;
            }
            QListWidget::item:selected {
                background-color: #2a3b4f;
            }
        """)
        
        layout.addWidget(self.list_widget, stretch=1)
    
        # Info label - jen pot≈ôebn√° v√Ω≈°ka + NOVƒö: povolit HTML
        self.info_label = QLabel("Naƒç√≠t√°n√≠...")
        self.info_label.setStyleSheet("font-size: 10px; color: #b0b0b0; font-style: italic;")
        self.info_label.setSizePolicy(QSizePolicy.Preferred, QSizePolicy.Fixed)
        self.info_label.setWordWrap(True)
        
        self.list_widget.keyPressEvent = self.list_key_press_event
        
        # NOV√â: Povolit HTML form√°tov√°n√≠ pro ƒçerven√Ω text
        self.info_label.setTextFormat(Qt.RichText)
        layout.addWidget(self.info_label)
        
    def _get_taken_datetime(self, path):
        """
        Vr√°t√≠ datetime pro anotaci polo≈æek.
        1) Pokus o EXIF DateTimeOriginal (pokud dostupn√Ω).
        2) Jinak DATUM VYTVO≈òEN√ç SOUBORU (birthtime / getctime).
        3) Posledn√≠ fallback: mtime.
    
        Pozn.: Na macOS (a nƒõkter√Ωch BSD) je k dispozici st_birthtime.
              Na Windows os.path.getctime vrac√≠ creation time.
              Na Linuxu creation time typicky nen√≠, proto pad√°me na mtime.
        """
        from datetime import datetime
        import os
    
        if path is None:
            return None
    
        # 1) EXIF (pokud k dispozici)
        try:
            try:
                import pillow_heif  # type: ignore
                try:
                    pillow_heif.register_heif_opener()
                except Exception:
                    pass
            except Exception:
                pass
    
            from PIL import Image, ExifTags  # type: ignore
            exif_tag_map = {v: k for k, v in ExifTags.TAGS.items()}
            dt_tag = exif_tag_map.get("DateTimeOriginal")
            with Image.open(str(path)) as im:
                exif = im.getexif()
                if exif and dt_tag in exif:
                    raw = exif.get(dt_tag)
                    try:
                        return datetime.strptime(str(raw), "%Y:%m:%d %H:%M:%S")
                    except Exception:
                        for fmt in ("%Y-%m-%d %H:%M:%S", "%Y/%m/%d %H:%M:%S"):
                            try:
                                return datetime.strptime(str(raw), fmt)
                            except Exception:
                                continue
        except Exception:
            pass
    
        # 2) DATUM VYTVO≈òEN√ç SOUBORU
        try:
            st = os.stat(str(path))
            # macOS/FreeBSD: st_birthtime (skuteƒçn√© creation time)
            if hasattr(st, "st_birthtime") and st.st_birthtime:
                return datetime.fromtimestamp(st.st_birthtime)
            # Windows: getctime = creation time
            return datetime.fromtimestamp(os.path.getctime(str(path)))
        except Exception:
            pass
    
        # 3) Fallback: mtime
        try:
            return datetime.fromtimestamp(os.path.getmtime(str(path)))
        except Exception:
            return None
        
    def annotate_photo_items_with_taken_date(self):
        """
        Spust√≠ neblokuj√≠c√≠ anotaci polo≈æek o mƒõs√≠c/datum po≈ô√≠zen√≠ v QThread.
        Posledn√≠ token v textu z≈Øst√°v√° ƒç√≠slo fotky (kompatibiln√≠ s existuj√≠c√≠ logikou).
        """
        from pathlib import Path
    
        main_window = getattr(self, "find_main_window", None)
        if callable(main_window):
            mw = self.find_main_window()
        else:
            mw = self.window()
    
        source_root = ""
        if mw is not None and hasattr(mw, "edit_clover_path"):
            source_root = (mw.edit_clover_path.text() or "").strip()
    
        # p≈ôiprav seznam (row, num) pro polo≈æky, kter√© chceme anotovat
        rows_info = []
        for i in range(self.list_widget.count()):
            item = self.list_widget.item(i)
            if not item:
                continue
            text = (item.text() or "").strip()
            # zaj√≠maj√≠ n√°s pouze fotky (üñºÔ∏è / ‚úÇÔ∏è)
            if not (text.startswith("üñºÔ∏è") or text.startswith("‚úÇÔ∏è")):
                continue
            parts = text.split()
            if not parts:
                continue
            # pokud u≈æ obsahuje [YYYY-MM], p≈ôeskoƒç (abychom zbyteƒçnƒõ neanotovali znova)
            if len(parts) >= 3 and parts[1].startswith('[') and parts[1].endswith(']'):
                continue
            # ƒç√≠slo fotky je posledn√≠ token
            num_str = parts[-1]
            if not num_str.isdigit():
                continue
            rows_info.append((i, int(num_str)))
    
        if not rows_info:
            return
    
        # spust√≠me worker v QThread
        self._annot_thread = QThread(self)
        self._annot_worker = _AnnotateWorker(rows_info, source_root)
        self._annot_worker.moveToThread(self._annot_thread)
        self._annot_thread.started.connect(self._annot_worker.run)
        self._annot_worker.progress.connect(self._on_item_annotation_progress)
        self._annot_worker.finished.connect(self._annot_thread.quit)
        self._annot_worker.finished.connect(self._annot_worker.deleteLater)
        self._annot_thread.finished.connect(self._annot_thread.deleteLater)
        self._annot_thread.start()
        
    def _on_item_annotation_progress(self, row, date_str, path_str):
        """
        Pr≈Øbƒõ≈ænƒõ aktualizuje polo≈æku v seznamu:
        - vlo≈æ√≠ '[YYYY-MM-DD_HH:MM:SS]' P≈òED ƒç√≠slo fotky (posledn√≠ token z≈Øst√°v√° ƒç√≠slo),
        - ulo≈æ√≠ cestu do Qt.UserRole pro dal≈°√≠ akce.
        """
        from PySide6.QtCore import Qt
    
        item = self.list_widget.item(row)
        if item is None:
            return
    
        text = (item.text() or "").strip()
        parts = text.split()
        if not parts:
            return
    
        # posledn√≠ token mus√≠ z≈Østat ƒç√≠slo fotky
        num_str = parts[-1]
        if not num_str.isdigit():
            return
    
        icon = parts[0] if parts else "üñºÔ∏è"
    
        # Pokud u≈æ polo≈æka m√° jedntokenovou anotaci v hranat√Ωch z√°vork√°ch (bez mezer uvnit≈ô),
        # p≈ôepi≈° ji; jinak vlo≈æ novou. (Pou≈æ√≠v√°me '_' m√≠sto mezery, tak≈æe je to po≈ô√°d jeden token.)
        if len(parts) >= 3 and parts[1].startswith('[') and parts[1].endswith(']'):
            if date_str:
                parts[1] = f'[{date_str}]'
            new_text = " ".join(parts)
        else:
            if date_str:
                new_text = f"{icon} [{date_str}] {num_str}"
            else:
                new_text = text  # bez zmƒõny, kdy≈æ datum nem√°me
    
        item.setText(new_text)
    
        if path_str:
            item.setData(Qt.UserRole, path_str)
    
    def read_polygon_from_metadata(self, image_path, main_window):
        """
        Robustnƒõ naƒçte a parsuje data polygonu z metadat PNG obr√°zku.
        Tato verze je navr≈æena tak, aby byla kompatibiln√≠ se zp≈Øsobem,
        jak√Ωm editor v 'image_viewer.py' ukl√°d√° data do iTXt chunk≈Ø.
        """
        from PIL import Image
        import json
        from pathlib import Path
    
        try:
            with Image.open(image_path) as img:
                # Zkontrolujeme, zda m√° obr√°zek 'text' atribut, kde Pillow ukl√°d√°
                # iTXt/tEXt/zTXt chunky.
                if hasattr(img, 'text') and isinstance(img.text, dict):
                    # Projdeme v≈°echny textov√© chunky
                    for key, value in img.text.items():
                        # Hled√°me n√°≈° specifick√Ω kl√≠ƒç
                        if key == 'AOI_POLYGON':
                            if main_window:
                                main_window.update_log(f"  ‚úîÔ∏è Nalezen polygon v .text chunk pro: {Path(image_path).name}")
                            
                            # Hodnota by mƒõla b√Ωt JSON string
                            if value and isinstance(value, str):
                                polygon_data = json.loads(value)
                                # Zkontrolujeme, zda JSON obsahuje kl√≠ƒç 'points'
                                if isinstance(polygon_data, dict) and 'points' in polygon_data:
                                    points = polygon_data['points']
                                    # Ujist√≠me se, ≈æe body tvo≈ô√≠ validn√≠ polygon
                                    if isinstance(points, list) and len(points) >= 3:
                                        return [{'points': points}]
                
                # Z√°lo≈æn√≠ kontrola pro standardn√≠ .info slovn√≠k, pro jistotu
                if 'AOI_POLYGON' in img.info:
                    polygon_json_str = img.info['AOI_POLYGON']
                    if main_window:
                        main_window.update_log(f"  ‚úîÔ∏è Nalezen polygon v .info slovn√≠ku pro: {Path(image_path).name}")
    
                    if polygon_json_str and isinstance(polygon_json_str, str):
                        polygon_data = json.loads(polygon_json_str)
                        if isinstance(polygon_data, dict) and 'points' in polygon_data:
                            points = polygon_data['points']
                            if isinstance(points, list) and len(points) >= 3:
                                return [{'points': points}]
    
        except Exception as e:
            if main_window:
                main_window.update_log(f"  ‚ö†Ô∏è Varov√°n√≠ p≈ôi ƒçten√≠ polygonu pro {Path(image_path).name}: {e}")
        
        # Pokud se nic nepoda≈ôilo, vr√°t√≠me None
        return None


    def _piexif_dms_to_degrees(self, dms_tuple):
        """P≈ôevede GPS sou≈ôadnice z form√°tu piexif (tuple racion√°ln√≠ch ƒç√≠sel) na desetinn√© stupnƒõ."""
        try:
            d = float(dms_tuple[0][0]) / float(dms_tuple[0][1])
            m = float(dms_tuple[1][0]) / float(dms_tuple[1][1])
            s = float(dms_tuple[2][0]) / float(dms_tuple[2][1])
            return d + (m / 60.0) + (s / 3600.0)
        except:
            return 0.0
        
    def calculate_distance_to_polygons(self, photo_coords, polygons):
        """
        Vypoƒç√≠t√° vzd√°lenosti k v√≠ce polygon≈Øm a vr√°t√≠ nejlep≈°√≠ v√Ωsledek.
        NOV√â: Preferuje z√°porn√© vzd√°lenosti (uvnit≈ô polygon≈Ø) p≈ôed kladn√Ωmi.
        """
        if not polygons:
            return float('inf')
    
        best_distance = float('inf')
        
        for polygon_data in polygons:
            polygon_points = polygon_data.get('points', [])
            if not polygon_points:
                continue
                
            distance = self.calculate_distance_to_polygon(photo_coords, polygon_points)
            
            # Preferujeme z√°porn√© vzd√°lenosti (uvnit≈ô polygonu)
            if distance < 0:  # Bod je uvnit≈ô polygonu
                if best_distance >= 0:  # Dosud jsme na≈°li jen body mimo polygony
                    best_distance = distance  # Preferujeme bod uvnit≈ô
                else:  # Oba body jsou uvnit≈ô polygon≈Ø
                    best_distance = max(best_distance, distance)  # M√©nƒõ z√°porn√° = bl√≠≈æ ke st≈ôedu
            elif best_distance >= 0:  # Oba body jsou mimo polygony
                best_distance = min(best_distance, distance)  # Men≈°√≠ kladn√° vzd√°lenost
            # Pokud best_distance < 0 a distance >= 0, nech√°v√°me best_distance (preferujeme uvnit≈ô)
    
        return best_distance

        
    def get_photos_with_states(self):
        """Z√≠sk√° seznam fotek, kter√© u≈æ maj√≠ p≈ôi≈ôazen√Ω nƒõjak√Ω stav"""
        main_window = self.find_main_window()
        if not main_window or not hasattr(main_window, 'get_photo_to_state_mapping'):
            return set()
            
        photo_to_state = main_window.get_photo_to_state_mapping()
        return set(photo_to_state.keys())

    # Nahraƒète metodu list_key_press_event ve t≈ô√≠dƒõ MissingPhotosWidget
    def list_key_press_event(self, event):
        """Handler pro stisk kl√°vesy v seznamu fotek."""
        if event.key() == Qt.Key_Space:
            current_item = self.list_widget.currentItem()
            if current_item:
                try:
                    # Ulo≈æ√≠me si ƒç√≠slo fotky, ne samotn√Ω item
                    self.last_selected_photo_num = int(current_item.text().split()[-1])
                except (ValueError, IndexError):
                    self.last_selected_photo_num = None
                
                self.show_photo_preview()
            event.accept()
        else:
            # Zavol√°n√≠ p≈Øvodn√≠ho handleru pro ostatn√≠ kl√°vesy
            QListWidget.keyPressEvent(self.list_widget, event)

    # Ve t≈ô√≠dƒõ MissingPhotosWidget, nahraƒète metodu show_photo_preview()
    
    def show_photo_preview(self):
        """Zobraz√≠ n√°hled, o≈ô√≠zne fotku a po zav≈ôen√≠ spolehlivƒõ obnov√≠ v√Ωbƒõr a pozici v seznamu."""
        selected_items = self.list_widget.selectedItems()
        if not selected_items:
            return
    
        main_window = self.find_main_window()
        if not main_window:
            QMessageBox.warning(self, "Chyba", "Nepoda≈ôilo se naj√≠t hlavn√≠ okno aplikace.")
            return
    
        clover_path = main_window.edit_clover_path.text().strip()
        if not clover_path or not os.path.isdir(clover_path):
            QMessageBox.warning(self, "Chyba", "Cesta ke slo≈æce s fotkami nen√≠ nastavena.")
            return
    
        # Sestaven√≠ se≈ôazen√©ho seznamu platn√Ωch fotek pro navigaci v dialogu
        valid_photos = []
        photo_extensions = {'.jpg', '.jpeg', '.png', '.heic', '.heif', '.tiff', '.tif', '.bmp'}
        try:
            files_in_dir = os.listdir(clover_path)
            photo_files_map = {int(f.split('+')[0]): os.path.join(clover_path, f)
                              for f in files_in_dir
                              if f.split('+')[0].isdigit() and os.path.splitext(f)[1].lower() in photo_extensions}
        except (OSError, ValueError):
            photo_files_map = {}
    
        # Projdeme polo≈æky v list widgetu a vytvo≈ô√≠me se≈ôazen√Ω seznam cest
        for i in range(self.list_widget.count()):
            item = self.list_widget.item(i)
            try:
                if item.text().startswith(("üñºÔ∏è", "‚úÇÔ∏è")):
                    photo_num = int(item.text().split()[-1])
                    if photo_num in photo_files_map:
                        valid_photos.append((photo_num, photo_files_map[photo_num]))
            except (ValueError, IndexError):
                continue
    
        if not valid_photos:
            QMessageBox.information(self, "N√°hled nenalezen", "Nebyly nalezeny ≈æ√°dn√© platn√© soubory pro zobrazen√≠.")
            return
    
        # Se≈ôad√≠me cesty podle ƒç√≠sla fotky
        ordered_photos = sorted(valid_photos, key=lambda p: p[0])
        ordered_paths = [photo[1] for photo in ordered_photos]
        ordered_numbers = [photo[0] for photo in ordered_photos]
    
        start_index = 0
        try:
            current_photo_number = int(selected_items[0].text().split()[-1])
            if current_photo_number in ordered_numbers:
                start_index = ordered_numbers.index(current_photo_number)
        except (ValueError, IndexError):
            pass
    
        # Ulo≈æ√≠me si ƒç√≠slo aktu√°lnƒõ vybran√© fotky
        self.last_selected_photo_num = ordered_numbers[start_index] if ordered_numbers else None
    
        # =================================================================
        # --- ZAƒå√ÅTEK ≈ò√çZEN√â SEKCE ---
        # =================================================================
        main_window.disable_photo_list_updates()
    
        dialog = ImagePreviewDialog(ordered_paths, start_index, self, crop_status_dict=main_window.crop_status)
        dialog.exec()
    
        # --- Po zav≈ôen√≠ dialogu ---
        self.list_widget.setFocus()
    
        # 1. Urƒç√≠me, kter√© ƒç√≠slo fotky se m√° po obnoven√≠ vybrat (posledn√≠ zobrazen√° v dialogu)
        last_viewed_index = dialog.current_index
        if 0 <= last_viewed_index < len(ordered_numbers):
            photo_num_to_restore = ordered_numbers[last_viewed_index]
        else:
            photo_num_to_restore = self.last_selected_photo_num
    
        # 2. Manu√°lnƒõ spust√≠me aktualizaci seznamu, aby se projevily zmƒõny (ikona o≈ôezu)
        main_window.update_missing_photos_list()
        main_window.update_status_photos_list() # Pro jistotu i druh√Ω seznam
        
        # 3. PO AKTUALIZACI najdeme polo≈æku v novƒõ vytvo≈ôen√©m seznamu a vybereme ji
        if photo_num_to_restore is not None:
            photo_found_and_selected = False
            for i in range(self.list_widget.count()):
                item = self.list_widget.item(i)
                try:
                    if item.text().endswith(f" {photo_num_to_restore}"):
                        self.list_widget.setCurrentItem(item)
                        self.list_widget.scrollToItem(item, QAbstractItemView.ScrollHint.PositionAtCenter)
                        photo_found_and_selected = True
                        # LOG A≈Ω PO √öSPƒö≈†N√âM OZNAƒåEN√ç
                        main_window.update_log(f"üéØ Oznaƒçena fotka {photo_num_to_restore} v seznamu")
                        break
                except (ValueError, IndexError):
                    continue
            
            if not photo_found_and_selected:
                main_window.update_log(f"‚ö†Ô∏è Fotka {photo_num_to_restore} nebyla nalezena v aktualizovan√©m seznamu")
        
        # 4. Znovu povol√≠me automatick√© aktualizace
        main_window.enable_photo_list_updates(photo_num_to_restore)
    
        # =================================================================
        # --- KONEC ≈ò√çZEN√â SEKCE ---
        # =================================================================
    
    # P≈ôidejte tuto novou pomocnou metodu do t≈ô√≠dy MissingPhotosWidget:
    
    def _select_photo_in_list(self, photo_number):
        """Najde a oznaƒç√≠ fotku s dan√Ωm ƒç√≠slem v seznamu."""
        for i in range(self.list_widget.count()):
            item = self.list_widget.item(i)
            if item is None:
                continue
            
            try:
                # Extrakce ƒç√≠sla z textu polo≈æky (nap≈ô. "üñºÔ∏è 12345" nebo "‚úÇÔ∏è 12345")
                text_parts = item.text().split()
                if len(text_parts) >= 2:
                    item_photo_num = int(text_parts[-1])  # Posledn√≠ ƒç√°st by mƒõlo b√Ωt ƒç√≠slo
                    if item_photo_num == photo_number:
                        # Oznaƒçen√≠ a scroll k polo≈æce
                        self.list_widget.setCurrentItem(item)
                        self.list_widget.scrollToItem(item, QAbstractItemView.ScrollHint.PositionAtCenter)
                        
                        # Debug log
                        main_window = self.find_main_window()
                        if main_window:
                            main_window.update_log(f"üéØ Oznaƒçena fotka {photo_number} v seznamu")
                        return True
            except (ValueError, IndexError):
                continue
        
        # Pokud se nepoda≈ôilo naj√≠t fotku
        main_window = self.find_main_window()
        if main_window:
            main_window.update_log(f"‚ö†Ô∏è Nepoda≈ôilo se naj√≠t fotku {photo_number} v seznamu pro oznaƒçen√≠")
        return False

    def update_list_selection(self, photo_number):
        """Najde polo≈æku podle ƒç√≠sla fotky a vybere ji v seznamu."""
        for i in range(self.list_widget.count()):
            item = self.list_widget.item(i)
            if item.text().endswith(str(photo_number)):
                self.list_widget.setCurrentRow(i) 
                return

    def show_context_menu(self, position):
        """Zobraz√≠ kontextov√© menu pro vybran√© fotky v seznamu 'Anal√Ωza fotek'."""
        selected_items = self.list_widget.selectedItems()
        if not selected_items:
            return
    
        # Pouze polo≈æky, kter√© skuteƒçnƒõ reprezentuj√≠ fotky (ikonky üñºÔ∏è / ‚úÇÔ∏è)
        photo_items = [item for item in selected_items if item.text().startswith(("üñºÔ∏è", "‚úÇÔ∏è"))]
        if not photo_items:
            return
    
        menu = QMenu(self.list_widget)
    
        # P≈ÆVODN√ç AKCE (zachov√°no)
        assign_action = menu.addAction("üìç P≈ôi≈ôadit lokaci")
        assign_action.triggered.connect(lambda: self.assign_to_location(photo_items))
    
        recommend_action = menu.addAction("üéØ Doporuƒçit bl√≠zk√© lokace")
        recommend_action.triggered.connect(lambda: self.recommend_nearby_locations(photo_items))
    
        menu.addSeparator()
    
        mark_cropped_action = menu.addAction("‚úÇÔ∏è Oznaƒçit jako o≈ôezan√©")
        mark_cropped_action.triggered.connect(lambda: self.mark_photos_as_cropped(photo_items))
    
        move_action = menu.addAction("üìÅ P≈ôesunout do ‚ÄûO≈ôezy‚Äú")
        move_action.triggered.connect(lambda: self.move_photos_to_orezy(photo_items))
    
        # NOV√Å AKCE (po≈æadavek): Kop√≠rovat do zvolen√© slo≈æky (p≈ôepis existuj√≠c√≠ch soubor≈Ø)
        copy_action = menu.addAction("üìã Kop√≠rovat do slo≈æky‚Ä¶")
        copy_action.triggered.connect(lambda: self.copy_photos_to_folder(photo_items))
    
        menu.exec(self.list_widget.mapToGlobal(position))
        
    def copy_photos_to_folder(self, photo_items):
        """
        Zkop√≠ruje vybran√© fotky do u≈æivatelem zvolen√© slo≈æky.
        Pokud c√≠lov√Ω soubor existuje, je P≈òEPS√ÅN.
        """
        from pathlib import Path
        import shutil
        import re
        from PySide6.QtCore import Qt, QDir
        from PySide6.QtWidgets import QFileDialog, QMessageBox
    
        # Najdi okno s polem pro cestu ke slo≈æce s fotkami ƒçty≈ôl√≠stk≈Ø
        win = getattr(self, "get_pdf_window_parent", None)
        if callable(win):
            win = self.get_pdf_window_parent()
        else:
            win = self.window()
    
        if win is None or not hasattr(win, "edit_clover_path"):
            QMessageBox.warning(self, "Kop√≠rovat fotky", "Nepoda≈ôilo se naj√≠t zdrojovou slo≈æku s fotkami (edit_clover_path).")
            return
    
        source_root = Path((win.edit_clover_path.text() or "").strip())
        if not source_root.is_dir():
            QMessageBox.warning(self, "Kop√≠rovat fotky", f"Slo≈æka s fotkami neexistuje:\n{source_root}")
            return
    
        # --- DEFAULTN√ç STARTOVAC√ç SLO≈ΩKA PRO DIALOG ---
        DEFAULT_COPY_DIR = "/Users/safronus/Library/Mobile Docum...e~CloudDocs/ƒåty≈ôl√≠stky/Generov√°n√≠ PDF/Fotky pro web/Origin√°ly/"
        if hasattr(self, "_last_copy_dir") and self._last_copy_dir:
            start_dir = str(self._last_copy_dir)
        elif QDir(DEFAULT_COPY_DIR).exists():
            start_dir = DEFAULT_COPY_DIR
        else:
            start_dir = QDir.homePath()
    
        # Vyber c√≠lovou slo≈æku
        target_dir_str = QFileDialog.getExistingDirectory(self, "Vyber c√≠lovou slo≈æku pro kop√≠rov√°n√≠", start_dir)
        if not target_dir_str:
            return
        target_dir = Path(target_dir_str)
        self._last_copy_dir = str(target_dir)
    
        # Pomocn√° funkce: pokusit se urƒçit zdrojov√Ω soubor z polo≈æky seznamu
        def _extract_path(item) -> Path | None:
            # 1) Preferuj cestu ulo≈æenou v u≈æivatelsk√Ωch rol√≠ch (pokud u≈æ je zn√°ma/ulo≈æena)
            for role in (Qt.UserRole, Qt.UserRole + 1, Qt.UserRole + 2):
                try:
                    p = item.data(role)
                    if p:
                        p = Path(str(p))
                        if p.exists():
                            return p
                except Exception:
                    pass
    
            # 2) ToolTip m≈Ø≈æe obsahovat kompletn√≠ cestu
            try:
                tip = item.toolTip()
                if isinstance(tip, str) and tip:
                    p = Path(tip)
                    if p.exists():
                        return p
            except Exception:
                pass
    
            # 3) fallback: odvozen√≠ ze zdrojov√© slo≈æky a ƒç√≠sla v textu
            if not source_root.exists():
                return None
    
            # 3a) pokus: ƒç√≠seln√© ID na konci textu polo≈æky
            import re as _re
            text = item.text().strip()
            m = _re.search(r'(\d+)\s*$', text)
            cid = m.group(1) if m else None
            if not cid:
                return None
    
            # Nejprve bez rekurze
            try:
                for child in source_root.iterdir():
                    if child.is_file() and child.name.startswith(cid):
                        return child
            except Exception:
                pass
    
            # Rekurzivn√≠ fallback
            try:
                for child in source_root.rglob(f"{cid}*"):
                    if child.is_file():
                        return child
            except Exception:
                pass
    
            return None
    
        copied, failed = 0, 0
        failed_list = []
    
        for it in photo_items:
            src = _extract_path(it)
            if not src or not src.exists():
                failed += 1
                failed_list.append(it.text())
                continue
    
            dst = target_dir / src.name
            try:
                # P≈òEPIS EXISTUJ√çC√çHO SOUBORU
                shutil.copy2(src, dst)
    
                # === NOVƒö: Defaultn√≠ p≈ôejmenov√°n√≠ po kop√≠rov√°n√≠ (stejn√Ω styl jako ve web_photos_window.py) ===
                # Pravidlo: <id_bez_nul>++++NE+.HEIC ; kolize -> _2, _3, ...
                id_str = None
                m = re.match(r'^(\d+)[_+]', src.name)      # preferovan√Ω default: ƒç√≠slo na zaƒç√°tku p≈ôed '_' nebo '+'
                if m:
                    id_str = m.group(1)
                else:
                    m2 = re.match(r'^(\d+)', src.stem)     # fallback: ƒç√≠slo na zaƒç√°tku bez ohledu na oddƒõlovaƒç
                    if m2:
                        id_str = m2.group(1)
    
                if id_str:
                    try:
                        id_clean = str(int(id_str))        # odstran√≠ p≈ô√≠padn√© poƒç√°teƒçn√≠ nuly
                        base = f"{id_clean}++++NE+"
                        target_renamed = target_dir / (base + ".HEIC")
    
                        if target_renamed.exists() and target_renamed != dst:
                            i_cnt = 1
                            found = None
                            while i_cnt <= 999:
                                cand = target_dir / f"{base}_{i_cnt}.HEIC"
                                if not cand.exists():
                                    found = cand
                                    break
                                i_cnt += 1
                            if found is not None:
                                target_renamed = found
    
                        if target_renamed != dst:
                            try:
                                dst.rename(target_renamed)
                            except Exception:
                                pass
                    except Exception:
                        pass
    
                copied += 1
            except Exception as e:
                failed += 1
                failed_list.append(f"{it.text()} ({e})")
    
        # Shrnut√≠ operace
        if failed == 0:
            QMessageBox.information(self, "Kop√≠rovat fotky", f"Hotovo. Zkop√≠rov√°no: {copied} soubor≈Ø.")
        else:
            detail = "\n".join(failed_list[:10])
            if failed > 10:
                detail += f"\n‚Ä¶ a dal≈°√≠ch {failed - 10}"
            QMessageBox.warning(self, "Kop√≠rovat fotky",
                                f"Zkop√≠rov√°no: {copied}\nNepoda≈ôilo se: {failed}\n\n{detail}")
            
    # FILE: gui/pdf_generator_window.py
    # CLASS: PdfGeneratorWindow
    def remove_from_locations_by_ids(self, ids: list[str]) -> None:
        """
        Odstran√≠ dan√° ƒç√≠sla n√°lez≈Ø z JSONu ‚ÄûKonfigurace lokac√≠‚Äú (vƒçetnƒõ interval≈Ø) a sma≈æe pr√°zdn√© lokace.
        Pou≈æije stejn√Ω editor a ulo≈æen√≠ jako zbytek okna (pokud dostupn√©).
        """
        import json
    
        # 1) Najdi editor ‚ÄûKonfigurace lokac√≠‚Äú
        ed = None
        for name in ("ed_lokace", "ed_locations", "ed_konfigurace_lokaci"):
            ed = getattr(self, name, None)
            if ed is not None and hasattr(ed, "toPlainText") and hasattr(ed, "setPlainText"):
                break
        if ed is None:
            return  # editor nena≈°el -> ti≈°e skonƒçit
    
        raw = (ed.toPlainText() or "").strip()
        data = json.loads(raw) if raw else {}
        if not isinstance(data, dict):
            return
    
        # 2) Pomocn√© lok√°ln√≠ funkce
        def _parse_range(token: str):
            t = (str(token) if token is not None else "").strip()
            if not t or "-" not in t:
                return None
            a, b = t.split("-", 1)
            a = a.strip(); b = b.strip()
            if not (a.isdigit() and b.isdigit()):
                return None
            ai, bi = int(a), int(b)
            if ai > bi:
                ai, bi = bi, ai
            return (ai, bi)
    
        def _fmt(a: int, b: int) -> str:
            return str(a) if a == b else f"{a}-{b}"
    
        def _subtract(arr, ids_to_remove: set[int]):
            out = []
            for tok in arr:
                s = str(tok).strip()
                if not s:
                    continue
                if s.isdigit():
                    if int(s) not in ids_to_remove:
                        out.append(s)
                    continue
                rng = _parse_range(s)
                if rng is None:
                    out.append(s)  # nezn√°m√Ω form√°t nech√°me b√Ωt
                    continue
                a, b = rng
                hits = sorted([v for v in ids_to_remove if a <= v <= b])
                if not hits:
                    out.append(_fmt(a, b))
                    continue
                cur = a
                for h in hits:
                    if cur <= h - 1:
                        out.append(_fmt(cur, h - 1))
                    cur = h + 1
                if cur <= b:
                    out.append(_fmt(cur, b))
            return out
    
        ids_int = {int(x) for x in ids if str(x).isdigit()}
        keys_to_delete = []
        for k, arr in list(data.items()):
            if isinstance(arr, list):
                new_arr = _subtract(arr, ids_int)
                if len(new_arr) == 0:
                    keys_to_delete.append(k)
                else:
                    data[k] = new_arr
        for k in keys_to_delete:
            data.pop(k, None)
    
        # 3) Zapi≈° zpƒõt ‚Äì preferuj projektov√Ω formatter, jinak JSON s indent
        fmt = getattr(self, "_format_singleline_dict", None)
        if callable(fmt):
            try:
                ed.setPlainText(fmt(data, sort_numeric_keys=True, align_values=True))
            except TypeError:
                ed.setPlainText(fmt(data))
        else:
            ed.setPlainText(json.dumps(data, ensure_ascii=False, indent=2, sort_keys=True))
    
        # 4) Ulo≈æ stejn√Ωm mechanismem jako zbytek okna (vezmeme prvn√≠ existuj√≠c√≠)
        for saver_name in ("_save_editors_to_settings", "save_settings", "save_location_config", "_save_location_config"):
            saver = getattr(self, saver_name, None)
            if callable(saver):
                try:
                    saver()
                except Exception:
                    pass
                break  
        
    # FILE: gui/pdf_generator_window.py
    # CLASS: MissingPhotosWidget
    # FUNCTION: move_photos_to_orezy
    # NAHRAƒé CEL√ù OBSAH FUNKCE TOUTO VERZ√ç.
    # ZMƒöNA: Po √∫spƒõ≈°n√©m p≈ôesunu/p≈ôejmenov√°n√≠ tak√© vol√°:
    #        - self.remove_numbers_from_location_config(moved_ids)
    #        - self.remove_numbers_from_notes_config(moved_ids)
    #        - self.remove_numbers_from_states_config(moved_ids)
    from pathlib import Path
    import shutil
    
    def move_photos_to_orezy(self, photo_items):
        import re
        from PySide6.QtCore import Qt
        from PySide6.QtWidgets import QMessageBox
    
        target_dir = Path("/Users/safronus/Library/Mobile Documents/com~apple~CloudDocs/ƒåty≈ôl√≠stky/Generov√°n√≠ PDF/Fotky pro web/O≈ôezy/")
        source_root = Path("/Users/safronus/Library/Mobile Documents/com~apple~CloudDocs/ƒåty≈ôl√≠stky/Generov√°n√≠ PDF/Obr√°zky ke zpracov√°n√≠/")
        try:
            target_dir.mkdir(parents=True, exist_ok=True)
        except Exception as e:
            QMessageBox.warning(self, "P≈ôesun do ‚ÄûO≈ôezy‚Äú", f"Nepoda≈ôilo se vytvo≈ôit c√≠lovou slo≈æku:\n{target_dir}\n\n{e}")
            return
    
        def _extract_path(item) -> Path | None:
            # 1) data() v bƒõ≈æn√Ωch rol√≠ch
            for role in (Qt.UserRole, Qt.UserRole + 1, Qt.UserRole + 2):
                try:
                    val = item.data(role)
                except Exception:
                    val = None
                if isinstance(val, str) and val:
                    p = Path(val)
                    if p.exists():
                        return p
    
            # 2) atribut file_path
            fp = getattr(item, "file_path", None)
            if isinstance(fp, (str, Path)):
                p = Path(fp)
                if p.exists():
                    return p
    
            # 3) tooltip
            try:
                tip = item.toolTip()
                if isinstance(tip, str) and tip:
                    p = Path(tip)
                    if p.exists():
                        return p
            except Exception:
                pass
    
            # 4) ƒç√≠slo z textu polo≈æky ‚Üí hledej soubor zaƒç√≠naj√≠c√≠ t√≠mto ƒç√≠slem ve zdrojov√© slo≈æce
            raw_txt = (item.text() or "").strip()
            for pref in ("üñºÔ∏è", "‚úÇÔ∏è"):
                if raw_txt.startswith(pref):
                    raw_txt = raw_txt[len(pref):].lstrip()
    
            m = re.search(r"\d+", raw_txt)
            if not m or not source_root.exists():
                return None
    
            cid = m.group(0)
    
            # Nejprve bez rekurze
            try:
                for child in source_root.iterdir():
                    if child.is_file() and child.name.startswith(cid):
                        return child
            except Exception:
                pass
    
            # Rekurzivn√≠ fallback
            try:
                for child in source_root.rglob(f"{cid}*"):
                    if child.is_file():
                        return child
            except Exception:
                pass
    
            return None
    
        moved = 0
        skipped = 0
        failed = 0
        moved_items = []
        moved_ids: list[int] = []  # ƒç√≠sla n√°lez≈Ø, kter√© jsme √∫spƒõ≈°nƒõ p≈ôesunuli (int)
    
        for it in photo_items:
            try:
                src = _extract_path(it)
                if src is None or not src.is_file():
                    failed += 1
                    continue
    
                dst = target_dir / src.name
                # kolize v c√≠li: _001.._999
                if dst.exists():
                    stem, suf = dst.stem, dst.suffix
                    i = 1
                    while i <= 999:
                        cand = target_dir / f"{stem}_{i}{suf}"
                        if not cand.exists():
                            dst = cand
                            break
                        i += 1
                    if i > 999:
                        failed += 1
                        continue
    
                # 1) P≈ôesun
                shutil.move(str(src), str(dst))
    
                # 2) Z√≠skat ƒç√≠slo n√°lezu
                cid_val = None
                m = re.match(r"(\d+)", src.stem)
                if m:
                    cid_val = int(m.group(1))
                else:
                    raw_txt = (it.text() or "").strip()
                    for pref in ("üñºÔ∏è", "‚úÇÔ∏è"):
                        if raw_txt.startswith(pref):
                            raw_txt = raw_txt[len(pref):].lstrip()
                    m = re.search(r"\d+", raw_txt)
                    if m:
                        cid_val = int(m.group(0))
    
                # 3) P≈ôejmenov√°n√≠ v c√≠li na ‚Äû<ƒç√≠slo>++++NE+.HEIC‚Äú
                if cid_val is not None:
                    target_renamed = target_dir / f"{cid_val}++++NE+.HEIC"
                    if target_renamed.exists():
                        base = target_renamed.stem
                        ext = target_renamed.suffix
                        i = 1
                        while i <= 999:
                            cand = target_dir / f"{base}_{i}{ext}"
                            if not cand.exists():
                                target_renamed = cand
                                break
                            i += 1
                    try:
                        (target_dir / dst.name).rename(target_renamed)
                        dst = target_renamed
                        moved_ids.append(cid_val)
                    except Exception:
                        # ponech√°me p≈Øvodn√≠ n√°zev, kdy≈æ p≈ôejmenov√°n√≠ sel≈æe
                        pass
    
                moved += 1
                moved_items.append(it)
    
            except Exception:
                failed += 1
    
        # Odstra≈à p≈ôesunut√© polo≈æky ze seznamu
        for it in moved_items:
            try:
                row = self.list_widget.row(it)
                self.list_widget.takeItem(row)
            except Exception:
                pass
    
        # === Odstranƒõn√≠ ƒç√≠sel ze v≈°ech dotƒçen√Ωch JSON≈Ø v aktu√°ln√≠m PDF oknƒõ ===
        if moved_ids:
            try:
                self.remove_numbers_from_location_config(moved_ids)
            except Exception:
                pass
            try:
                self.remove_numbers_from_notes_config(moved_ids)
            except Exception:
                pass
            try:
                self.remove_numbers_from_states_config(moved_ids)
            except Exception:
                pass
    
        QMessageBox.information(
            self,
            "P≈ôesun do ‚ÄûO≈ôezy‚Äú",
            f"P≈ôesunuto: {moved}\nP≈ôeskoƒçeno: {skipped}\nChyb: {failed}\nC√≠l: {target_dir}"
        )
        
    # FILE: gui/pdf_generator_window.py
    # CLASS: MissingPhotosWidget
    # FUNCTION: remove_numbers_from_location_config
    # NOV√Å FUNKCE ‚Äì vlo≈æ vedle assign_to_location (NIC dal≈°√≠ho NEMƒö≈á).
    def remove_numbers_from_location_config(self, numbers: list[int]) -> None:
        """
        Odebere z ‚ÄûJSON konfigurace lokac√≠‚Äú dan√° ƒç√≠sla (vƒçetnƒõ uvnit≈ô interval≈Ø) a sma≈æe pr√°zdn√© lokace.
        Pou≈æ√≠v√° stejn√© prvky jako assign_to_location:
          - editor: main_window.location_config_text
          - form√°tov√°n√≠: self.format_json_compact_fixed
          - refresh: main_window.update_missing_photos_list()
        """
        import json
    
        main_window = self.find_main_window()
        if not main_window or not hasattr(main_window, "location_config_text"):
            return
    
        editor = main_window.location_config_text
        if not hasattr(editor, "toPlainText") or not hasattr(editor, "setPlainText"):
            return
    
        raw = (editor.toPlainText() or "").strip()
        try:
            data = json.loads(raw) if raw else {}
        except Exception:
            return
        if not isinstance(data, dict):
            return
    
        ids = {int(n) for n in numbers if str(n).isdigit()}
        if not ids:
            return
    
        def _parse_range(s: str):
            s = (s or "").strip()
            if "-" not in s:
                return None
            a, b = s.split("-", 1)
            if a.strip().isdigit() and b.strip().isdigit():
                ai, bi = int(a.strip()), int(b.strip())
                if ai > bi:
                    ai, bi = bi, ai
                return ai, bi
            return None
    
        def _fmt(a: int, b: int) -> str:
            return str(a) if a == b else f"{a}-{b}"
    
        def _subtract(arr, rm: set[int]):
            out = []
            for tok in arr:
                s = str(tok).strip()
                if not s:
                    continue
                if s.isdigit():
                    if int(s) not in rm:
                        out.append(s)
                    continue
                rng = _parse_range(s)
                if rng is None:
                    out.append(s)
                    continue
                a, b = rng
                hits = sorted([v for v in rm if a <= v <= b])
                if not hits:
                    out.append(_fmt(a, b))
                    continue
                cur = a
                for h in hits:
                    if cur <= h - 1:
                        out.append(_fmt(cur, h - 1))
                    cur = h + 1
                if cur <= b:
                    out.append(_fmt(cur, b))
            return out
    
        keys_to_delete = []
        for loc_key, arr in list(data.items()):
            if isinstance(arr, list):
                new_arr = _subtract(arr, ids)
                if len(new_arr) == 0:
                    keys_to_delete.append(loc_key)
                else:
                    data[loc_key] = new_arr
        for k in keys_to_delete:
            data.pop(k, None)
    
        try:
            formatted = self.format_json_compact_fixed(data)
        except Exception:
            formatted = json.dumps(data, ensure_ascii=False, indent=2, sort_keys=True)
        editor.setPlainText(formatted)
    
        try:
            main_window.update_missing_photos_list()
        except Exception:
            pass
        
    # FILE: gui/pdf_generator_window.py
    # CLASS: MissingPhotosWidget
    # FUNCTION: remove_numbers_from_states_config
    # NAHRAƒé CEL√ù OBSAH FUNKCE touto verz√≠.
    # ZMƒöNA: editor hled√°m P≈ò√çMO v rodiƒçovsk√©m PDF oknƒõ p≈ôes self.window().
    #        Pou≈æ√≠v√° atribut `status_config_text` vytvo≈ôen√Ω v create_status_config_tab(). Ostatn√≠ chov√°n√≠ zachov√°no.
    
    def remove_numbers_from_states_config(self, numbers: list[int]) -> None:
        """
        Odebere dan√° ƒç√≠sla z ‚Äû‚öôÔ∏è JSON Nastaven√≠ stav≈Ø‚Äú (samostatn√° ƒç√≠sla i uvnit≈ô interval≈Ø 'A-B').
        Pr√°zdn√© kl√≠ƒçe (stavy) sma≈æe.
        Editor: <PdfGeneratorWindow>.status_config_text (viz create_status_config_tab)
        Form√°tov√°n√≠: self.format_json_compact_fixed
        Refresh: window.update_missing_photos_list() (pokud existuje)
        """
        import json
        from PySide6.QtWidgets import QPlainTextEdit, QTextEdit
    
        window = self.window()  # <- rodiƒçovsk√© PDF okno
        if window is None:
            return
    
        editor = getattr(window, "status_config_text", None)
        if not isinstance(editor, (QPlainTextEdit, QTextEdit)) or not hasattr(editor, "toPlainText"):
            return
    
        raw = (editor.toPlainText() or "").strip()
        try:
            data = json.loads(raw) if raw else {}
        except Exception:
            return
        if not isinstance(data, dict):
            return
    
        ids = {int(n) for n in numbers if str(n).isdigit()}
        if not ids:
            return
    
        def _parse_range(s: str):
            s = (s or "").strip()
            if "-" not in s:
                return None
            a, b = s.split("-", 1)
            if a.strip().isdigit() and b.strip().isdigit():
                ai, bi = int(a.strip()), int(b.strip())
                if ai > bi:
                    ai, bi = bi, ai
                return ai, bi
            return None
    
        def _fmt(a: int, b: int) -> str:
            return str(a) if a == b else f"{a}-{b}"
    
        def _subtract(arr, rm: set[int]):
            out = []
            for tok in arr:
                s = str(tok).strip()
                if not s:
                    continue
                if s.isdigit():
                    if int(s) not in rm:
                        out.append(s)
                    continue
                r = _parse_range(s)
                if r is None:
                    out.append(s)
                    continue
                a, b = r
                hits = sorted([v for v in rm if a <= v <= b])
                if not hits:
                    out.append(_fmt(a, b))
                    continue
                cur = a
                for h in hits:
                    if cur <= h - 1:
                        out.append(_fmt(cur, h - 1))
                    cur = h + 1
                if cur <= b:
                    out.append(_fmt(cur, b))
            return out
    
        changed = False
        keys_to_delete = []
        for state, arr in list(data.items()):
            if isinstance(arr, list):
                new_arr = _subtract(arr, ids)
                if new_arr != arr:
                    changed = True
                if len(new_arr) == 0:
                    keys_to_delete.append(state)
                else:
                    data[state] = new_arr
        for k in keys_to_delete:
            data.pop(k, None)
            changed = True
    
        if not changed:
            return
    
        try:
            formatted = self.format_json_compact_fixed(data)
        except Exception:
            formatted = json.dumps(data, ensure_ascii=False, indent=2, sort_keys=True)
        editor.setPlainText(formatted)
    
        refresher = getattr(window, "update_missing_photos_list", None)
        if callable(refresher):
            try:
                refresher()
            except Exception:
                pass
        
    # FILE: gui/pdf_generator_window.py
    # CLASS: MissingPhotosWidget
    # FUNCTION: remove_numbers_from_notes_config
    # NAHRAƒé CEL√ù OBSAH FUNKCE touto verz√≠.
    # ZMƒöNA: editor hled√°m P≈ò√çMO v rodiƒçovsk√©m PDF oknƒõ p≈ôes self.window() (spolehlivƒõj≈°√≠ ne≈æ find_main_window).
    #        Pou≈æ√≠v√° atribut `notes_text` vytvo≈ôen√Ω v create_notes_tab(). Ostatn√≠ chov√°n√≠ zachov√°no.
    
    def remove_numbers_from_notes_config(self, numbers: list[int]) -> None:
        """
        Odebere dan√° ƒç√≠sla z ‚Äûüìù JSON pozn√°mky‚Äú (ma≈æe kl√≠ƒçe = ƒç√≠sla n√°lez≈Ø).
        Editor: <PdfGeneratorWindow>.notes_text (viz create_notes_tab)
        Form√°tov√°n√≠: self.format_json_compact_fixed
        Refresh: window.update_missing_photos_list() (pokud existuje)
        """
        import json
        from PySide6.QtWidgets import QPlainTextEdit, QTextEdit
    
        window = self.window()  # <- rodiƒçovsk√© PDF okno
        if window is None:
            return
    
        editor = getattr(window, "notes_text", None)
        if not isinstance(editor, (QPlainTextEdit, QTextEdit)) or not hasattr(editor, "toPlainText"):
            return
    
        raw = (editor.toPlainText() or "").strip()
        try:
            data = json.loads(raw) if raw else {}
        except Exception:
            return
        if not isinstance(data, dict):
            return
    
        ids = {str(int(n)) for n in numbers if str(n).isdigit()}
        changed = False
        for cid in list(ids):
            if cid in data:
                data.pop(cid, None)
                changed = True
    
        if not changed:
            return
    
        try:
            formatted = self.format_json_compact_fixed(data)
        except Exception:
            formatted = json.dumps(data, ensure_ascii=False, indent=2, sort_keys=True)
        editor.setPlainText(formatted)
    
        refresher = getattr(window, "update_missing_photos_list", None)
        if callable(refresher):
            try:
                refresher()
            except Exception:
                pass

    def assign_to_location(self, photo_items):
        """P≈ôi≈ôad√≠ vybran√© fotky k zadan√© lokaci - OPRAVENO s CMD+W, pr√°zdn√Ωm polem a zobrazen√≠m interval≈Ø"""
        # Z√≠skej ƒç√≠sla fotek
        photo_numbers = []
        for item in photo_items:
            try:
                # Extrakce ƒç√≠sla z textu "üì∑ 12345"
                number = int(item.text().split()[-1])
                photo_numbers.append(number)
            except (ValueError, IndexError):
                continue
    
        if not photo_numbers:
            return
    
        # P≈ôeveƒè ƒç√≠sla fotek na intervaly pro zobrazen√≠
        photo_intervals = self.merge_numbers_to_intervals(sorted(photo_numbers))
        photo_display = ", ".join(photo_intervals)
    
        # Vytvo≈ô vlastn√≠ dialog s QLineEdit
        dialog = QDialog(self)
        dialog.setWindowTitle("P≈ôi≈ôadit lokaci")
        dialog.setMinimumSize(450, 200)  # Zvƒõt≈°eno kv≈Øli v√≠ce textu
        
        layout = QVBoxLayout(dialog)
        
        # Hlavn√≠ popisek
        label = QLabel(f"Zadejte ƒç√≠slo lokace pro {len(photo_numbers)} fotek:")
        label.setStyleSheet("font-weight: bold; font-size: 12px;")
        layout.addWidget(label)
        
        # NOV√â: Zobrazen√≠ interval≈Ø fotek
        photos_label = QLabel(f"Fotky k p≈ôi≈ôazen√≠: {photo_display}")
        photos_label.setStyleSheet("color: #666666; font-size: 11px; margin: 5px 0px;")
        photos_label.setWordWrap(True)  # Pro dlouh√© seznamy
        layout.addWidget(photos_label)
        
        # QLineEdit pro zad√°n√≠ lokace
        line_edit = QLineEdit()
        line_edit.setPlaceholderText("Zadejte ƒç√≠slo lokace (1-9999)")
        line_edit.setFocus()  # Automatick√© zamƒõ≈ôen√≠ na pole
        layout.addWidget(line_edit)
        
        buttons_layout = QHBoxLayout()
        btn_ok = QPushButton("OK")
        btn_cancel = QPushButton("Zru≈°it")
        
        btn_ok.clicked.connect(dialog.accept)
        btn_cancel.clicked.connect(dialog.reject)
        
        buttons_layout.addWidget(btn_ok)
        buttons_layout.addWidget(btn_cancel)
        layout.addLayout(buttons_layout)
    
        # P≈ôid√°n√≠ CMD+W zkratky
        from PySide6.QtGui import QShortcut, QKeySequence
        shortcut = QShortcut(QKeySequence.Close, dialog)
        shortcut.activated.connect(dialog.reject)
        
        # Enter tak√© potvrd√≠ dialog
        line_edit.returnPressed.connect(dialog.accept)
    
        # Spu≈°tƒõn√≠ dialogu
        if dialog.exec() != QDialog.Accepted:
            return
    
        # Validace textov√©ho vstupu
        try:
            location_id = int(line_edit.text().strip())
            if location_id < 1 or location_id > 9999:
                QMessageBox.warning(self, "Chyba", "ƒå√≠slo lokace mus√≠ b√Ωt mezi 1 a 9999")
                return
        except (ValueError, TypeError):
            QMessageBox.warning(self, "Chyba", "Zadejte platn√© ƒç√≠slo")
            return
    
        # Zbytek k√≥du z≈Øst√°v√° stejn√Ω...
        main_window = self.find_main_window()
        if not main_window:
            QMessageBox.warning(self, "Chyba", "Nepoda≈ôilo se naj√≠t hlavn√≠ okno")
            return
    
        try:
            # Z√≠skej aktu√°ln√≠ JSON konfiguraci
            config_text = main_window.location_config_text.toPlainText().strip()
            if config_text:
                data = json.loads(config_text)
            else:
                data = {}
    
            # P≈ôidej fotky do lokace
            loc_key = str(location_id)
            
            # Z√≠skej existuj√≠c√≠ ƒç√≠sla v lokaci
            existing_numbers = self.get_existing_numbers_for_location(data.get(loc_key, []))
            
            # Slouƒç s nov√Ωmi ƒç√≠sly
            all_numbers = existing_numbers.union(set(photo_numbers))
            
            # Vytvo≈ô intervaly
            intervals = self.merge_numbers_to_intervals(sorted(list(all_numbers)))
            
            data[loc_key] = intervals
            
            # Form√°tov√°n√≠ JSON
            formatted_json = self.format_json_compact_fixed(data)
            
            main_window.location_config_text.setPlainText(formatted_json)
            
            # Aktualizuj seznam
            main_window.update_missing_photos_list()
            
            added_count = len(set(photo_numbers) - existing_numbers)
            
            # UPRAVENO: Zobrazen√≠ interval≈Ø i v √∫spƒõ≈°n√© zpr√°vƒõ
            QMessageBox.information(
                self,
                "√öspƒõch",
                f"‚úÖ P≈ôi≈ôazeno {len(photo_numbers)} fotek do lokace {location_id}\n"
                f"Fotky: {photo_display}\n"  # Zobrazen√≠ interval≈Ø
                f"Novƒõ p≈ôid√°no: {added_count} fotek\n"
                f"V√Ωsledn√© intervaly v lokaci: {', '.join(intervals)}"
            )
    
        except Exception as e:
            QMessageBox.critical(self, "Chyba", f"Nepoda≈ôilo se aktualizovat konfiguraci:\n{str(e)}")

    # Nahraƒète tuto metodu ve t≈ô√≠dƒõ MissingPhotosWidget
    
    def recommend_nearby_locations(self, photo_items):
        """
        Spust√≠ doporuƒçen√≠ nejbli≈æ≈°√≠ch lokac√≠ pro vybran√© fotografie.
        Cel√Ω proces je nyn√≠ opraven a spr√°vnƒõ vol√° intern√≠ metody.
        """
        from PySide6.QtWidgets import QProgressDialog, QMessageBox
        from PySide6.QtCore import Qt
        import re
        from pathlib import Path
    
        main_window = self.find_main_window()
        if not main_window:
            QMessageBox.critical(self, "Chyba", "Kritick√° chyba: Nelze naj√≠t hlavn√≠ okno aplikace.")
            return
    
        photo_numbers = []
        for item in photo_items:
            try:
                number_str = item.text().split()[-1]
                if number_str.isdigit():
                    photo_numbers.append(int(number_str))
            except (ValueError, IndexError):
                continue
    
        if not photo_numbers:
            # OPRAVA: Vol√°n√≠ update_log pouze s jedn√≠m argumentem
            main_window.update_log("Pro doporuƒçen√≠ nebyly vybr√°ny ≈æ√°dn√© platn√© fotky.")
            return
        
        progress = QProgressDialog("Spou≈°t√≠m doporuƒçen√≠ lokac√≠...", "Zru≈°it", 0, 100, self)
        progress.setWindowTitle("Vyhled√°v√°n√≠")
        progress.setWindowModality(Qt.WindowModal)
        progress.show()
    
        try:
            QApplication.processEvents()
            progress.setLabelText("Naƒç√≠t√°m GPS z fotek...")
            progress.setValue(10)
            
            photo_coords = self.get_photo_gps_coordinates(photo_numbers, main_window)
            if not photo_coords:
                progress.close()
                QMessageBox.information(self, "Chyb√≠ GPS", "≈Ω√°dn√° z vybran√Ωch fotek neobsahuje GPS data.")
                return
    
            QApplication.processEvents()
            if progress.wasCanceled(): return
            progress.setLabelText("Analyzuji lokaƒçn√≠ mapy a polygony...")
            progress.setValue(30)
            
            location_maps_data = self.get_available_location_maps(main_window)
            
            if not location_maps_data:
                progress.close()
                QMessageBox.information(self, "Chyb√≠ mapy", "Nebyly nalezeny ≈æ√°dn√© lokaƒçn√≠ mapy pro porovn√°n√≠.")
                return
    
            QApplication.processEvents()
            if progress.wasCanceled(): return
            progress.setLabelText("Poƒç√≠t√°m nejlep≈°√≠ shody...")
            progress.setValue(80)
    
            recommendations = self.calculate_nearest_locations(photo_coords, location_maps_data)
            
            progress.setValue(100)
            progress.close()
    
            if recommendations:
                enriched_recommendations = []
                for loc_id, filename, dist in recommendations:
                    info = next((m for m in location_maps_data if m['filename'] == filename), {})
                    if info:
                        enriched_recommendations.append((loc_id, filename, dist, info))
                
                self.show_enhanced_location_selection_dialog(photo_numbers, enriched_recommendations)
            else:
                # OPRAVA: Vol√°n√≠ update_log pouze s jedn√≠m argumentem
                main_window.update_log("Nepoda≈ôilo se doporuƒçit ≈æ√°dnou vhodnou lokaci.")
                QMessageBox.information(self, "Nenalezeno", "Pro dan√© fotky se nepoda≈ôilo naj√≠t ≈æ√°dn√© bl√≠zk√© lokace.")
    
        except Exception as e:
            progress.close()
            QMessageBox.critical(self, "Chyba p≈ôi doporuƒçov√°n√≠", f"Do≈°lo k neoƒçek√°van√© chybƒõ:\n{str(e)}")
            # OPRAVA: Vol√°n√≠ update_log pouze s jedn√≠m argumentem
            main_window.update_log(f"Chyba p≈ôi doporuƒçov√°n√≠ lokac√≠: {e}")

    # Ve t≈ô√≠dƒõ MissingPhotosWidget
    def mark_photos_as_cropped(self, photo_items):
        """Oznaƒç√≠ vybran√© fotky jako o≈ôezan√© v hlavn√≠m slovn√≠ku 'crop_status'."""
        main_window = self.find_main_window()
        if not main_window:
            QMessageBox.warning(self, "Chyba", "Nepoda≈ôilo se naj√≠t hlavn√≠ okno aplikace.")
            return
    
        updated_count = 0
        for item in photo_items:
            try:
                # Extrakce ƒç√≠sla fotky z textu polo≈æky (nap≈ô. "üñºÔ∏è 12345")
                photo_num_str = item.text().split()[-1]
                if photo_num_str.isdigit():
                    main_window.crop_status[photo_num_str] = True
                    updated_count += 1
            except (ValueError, IndexError):
                continue
    
        if updated_count > 0:
            main_window.update_log(f"‚úÇÔ∏è Manu√°lnƒõ oznaƒçeno {updated_count} fotek jako o≈ôezan√©.")
            
            # Po zmƒõnƒõ stavu je nutn√© okam≈æitƒõ ulo≈æit nastaven√≠ a aktualizovat UI
            main_window.save_settings()
            main_window.update_missing_photos_list()

    def parse_location_info(self, filename):
        """Parsuje informace o lokaci z n√°zvu souboru - ROZ≈†√ç≈òENO o debug"""
        try:
            parts = filename.split('+')
            
            location_info = {
                'id': '',
                'description': '',
                'number': '',
                'number_display': ''
            }
            
            # Debug v√Ωpis
            main_window = self.find_main_window()
            if main_window:
                main_window.update_log(f"üîç Parsuju soubor: {filename}")
                main_window.update_log(f"üìã ƒå√°sti: {parts}")
            
            if len(parts) >= 1:
                location_info['id'] = parts[0]
            
            if len(parts) >= 2:
                location_info['description'] = parts[1]
            
            # Hledej 5-ti m√≠stn√© ƒç√≠slo za posledn√≠m +
            for part in reversed(parts):
                part_clean = part.split('.')[0] if '.' in part else part
                import re
                match = re.search(r'(\d{5})$', part_clean)
                if match:
                    location_info['number'] = match.group(1)
                    location_info['number_display'] = str(int(match.group(1)))
                    if main_window:
                        main_window.update_log(f"üéØ Nalezeno ƒç√≠slo mapy: {match.group(1)} -> {location_info['number_display']}")
                    break
            
            return location_info
            
        except Exception as e:
            main_window = self.find_main_window()
            if main_window:
                main_window.update_log(f"‚ùå Chyba p≈ôi parsov√°n√≠ {filename}: {e}")
            
            return {
                'id': filename.split('+')[0] if '+' in filename else filename,
                'description': 'Chyba p≈ôi naƒç√≠t√°n√≠ popisu',
                'number': '',
                'number_display': ''
            }
        
    # Vlo≈æte nebo nahraƒète tuto metodu ve t≈ô√≠dƒõ MissingPhotosWidget v souboru pdf_generator_window.py
    
    def show_enhanced_location_selection_dialog(self, photo_numbers, recommendations):
        """
        Zobraz√≠ vylep≈°en√Ω dialog s doporuƒçen√Ωmi lokacemi, kter√Ω l√©pe form√°tuje informace
        a vizu√°lnƒõ odli≈°uje shodu uvnit≈ô polygonu.
        """
        from PySide6.QtWidgets import QDialog, QVBoxLayout, QLabel, QListWidget, QPushButton, QHBoxLayout, QListWidgetItem
        from PySide6.QtCore import Qt, QSize
        from PySide6.QtGui import QFont, QAction, QKeySequence
    
        dialog = QDialog(self)
        dialog.setWindowTitle("Doporuƒçen√© lokace")
        dialog.setMinimumSize(1000, 600)
        dialog.resize(1100, 650)
    
        layout = QVBoxLayout(dialog)
        layout.setSpacing(10)
        layout.setContentsMargins(15, 15, 15, 15)
    
        # Zobrazen√≠ interval≈Ø ƒç√≠sel fotek
        photo_intervals = self.merge_numbers_to_intervals(sorted(photo_numbers))
        photo_display = ", ".join(photo_intervals)
        if len(photo_display) > 100: # Zkr√°cen√≠ pro zobrazen√≠
            photo_display = photo_display[:97] + "..."
    
        header_label = QLabel(f"üéØ Doporuƒçen√© lokace pro fotky: {photo_display}")
        header_label.setStyleSheet("font-weight: bold; font-size: 14px; margin-bottom: 10px;")
        header_label.setWordWrap(True)
        header_label.setToolTip(f"V≈°echny fotky: {', '.join(photo_intervals)}")
        layout.addWidget(header_label)
    
        list_widget = QListWidget()
        list_widget.setAlternatingRowColors(True)
        list_widget.setUniformItemSizes(False)
        font = QFont()
        font.setFamily("Segoe UI") # M≈Ø≈æete zmƒõnit na jin√Ω preferovan√Ω font
        font.setPointSize(10)
        list_widget.setFont(font)
    
        for i, (location_id, filename, distance, location_info) in enumerate(recommendations):
            rank = i + 1
            numeric_id = self.extract_numeric_location_id_from_filename(filename)
            numeric_display = f" (ID: {numeric_id})" if numeric_id is not None else " (ID: ?)"
            
            main_text = f"{rank}. {location_info['id']}{numeric_display}"
            
            if location_info['description']:
                desc = location_info['description']
                # Jednoduch√© zkr√°cen√≠ popisu, pokud je p≈ô√≠li≈° dlouh√Ω
                if len(desc) > 80:
                    desc = desc[:77] + "..."
                main_text += f"\n üìÑ {desc}"
    
            # ====================================================================
            # ZDE JE KL√çƒåOV√Å √öPRAVA PRO ZOBRAZEN√ç STAVU POLYGONU
            # ====================================================================
            if distance == 0.0:
                distance_text = "UVNIT≈ò POLYGONU"
            else:
                distance_text = f"{distance:.2f} km"
            
            details = f"\n üìç {distance_text}"
            # ====================================================================
    
            if location_info['number_display']:
                details += f" ‚Ä¢ Mapa ƒç√≠slo: {location_info['number_display']}"
    
            main_text += details
            item = QListWidgetItem(main_text)
            item.setData(Qt.UserRole, filename) # Ukl√°d√°me cel√Ω n√°zev souboru
    
            # Dynamick√° v√Ω≈°ka polo≈æky podle poƒçtu ≈ô√°dk≈Ø
            line_count = main_text.count('\n') + 1
            item.setSizeHint(QSize(-1, max(60, line_count * 20 + 10)))
    
            # Detailn√≠ tooltip
            tooltip_lines = [
                f"Textov√© ID: {location_id}",
                f"ƒå√≠seln√© ID lokace: {numeric_id if numeric_id is not None else 'N/A'}",
                f"Popis: {location_info['description']}",
            ]
            if distance == 0.0:
                tooltip_lines.append("üìç Status: FOTKY JSOU UVNIT≈ò POLYGONU")
            else:
                tooltip_lines.append(f"Vzd√°lenost: {distance:.3f} km")
                
            tooltip_lines.append(f"Soubor: {filename}")
            item.setToolTip("\n".join(tooltip_lines))
    
            # Barevn√© odli≈°en√≠ nejlep≈°√≠ch v√Ωsledk≈Ø
            if i == 0:
                item.setBackground(QColor("#d4edda")) # Jemn√° zelen√°
                item.setForeground(QColor("#155724"))
            elif i < 3:
                item.setBackground(QColor("#fff3cd")) # Jemn√° ≈ælut√°
                item.setForeground(QColor("#856404"))
    
            list_widget.addItem(item)
    
        if list_widget.count() > 0:
            list_widget.setCurrentRow(0)
        layout.addWidget(list_widget)
    
        # Info text pod seznamem
        info_text = f"üí° Bude p≈ôi≈ôazeno {len(photo_numbers)} fotek."
        info_label = QLabel(info_text)
        info_label.setStyleSheet("font-style: italic; color: #666666; margin-top: 5px; font-size: 11px;")
        layout.addWidget(info_label)
    
        # Tlaƒç√≠tka
        buttons_layout = QHBoxLayout()
        btn_assign = QPushButton("üìç P≈ôi≈ôadit k vybran√© lokaci")
        btn_assign.setStyleSheet("background-color: #4CAF50; color: white; font-weight: bold; padding: 10px; border-radius: 5px;")
        btn_cancel = QPushButton("‚ùå Zru≈°it")
        btn_cancel.setStyleSheet("background-color: #f44336; color: white; font-weight: bold; padding: 10px; border-radius: 5px;")
    
        btn_assign.clicked.connect(dialog.accept)
        btn_cancel.clicked.connect(dialog.reject)
        list_widget.itemDoubleClicked.connect(dialog.accept)
    
        buttons_layout.addStretch()
        buttons_layout.addWidget(btn_assign)
        buttons_layout.addWidget(btn_cancel)
        buttons_layout.addStretch()
        layout.addLayout(buttons_layout)
    
        # Zkratka pro zav≈ôen√≠ okna
        close_action = QAction("Zav≈ô√≠t", dialog)
        close_action.setShortcut(QKeySequence.Close)
        close_action.triggered.connect(dialog.reject)
        dialog.addAction(close_action)
    
        if dialog.exec() == QDialog.Accepted:
            selected_items = list_widget.selectedItems()
            if selected_items:
                filename = selected_items[0].data(Qt.UserRole)
                self.assign_photos_to_location_by_filename(photo_numbers, filename)


    def assign_photos_to_location_by_filename(self, photo_numbers, filename):
        """P≈ôi≈ôad√≠ fotky k lokaci na z√°kladƒõ cel√©ho n√°zvu souboru"""
        main_window = self.find_main_window()
        if not main_window:
            return
    
        try:
            main_window.update_log(f"üîÑ P≈ôi≈ôazuji fotky {photo_numbers} k souboru '{filename}'")
            
            # Extrakce ƒç√≠seln√©ho ID z cel√©ho n√°zvu souboru
            numeric_location_id = self.extract_numeric_location_id_from_filename(filename)
            
            if numeric_location_id is None:
                main_window.update_log(f"‚ùå Nepoda≈ôilo se naj√≠t ƒç√≠seln√© ID v souboru: {filename}")
                QMessageBox.warning(self, "Chyba", f"Nepoda≈ôilo se naj√≠t ƒç√≠seln√© ID v souboru: {filename}")
                return
    
            main_window.update_log(f"‚úÖ P≈ôevedeno '{filename}' -> ƒç√≠seln√© ID: {numeric_location_id}")
    
            # Zbytek logiky z≈Øst√°v√° stejn√Ω
            config_text = main_window.location_config_text.toPlainText().strip()
            data = json.loads(config_text) if config_text else {}
            
            loc_key = str(numeric_location_id)
            existing_numbers = self.get_existing_numbers_for_location(data.get(loc_key, []))
            all_numbers = existing_numbers.union(set(photo_numbers))
            intervals = self.merge_numbers_to_intervals(list(all_numbers))
            data[loc_key] = intervals
    
            formatted_json = self.format_json_compact(data)
            main_window.location_config_text.setPlainText(formatted_json)
            main_window.update_missing_photos_list()
    
            QMessageBox.information(
                self, 
                "√öspƒõch", 
                f"‚úÖ P≈ôi≈ôazeno {len(photo_numbers)} fotek do lokace {numeric_location_id}\n"
                f"Soubor: {filename.split('+')[0]}...\n"
                f"Fotky: {', '.join(map(str, photo_numbers))}"
            )
    
        except Exception as e:
            main_window.update_log(f"‚ùå Chyba p≈ôi p≈ôi≈ôazov√°n√≠: {e}")
            QMessageBox.critical(self, "Chyba", f"Nepoda≈ôilo se aktualizovat konfiguraci:\n{str(e)}")


    def get_photo_gps_coordinates(self, photo_numbers, main_window):
        """Z√≠sk√° GPS sou≈ôadnice z fotek ƒçty≈ôl√≠stk≈Ø"""
        import os
        from pathlib import Path
        
        clover_path = main_window.edit_clover_path.text().strip()
        if not clover_path or not os.path.isdir(clover_path):
            return []
    
        coords = []
        photo_extensions = {'.jpg', '.jpeg', '.png', '.heic', '.heif', '.tiff', '.tif', '.bmp'}
        
        main_window.update_log(f"üîç Hled√°m GPS sou≈ôadnice pro fotky: {photo_numbers}")
        
        try:
            for filename in os.listdir(clover_path):
                if Path(filename).suffix.lower() not in photo_extensions:
                    continue
                
                try:
                    # Extrakce ƒç√≠sla ze jm√©na souboru
                    number_part = filename.split('+')[0]
                    photo_number = int(number_part)
                    
                    if photo_number in photo_numbers:
                        main_window.update_log(f"üì∑ Zpracov√°v√°m fotku {photo_number}: {filename}")
                        
                        # ƒåti GPS sou≈ôadnice ze souboru
                        gps_coord = self.extract_gps_from_file(os.path.join(clover_path, filename))
                        if gps_coord:
                            coords.append((photo_number, gps_coord))
                            main_window.update_log(f"‚úÖ GPS fotky {photo_number}: {gps_coord[0]:.6f}¬∞N, {gps_coord[1]:.6f}¬∞E")
                        else:
                            main_window.update_log(f"‚ùå Nepoda≈ôilo se naƒç√≠st GPS z fotky {photo_number}")
                            
                except (ValueError, IndexError):
                    continue
                    
        except Exception as e:
            main_window.update_log(f"‚ùå Chyba p≈ôi ƒçten√≠ GPS sou≈ôadnic: {e}")
            
        main_window.update_log(f"üìä Nalezeno GPS sou≈ôadnic: {len(coords)} z {len(photo_numbers)} fotek")
        return coords
    
    def calculate_distance_to_polygon(self, photo_coords, polygon_points):
        """
        Vypoƒç√≠t√° nejkrat≈°√≠ vzd√°lenost od bod≈Ø fotek k polygonu.
        NOV√â: Vrac√≠ z√°pornou hodnotu pro body uvnit≈ô polygonu, kladnou pro body mimo.
        """
        import math
    
        if not polygon_points or not photo_coords:
            return float('inf')
    
        min_distance = float('inf')
        any_point_inside = False
    
        for photo_coord in photo_coords:
            _, (photo_lat, photo_lon) = photo_coord
    
            # Kontrola, zda je bod uvnit≈ô polygonu
            is_inside = self.point_in_polygon((photo_lat, photo_lon), polygon_points)
            
            if is_inside:
                any_point_inside = True
                # Pro body uvnit≈ô polygonu vypoƒç√≠t√°me vzd√°lenost ke st≈ôedu
                # a vr√°t√≠me ji jako z√°pornou hodnotu
                center_lat = sum(p[0] for p in polygon_points) / len(polygon_points)
                center_lon = sum(p[1] for p in polygon_points) / len(polygon_points)
                distance_to_center = self.haversine_distance(photo_lat, photo_lon, center_lat, center_lon)
                
                # ƒå√≠m bl√≠≈æ ke st≈ôedu, t√≠m v√≠ce z√°porn√° hodnota
                if distance_to_center < min_distance:
                    min_distance = distance_to_center
            else:
                # Pro body mimo polygon vypoƒç√≠t√°me vzd√°lenost k nejbli≈æ≈°√≠ hranƒõ
                edge_distance = float('inf')
                for i in range(len(polygon_points)):
                    p1 = polygon_points[i]
                    p2 = polygon_points[(i + 1) % len(polygon_points)]
                    distance = self.distance_point_to_line_segment(
                        (photo_lat, photo_lon), p1, p2
                    )
                    edge_distance = min(edge_distance, distance)
                
                min_distance = min(min_distance, edge_distance)
    
        # Vr√°tit z√°pornou hodnotu pro body uvnit≈ô, kladnou pro body mimo
        return -min_distance if any_point_inside else min_distance

# Nahraƒète tuto metodu ve t≈ô√≠dƒõ MissingPhotosWidget v pdf_generator_window.py

    def point_in_polygon(self, point, polygon):
        """
        Spolehliv√Ω Ray-Casting algoritmus pro zji≈°tƒõn√≠, zda je GPS bod uvnit≈ô polygonu.
        Tato verze je matematicky korektn√≠ pro geografick√© sou≈ôadnice.
        """
        lat, lon = point
        num_vertices = len(polygon)
        
        if num_vertices < 3:
            return False
            
        inside = False
        
        # Vezmeme prvn√≠ bod polygonu
        p1_lat, p1_lon = polygon[0]
        
        # Projdeme v≈°echny hrany polygonu
        for i in range(1, num_vertices + 1):
            p2_lat, p2_lon = polygon[i % num_vertices]
            
            # Zkontrolujeme, zda horizont√°ln√≠ "paprsek" z na≈°eho bodu prot√≠n√° hranu
            if lon > min(p1_lon, p2_lon):
                if lon <= max(p1_lon, p2_lon):
                    if lat <= max(p1_lat, p2_lat):
                        # Vypoƒç√≠t√°me pr≈Øseƒç√≠k paprsku s hranou
                        if p1_lon != p2_lon:
                            lat_intersection = (lon - p1_lon) * (p2_lat - p1_lat) / (p2_lon - p1_lon) + p1_lat
                        
                        # Pokud je n√°≈° bod pod pr≈Øseƒç√≠kem, do≈°lo k protnut√≠
                        if p1_lon == p2_lon or lat <= lat_intersection:
                            inside = not inside
                            
            # Posuneme se na dal≈°√≠ hranu
            p1_lat, p1_lon = p2_lat, p2_lon
            
        return inside

    def distance_to_polygon(self, point, polygon):
        """
        Vypoƒç√≠t√° nejkrat≈°√≠ vzd√°lenost od GPS bodu k polygonu v kilometrech.
        1. Pokud je bod uvnit≈ô, vr√°t√≠ 0.0.
        2. Pokud je vnƒõ, vypoƒç√≠t√° vzd√°lenost k nejbli≈æ≈°√≠ hranƒõ.
    
        Tato metoda pou≈æ√≠v√° lok√°ln√≠ aproximaci na metry, co≈æ je pro tyto vzd√°lenosti
        matematicky mnohem stabilnƒõj≈°√≠ a spr√°vnƒõj≈°√≠ ne≈æ p≈ôedchoz√≠ pokusy.
        """
        import math
        
        # KROK 1: Nejd≈ô√≠ve zkontrolujeme, jestli je bod uvnit≈ô.
        if self.point_in_polygon(point, polygon):
            return 0.0
    
        # KROK 2: Pokud je bod vnƒõ, najdeme nejkrat≈°√≠ vzd√°lenost k hranƒõ.
        min_dist_sq = float('inf')
        R_METERS = 6371000  # Polomƒõr Zemƒõ v metrech
    
        for i in range(len(polygon)):
            p1 = polygon[i]
            p2 = polygon[(i + 1) % len(polygon)]
    
            # P≈ôevod √∫seƒçky a bodu na lok√°ln√≠ metrick√Ω syst√©m (x, y)
            # Toto je kl√≠ƒçov√° oprava, kter√° ≈ôe≈°√≠ nesmysln√© vzd√°lenosti.
            px, py = (
                (point[1] - p1[1]) * math.cos(math.radians((p1[0] + point[0]) / 2)),
                point[0] - p1[0]
            )
            p2x, p2y = (
                (p2[1] - p1[1]) * math.cos(math.radians((p1[0] + p2[0]) / 2)),
                p2[0] - p1[0]
            )
            
            px_m = px * R_METERS
            py_m = py * R_METERS
            p2x_m = p2x * R_METERS
            p2y_m = p2y * R_METERS
    
            edge_len_sq = p2x_m**2 + p2y_m**2
            if edge_len_sq == 0.0:
                dist_sq = px_m**2 + py_m**2
            else:
                t = max(0, min(1, (px_m * p2x_m + py_m * p2y_m) / edge_len_sq))
                proj_x = t * p2x_m
                proj_y = t * p2y_m
                dist_sq = (px_m - proj_x)**2 + (py_m - proj_y)**2
            
            if dist_sq < min_dist_sq:
                min_dist_sq = dist_sq
                
        return math.sqrt(min_dist_sq) / 1000.0 # P≈ôevedeme zpƒõt na kilometry

    def haversine_distance(self, lat1, lon1, lat2, lon2):
        """Haversine formula pro vzd√°lenost mezi GPS body"""
        import math
        
        R = 6371.0  # Polomƒõr Zemƒõ v km
        
        lat1_rad = math.radians(lat1)
        lon1_rad = math.radians(lon1)
        lat2_rad = math.radians(lat2)
        lon2_rad = math.radians(lon2)
        
        dlat = lat2_rad - lat1_rad
        dlon = lon2_rad - lon1_rad
        
        a = (math.sin(dlat/2)**2 + 
             math.cos(lat1_rad) * math.cos(lat2_rad) * 
             math.sin(dlon/2)**2)
        
        c = 2 * math.asin(math.sqrt(a))
        
        return R * c
    
    
    def analyze_location_map_for_polygons(self, file_path, main_window):
        """Analyzuje lokaƒçn√≠ mapu pro detekci polygon≈Ø a extrakci jejich sou≈ôadnic"""
        import cv2
        import numpy as np
        from PIL import Image, ExifTags
        import re
        
        try:
            main_window.update_log(f"üîç Analyzujem polygony v mapƒõ: {os.path.basename(file_path)}")
            
            # Naƒçti obr√°zek
            img = cv2.imread(file_path)
            if img is None:
                return None
                
            # P≈ôeveƒè na grayscale pro lep≈°√≠ detekci
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            
            # Detekce kontur/polygon≈Ø
            # Pou≈æij adaptivn√≠ threshold pro lep≈°√≠ detekci
            thresh = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, 
                                         cv2.THRESH_BINARY_INV, 11, 2)
            
            # Morfologick√© operace pro vyƒçi≈°tƒõn√≠
            kernel = np.ones((3,3), np.uint8)
            cleaned = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, kernel)
            
            # Najdi kontury
            contours, _ = cv2.findContours(cleaned, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            
            # Filtruj kontury podle velikosti a tvaru
            polygons = []
            min_area = 1000  # Minim√°ln√≠ plocha polygonu
            
            for contour in contours:
                area = cv2.contourArea(contour)
                if area < min_area:
                    continue
                    
                # Aproximace polygonu
                epsilon = 0.02 * cv2.arcLength(contour, True)
                approx = cv2.approxPolyDP(contour, epsilon, True)
                
                # Kontrola zda je to rozumn√Ω polygon (3-20 vrchol≈Ø)
                if 3 <= len(approx) <= 20:
                    # P≈ôeveƒè pixel koordin√°ty na GPS sou≈ôadnice
                    gps_polygon = self.convert_pixel_to_gps_coords(approx, file_path, img.shape)
                    if gps_polygon:
                        polygons.append({
                            'points': gps_polygon,
                            'area': area,
                            'center': self.calculate_polygon_center(gps_polygon)
                        })
            
            if polygons:
                main_window.update_log(f"‚úÖ Nalezeno {len(polygons)} polygon≈Ø v mapƒõ")
                return polygons
            else:
                main_window.update_log(f"‚ÑπÔ∏è ≈Ω√°dn√© polygony nenalezeny, pou≈æiju GPS bod")
                return None
                
        except Exception as e:
            main_window.update_log(f"‚ùå Chyba p≈ôi anal√Ωze polygon≈Ø: {e}")
            return None
    
    def convert_pixel_to_gps_coords(self, pixel_points, file_path, img_shape):
        """P≈ôevede pixel sou≈ôadnice na GPS sou≈ôadnice na z√°kladƒõ EXIF dat a kalibrace"""
        try:
            # Z√≠skej GPS sou≈ôadnice z n√°zvu souboru (referenƒçn√≠ bod)
            filename = os.path.basename(file_path)
            gps_match = re.search(r'GPS([0-9.]+)S\+([0-9.]+)V', filename)
            if not gps_match:
                return None
                
            ref_lat = float(gps_match.group(1))
            ref_lon = float(gps_match.group(2))
            
            # Pokus o z√≠sk√°n√≠ mƒõ≈ô√≠tka z EXIF dat
            scale_factor = self.estimate_map_scale(file_path, img_shape)
            
            # P≈ôeveƒè pixel sou≈ôadnice na GPS
            gps_points = []
            img_height, img_width = img_shape[:2]
            
            for point in pixel_points:
                px, py = point[0]
                
                # P≈ôevod pixel ‚Üí metry ‚Üí GPS sou≈ôadnice
                # P≈ôedpokl√°d√°me, ≈æe st≈ôed obr√°zku odpov√≠d√° referenƒçn√≠mu GPS bodu
                center_x, center_y = img_width // 2, img_height // 2
                
                # Vzd√°lenost od st≈ôedu v pixelech
                dx_pixels = px - center_x
                dy_pixels = center_y - py  # Y je obr√°cen√Ω
                
                # P≈ôevod na metry (z√°vis√≠ na mƒõ≈ô√≠tku mapy)
                dx_meters = dx_pixels * scale_factor
                dy_meters = dy_pixels * scale_factor
                
                # P≈ôevod na GPS sou≈ôadnice (p≈ôibli≈æn√Ω v√Ωpoƒçet)
                lat_per_meter = 1.0 / 111320.0  # p≈ôibli≈ænƒõ 1 stupe≈à = 111.32 km
                lon_per_meter = 1.0 / (111320.0 * np.cos(np.radians(ref_lat)))
                
                new_lat = ref_lat + (dy_meters * lat_per_meter)
                new_lon = ref_lon + (dx_meters * lon_per_meter)
                
                gps_points.append((new_lat, new_lon))
            
            return gps_points
            
        except Exception as e:
            return None
    
    def estimate_map_scale(self, file_path, img_shape):
        """Odhadne mƒõ≈ô√≠tko mapy na z√°kladƒõ velikosti obr√°zku a jin√Ωch indik√°tor≈Ø"""
        try:
            # Pokus o detekci mƒõ≈ô√≠tka z textu na mapƒõ pomoc√≠ OCR
            import pytesseract
            from PIL import Image
            
            img = Image.open(file_path)
            text = pytesseract.image_to_string(img, lang='ces+eng')
            
            # Hledej mƒõ≈ô√≠tko v textu (nap≈ô. "1:10000", "100m")
            scale_patterns = [
                r'1:(\d+)',  # mƒõ≈ô√≠tko 1:X
                r'(\d+)\s*m',  # X metr≈Ø
                r'(\d+)\s*km'  # X kilometr≈Ø
            ]
            
            for pattern in scale_patterns:
                matches = re.findall(pattern, text, re.IGNORECASE)
                if matches:
                    scale_value = int(matches[0])
                    if '1:' in pattern:
                        # Mƒõ≈ô√≠tko 1:X znamen√° X metr≈Ø na jednotku
                        return scale_value / max(img_shape[:2])
                    elif 'km' in pattern:
                        return (scale_value * 1000) / max(img_shape[:2])
                    elif 'm' in pattern:
                        return scale_value / max(img_shape[:2])
            
            # Fallback: p≈ôedpokl√°dej standardn√≠ mƒõ≈ô√≠tko podle velikosti obr√°zku
            img_height, img_width = img_shape[:2]
            if max(img_width, img_height) > 2000:
                return 2.0  # 2 metry na pixel pro velk√© obr√°zky
            else:
                return 1.0  # 1 metr na pixel pro men≈°√≠ obr√°zky
                
        except Exception:
            # Fallback mƒõ≈ô√≠tko
            return 1.0
    
    def calculate_polygon_center(self, gps_points):
        """Vypoƒç√≠t√° st≈ôed polygonu"""
        if not gps_points:
            return None
            
        lat_sum = sum(point[0] for point in gps_points)
        lon_sum = sum(point[1] for point in gps_points)
        
        return (lat_sum / len(gps_points), lon_sum / len(gps_points))
    
    def extract_gps_from_file(self, file_path):
        """
        Extrahuje GPS sou≈ôadnice z EXIF dat souboru.
        Optimalizov√°no pro HEIC pomoc√≠ pillow-heif a piexif, s fallbackem na exifread.
        """
        main_window = self.find_main_window()

        # Metoda 1: Pillow + pillow-heif + piexif (nejspolehlivƒõj≈°√≠)
        try:
            from PIL import Image
            import piexif
            try:
                # Import je nutn√Ω pro automatickou registraci HEIF/HEIC podpory v Pillow
                import pillow_heif
                pillow_heif.register_heif_opener()
            except ImportError:
                if file_path.lower().endswith(('.heic', '.heif')) and main_window:
                    main_window.update_log("‚ö†Ô∏è Pro HEIC je nutn√© nainstalovat: pip install pillow-heif")
            
            with Image.open(file_path) as img:
                if "exif" in img.info:
                    exif_dict = piexif.load(img.info["exif"])
                    if "GPS" in exif_dict and exif_dict["GPS"]:
                        gps_data = exif_dict["GPS"]
                        lat_dms = gps_data.get(piexif.GPSIFD.GPSLatitude)
                        lon_dms = gps_data.get(piexif.GPSIFD.GPSLongitude)
                        lat_ref_b = gps_data.get(piexif.GPSIFD.GPSLatitudeRef)
                        lon_ref_b = gps_data.get(piexif.GPSIFD.GPSLongitudeRef)

                        if lat_dms and lon_dms and lat_ref_b and lon_ref_b:
                            lat = self._piexif_dms_to_degrees(lat_dms)
                            lon = self._piexif_dms_to_degrees(lon_dms)

                            if lat_ref_b == b'S': lat = -lat
                            if lon_ref_b == b'W': lon = -lon
                            
                            return (lat, lon)
        except Exception as e:
            if main_window:
                main_window.update_log(f"‚ÑπÔ∏è Pillow/piexif selhalo pro {os.path.basename(file_path)}: {e}")
            pass

        # Metoda 2: exifread (fallback pro ostatn√≠ form√°ty)
        try:
            import exifread
            with open(file_path, 'rb') as f:
                tags = exifread.process_file(f, details=False)
                if 'GPS GPSLatitude' in tags and 'GPS GPSLongitude' in tags:
                    lat_dms_exifread = tags['GPS GPSLatitude'].values
                    lon_dms_exifread = tags['GPS GPSLongitude'].values
                    
                    lat = self._dms_to_decimal(lat_dms_exifread)
                    lon = self._dms_to_decimal(lon_dms_exifread)

                    lat_ref_tag = tags.get('GPS GPSLatitudeRef')
                    lon_ref_tag = tags.get('GPS GPSLongitudeRef')

                    if lat_ref_tag and str(lat_ref_tag.values) == 'S': lat = -lat
                    if lon_ref_tag and str(lon_ref_tag.values) == 'W': lon = -lon

                    return (lat, lon)
        except Exception as e:
            if main_window:
                main_window.update_log(f"‚ÑπÔ∏è exifread selhal pro {os.path.basename(file_path)}: {e}")
            pass

        return None
    def _convert_to_degrees(self, value):
        """P≈ôevede GPS sou≈ôadnice z EXIF form√°tu na desetinn√© stupnƒõ"""
        try:
            if isinstance(value, (list, tuple)) and len(value) >= 3:
                d = float(value[0])
                m = float(value[1]) 
                s = float(value[2])
                return d + (m / 60.0) + (s / 3600.0)
            return float(value)
        except:
            return 0.0
    
    def _dms_to_decimal(self, dms_values):
        """P≈ôevede DMS hodnoty na desetinn√© stupnƒõ"""
        try:
            if len(dms_values) >= 3:
                d = float(dms_values[0].num) / float(dms_values[0].den)
                m = float(dms_values[1].num) / float(dms_values[1].den)
                s = float(dms_values[2].num) / float(dms_values[2].den)
                return d + (m / 60.0) + (s / 3600.0)
            return 0.0
        except:
            return 0.0

    # Nahraƒète tuto metodu ve t≈ô√≠dƒõ MissingPhotosWidget v pdf_generator_window.py
    
    def get_available_location_maps(self, main_window):
        import os
        from pathlib import Path
        import re
        from PIL import Image
    
        location_path = main_window.edit_location_path.text().strip()
        if not os.path.isdir(location_path):
            return []
    
        maps = []
        map_extensions = {'.png'}
        gps_pattern = re.compile(r'GPS([0-9.]+)S\+([0-9.]+)V')
        zoom_pattern = re.compile(r'\+Z(\d+)\+')
    
        folders_to_search = [os.path.join(location_path, "Nerozt≈ô√≠dƒõn√©"), location_path]
        processed_files = set()
    
        for folder_path in folders_to_search:
            if not os.path.isdir(folder_path): continue
            for filename in os.listdir(folder_path):
                full_file_path = os.path.join(folder_path, filename)
                if full_file_path in processed_files or not os.path.isfile(full_file_path) or Path(filename).suffix.lower() not in map_extensions:
                    continue
                processed_files.add(full_file_path)
    
                gps_match = gps_pattern.search(filename)
                zoom_match = zoom_pattern.search(filename)
                
                if gps_match and zoom_match:
                    try:
                        with Image.open(full_file_path) as img:
                            width, height = img.size
                            polygons = self.read_polygon_from_metadata(full_file_path, main_window)
                        
                        map_data = {
                            'location_id': filename.split('+')[0],
                            'gps_point': (float(gps_match.group(1)), float(gps_match.group(2))),
                            'filename': filename,
                            'filepath': full_file_path,
                            'zoom_level': int(zoom_match.group(1)),
                            'width': width,
                            'height': height,
                            'has_polygons': bool(polygons),
                            'polygons': polygons if polygons else [],
                            'description': self.parse_location_info(filename).get('description', ''),
                            'number_display': self.parse_location_info(filename).get('number_display', ''),
                            'id': self.parse_location_info(filename).get('id', filename.split('+')[0]),
                        }
                        maps.append(map_data)
                    except Exception as e:
                        if main_window: main_window.update_log(f"‚ùå Chyba p≈ôi zpracov√°n√≠ mapy {filename}: {e}")
        return maps


    def _check_opencv_availability(self):
        """Kontroluje dostupnost OpenCV"""
        try:
            import cv2
            import numpy as np
            return True
        except ImportError:
            return False
    
    def detect_polygon_indicators_simple(self, filename, file_path, main_window):
        """Jednoduch√° heuristick√° detekce indik√°tor≈Ø polygon≈Ø bez OpenCV"""
        try:
            # Heuristika 1: Kl√≠ƒçov√° slova v n√°zvu souboru
            polygon_keywords = [
                'polygon', 'area', 'zone', 'region', 'boundary', 'outline',
                'oblast', 'z√≥na', 'hranice', 'obvod', '√∫zem√≠', 'perimeter'
            ]
            
            filename_lower = filename.lower()
            for keyword in polygon_keywords:
                if keyword in filename_lower:
                    main_window.update_log(f"üîç Detekce polygonu z n√°zvu: {keyword}")
                    return True
            
            # Heuristika 2: Velikost souboru (polygonov√© mapy b√Ωvaj√≠ vƒõt≈°√≠)
            file_size = os.path.getsize(file_path)
            if file_size > 2 * 1024 * 1024:  # Vƒõt≈°√≠ ne≈æ 2MB
                main_window.update_log(f"üîç Velk√Ω soubor ({file_size//1024//1024}MB) - mo≈æn√Ω polygon")
                return True
            
            # Heuristika 3: Anal√Ωza bez OpenCV pomoc√≠ PIL
            return self.analyze_image_basic_pil(file_path, main_window)
            
        except Exception as e:
            main_window.update_log(f"‚ö†Ô∏è Chyba p≈ôi heuristick√© detekci: {e}")
            return False
    
    def analyze_image_basic_pil(self, file_path, main_window):
        """Z√°kladn√≠ anal√Ωza obr√°zku pomoc√≠ PIL"""
        try:
            from PIL import Image
            import colorsys
            
            with Image.open(file_path) as img:
                # Zmen≈°i obr√°zek pro rychlej≈°√≠ anal√Ωzu
                img_small = img.resize((200, 200))
                
                # P≈ôeveƒè na RGB pokud nen√≠
                if img_small.mode != 'RGB':
                    img_small = img_small.convert('RGB')
                
                # Anal√Ωza barevn√© distribuce
                colors = img_small.getcolors(maxcolors=50000)
                if not colors:
                    return False
                
                # Hledej v√Ωrazn√© barevn√© bloky (mo≈æn√© polygony)
                total_pixels = img_small.width * img_small.height
                color_blocks = []
                
                for count, color in colors:
                    if count > total_pixels * 0.05:  # Barva zab√≠r√° v√≠c ne≈æ 5%
                        # Kontrola jestli nen√≠ ≈°ed√° (mapa na pozad√≠)
                        r, g, b = color[:3]
                        if not (abs(r-g) < 30 and abs(g-b) < 30 and abs(r-b) < 30):
                            color_blocks.append((count, color))
                
                # Pokud je v√≠c ne≈æ 2 v√Ωrazn√© barevn√© bloky, pravdƒõpodobnƒõ polygon
                if len(color_blocks) >= 2:
                    main_window.update_log(f"üé® Detekce {len(color_blocks)} barevn√Ωch blok≈Ø - mo≈æn√Ω polygon")
                    return True
                    
            return False
            
        except Exception as e:
            main_window.update_log(f"‚ö†Ô∏è Chyba PIL anal√Ωzy: {e}")
            return False
    
    def analyze_location_map_for_polygons_opencv(self, file_path, main_window):
        """Pokroƒçil√° anal√Ωza pomoc√≠ OpenCV - pouze pokud je dostupn√Ω"""
        try:
            import cv2
            import numpy as np
            
            main_window.update_log(f"üî¨ OpenCV anal√Ωza: {os.path.basename(file_path)}")
            
            # Naƒçti obr√°zek
            img = cv2.imread(file_path)
            if img is None:
                return None
                
            # P≈ôeveƒè na grayscale
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            
            # Detekce hran
            edges = cv2.Canny(gray, 50, 150, apertureSize=3)
            
            # Najdi kontury
            contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            
            polygons = []
            min_area = 1000
            
            for contour in contours:
                area = cv2.contourArea(contour)
                if area < min_area:
                    continue
                    
                # Aproximace polygonu
                epsilon = 0.02 * cv2.arcLength(contour, True)
                approx = cv2.approxPolyDP(contour, epsilon, True)
                
                if 3 <= len(approx) <= 20:
                    # P≈ôeveƒè na GPS sou≈ôadnice (zjednodu≈°enƒõ)
                    gps_polygon = self.convert_pixels_to_gps_simple(approx, file_path, img.shape)
                    if gps_polygon:
                        polygons.append({
                            'points': gps_polygon,
                            'area': area,
                            'center': self.calculate_polygon_center(gps_polygon)
                        })
            
            if polygons:
                main_window.update_log(f"‚úÖ OpenCV: nalezeno {len(polygons)} polygon≈Ø")
                
            return polygons if polygons else None
            
        except Exception as e:
            main_window.update_log(f"‚ùå Chyba OpenCV anal√Ωzy: {e}")
            return None
    
    def convert_pixels_to_gps_simple(self, pixel_points, file_path, img_shape):
        """Jednoduch√Ω p≈ôevod pixel ‚Üí GPS bez slo≈æit√© kalibrace"""
        try:
            filename = os.path.basename(file_path)
            gps_match = re.search(r'GPS([0-9.]+)S\+([0-9.]+)V', filename)
            if not gps_match:
                return None
                
            ref_lat = float(gps_match.group(1))
            ref_lon = float(gps_match.group(2))
            
            # Jednoduch√© odhady - p≈ôedpokl√°d√°me standardn√≠ mƒõ≈ô√≠tko
            img_height, img_width = img_shape[:2]
            
            # Odhadovan√© mƒõ≈ô√≠tko: 1 pixel = 2 metry (typick√© pro lokaƒçn√≠ mapy)
            meters_per_pixel = 2.0
            
            gps_points = []
            center_x, center_y = img_width // 2, img_height // 2
            
            for point in pixel_points:
                px, py = point[0]
                
                # Vzd√°lenost od st≈ôedu v pixelech ‚Üí metry
                dx_meters = (px - center_x) * meters_per_pixel  
                dy_meters = (center_y - py) * meters_per_pixel  # Y je obr√°cen√Ω
                
                # P≈ôevod na GPS (zjednodu≈°en√Ω)
                lat_per_meter = 1.0 / 111320.0
                lon_per_meter = 1.0 / (111320.0 * abs(np.cos(np.radians(ref_lat))))
                
                new_lat = ref_lat + (dy_meters * lat_per_meter)
                new_lon = ref_lon + (dx_meters * lon_per_meter)
                
                gps_points.append((new_lat, new_lon))
            
            return gps_points
            
        except Exception as e:
            return None
    # Nahraƒète tuto metodu ve t≈ô√≠dƒõ MissingPhotosWidget v pdf_generator_window.py
    
    def calculate_nearest_locations(self, photo_coords, location_maps):
        if not photo_coords or not location_maps: return []
    
        main_window = self.find_main_window()
        avg_lat = sum(pc[1][0] for pc in photo_coords) / len(photo_coords)
        avg_lon = sum(pc[1][1] for pc in photo_coords) / len(photo_coords)
        avg_point_gps = (avg_lat, avg_lon)
    
        if main_window: main_window.update_log(f"üõ∞Ô∏è Pr≈Ømƒõrn√° GPS pozice fotek: {avg_lat:.5f}, {avg_lon:.5f}")
    
        maps_inside_polygon = []
        for map_data in location_maps:
            if map_data.get('has_polygons'):
                try:
                    map_center_gps = map_data['gps_point']
                    map_zoom = map_data['zoom_level']
                    map_width = map_data['width']
                    map_height = map_data['height']
                    
                    photo_pixel_x, photo_pixel_y = self.gps_to_pixel(
                        avg_point_gps[0], avg_point_gps[1],
                        map_center_gps[0], map_center_gps[1],
                        map_zoom, map_width, map_height
                    )
                    
                    pixel_polygon = map_data['polygons'][0]['points']
                    
                    if self.is_point_in_polygon(photo_pixel_x, photo_pixel_y, pixel_polygon):
                        if main_window: main_window.update_log(f"‚úîÔ∏è PRIORITN√ç SHODA: Fotka je uvnit≈ô polygonu mapy {map_data['filename']}.")
                        maps_inside_polygon.append((0.0, map_data['location_id'], map_data['filename']))
                except Exception as e:
                    if main_window: main_window.update_log(f" Chyba p≈ôi pixelov√© anal√Ωze pro {map_data['filename']}: {e}")
    
        if maps_inside_polygon:
            maps_inside_polygon.sort(key=lambda x: x[1])
            return [(loc_id, filename, dist) for dist, loc_id, filename in maps_inside_polygon]
    
        if main_window: main_window.update_log("‚ÑπÔ∏è ≈Ω√°dn√° shoda uvnit≈ô polygonu. Poƒç√≠t√°m vzd√°lenosti.")
        
        all_distances = []
        for map_data in location_maps:
            dist = float('inf')
            if map_data.get('has_polygons'):
                try:
                    map_center_gps = map_data['gps_point']; map_zoom = map_data['zoom_level']
                    map_width = map_data['width']; map_height = map_data['height']
                    
                    photo_pixel_x, photo_pixel_y = self.gps_to_pixel(avg_point_gps[0], avg_point_gps[1], map_center_gps[0], map_center_gps[1], map_zoom, map_width, map_height)
                    pixel_polygon = map_data['polygons'][0]['points']
                    
                    pixel_dist = self.point_to_polygon_dist((photo_pixel_x, photo_pixel_y), pixel_polygon)
                    meters_per_pixel = self.get_pixel_to_meter_ratio(map_center_gps[0], map_zoom)
                    dist = (pixel_dist * meters_per_pixel) / 1000.0
                except Exception:
                    dist = float('inf')
            
            if dist == float('inf'):
                map_gps = map_data.get('gps_point')
                if map_gps:
                    dist = self.haversine_distance(avg_lat, avg_lon, map_gps[0], map_gps[1])
    
            if dist != float('inf'):
                all_distances.append((dist, map_data['location_id'], map_data['filename']))
    
        all_distances.sort(key=lambda x: x[0])
        return [(loc_id, filename, dist) for dist, loc_id, filename in all_distances[:5]]

    
    def gps_to_pixel(self, target_lat, target_lon, center_lat, center_lon, zoom, map_width_px, map_height_px):
        import math
        def deg2num(lat_deg, lon_deg, zoom):
            lat_rad = math.radians(lat_deg)
            n = 2.0 ** zoom
            xtile = (lon_deg + 180.0) / 360.0 * n
            ytile = (1.0 - math.asinh(math.tan(lat_rad)) / math.pi) / 2.0 * n
            return (xtile, ytile)
    
        center_tile_x, center_tile_y = deg2num(center_lat, center_lon, zoom)
        target_tile_x, target_tile_y = deg2num(target_lat, target_lon, zoom)
    
        pixel_dx = (target_tile_x - center_tile_x) * 256
        pixel_dy = (target_tile_y - center_tile_y) * 256
    
        pixel_x = (map_width_px / 2) + pixel_dx
        pixel_y = (map_height_px / 2) + pixel_dy
        return pixel_x, pixel_y
    
    def get_pixel_to_meter_ratio(self, latitude, zoom):
        import math
        try:
            lat_rad = math.radians(latitude)
            meters_per_pixel = 156543.03 * math.cos(lat_rad) / (2 ** zoom)
            return meters_per_pixel
        except Exception:
            return 1.0
    
    def is_point_in_polygon(self, x, y, polygon_points):
        n = len(polygon_points)
        if n < 3:
            return False
        inside = False
        p1x, p1y = polygon_points[0]
        for i in range(n + 1):
            p2x, p2y = polygon_points[i % n]
            if y > min(p1y, p2y):
                if y <= max(p1y, p2y):
                    if x <= max(p1x, p2x):
                        if p1y != p2y:
                            xinters = (y - p1y) * (p2x - p1x) / (p2y - p1y) + p1x
                        if p1x == p2x or x <= xinters:
                            inside = not inside
            p1x, p1y = p2x, p2y
        return inside
    
    def point_to_segment_dist(self, p, a, b):
        import math
        px, py = p
        ax, ay = a
        bx, by = b
        abx, aby = bx - ax, by - ay
        ab2 = abx**2 + aby**2
        if ab2 == 0:
            return math.hypot(px - ax, py - ay)
        t = ((px - ax) * abx + (py - ay) * aby) / ab2
        t = max(0, min(1, t))
        closest_x = ax + t * abx
        closest_y = ay + t * aby
        return math.hypot(px - closest_x, py - closest_y)
    
    def point_to_polygon_dist(self, point, polygon_points):
        min_dist = float('inf')
        if len(polygon_points) < 2:
            return min_dist
        for i in range(len(polygon_points)):
            p1 = polygon_points[i]
            p2 = polygon_points[(i + 1) % len(polygon_points)]
            dist = self.point_to_segment_dist(point, p1, p2)
            if dist < min_dist:
                min_dist = dist
        return min_dist


    def distance_to_polygon_edge(self, point, polygon):
        """
        Vypoƒç√≠t√° nejkrat≈°√≠ vzd√°lenost od bodu k nejbli≈æ≈°√≠ hranƒõ polygonu v km.
        """
        min_dist = float('inf')
        for i in range(len(polygon)):
            p1 = polygon[i]
            p2 = polygon[(i + 1) % len(polygon)]
            dist = self.distance_point_to_line_segment(point, p1, p2)
            if dist < min_dist:
                min_dist = dist
        return min_dist


    def show_location_selection_dialog(self, photo_numbers, recommendations):
        """Zobraz√≠ dialog pro v√Ωbƒõr doporuƒçen√© lokace"""
        dialog = QDialog(self)
        dialog.setWindowTitle("Vyberte lokaci")
        dialog.setMinimumSize(600, 400)  # Vƒõt≈°√≠ ≈°√≠≈ôka pro dlouh√© n√°zvy
        
        layout = QVBoxLayout(dialog)
        
        label = QLabel(f"Doporuƒçen√© lokace pro {len(photo_numbers)} fotek:")
        layout.addWidget(label)
        
        list_widget = QListWidget()
        for location_id, filename, distance in recommendations:
            # Zkr√°cen√≠ dlouh√©ho n√°zvu pro zobrazen√≠
            display_name = location_id
            if len(display_name) > 40:
                display_name = display_name[:37] + "..."
            
            item_text = f"{display_name} - {distance:.1f} km"
            item = QListWidgetItem(item_text)
            item.setData(Qt.UserRole, location_id)
            item.setToolTip(f"Cel√Ω n√°zev: {location_id}\nSoubor: {filename}")
            list_widget.addItem(item)
            
        list_widget.setCurrentRow(0)
        layout.addWidget(list_widget)
        
        buttons_layout = QHBoxLayout()
        btn_ok = QPushButton("P≈ôi≈ôadit")
        btn_cancel = QPushButton("Zru≈°it")
        
        btn_ok.clicked.connect(dialog.accept)
        btn_cancel.clicked.connect(dialog.reject)
        
        buttons_layout.addWidget(btn_ok)
        buttons_layout.addWidget(btn_cancel)
        layout.addLayout(buttons_layout)
        
        if dialog.exec() == QDialog.Accepted:
            selected_items = list_widget.selectedItems()
            if selected_items:
                location_id = selected_items[0].data(Qt.UserRole)
                self.assign_photos_to_location_by_text_id(photo_numbers, location_id)
                
    def assign_photos_to_location_by_text_id(self, photo_numbers, location_id):
        """P≈ôi≈ôad√≠ fotky k lokaci s textov√Ωm ID - OPRAVENO pro spr√°vn√© sluƒçov√°n√≠ interval≈Ø a form√°t JSON"""
        main_window = self.find_main_window()
        if not main_window:
            return
        
        try:
            # DEBUG: Zobraz co se dƒõje
            main_window.update_log(f"üîÑ P≈ôi≈ôazuji fotky {photo_numbers} k lokaci '{location_id}'")
            
            config_text = main_window.location_config_text.toPlainText().strip()
            if config_text:
                data = json.loads(config_text)
            else:
                data = {}
            
            # Parsov√°n√≠ ƒç√≠seln√©ho ID z textov√©ho ID
            numeric_location_id = self.extract_numeric_location_id(location_id)
            if numeric_location_id is None:
                main_window.update_log(f"‚ùå Nepoda≈ôilo se naj√≠t ƒç√≠seln√© ID pro: {location_id}")
                QMessageBox.warning(self, "Chyba", f"Nepoda≈ôilo se naj√≠t ƒç√≠seln√© ID pro lokaci: {location_id}")
                return
            
            main_window.update_log(f"‚úÖ P≈ôevedeno '{location_id}' ‚Üí ƒç√≠seln√© ID: {numeric_location_id}")
            
            # Konverze na string kl√≠ƒç pro JSON
            loc_key = str(numeric_location_id)
            main_window.update_log(f"üìù Kl√≠ƒç pro JSON: '{loc_key}'")
            
            # Z√≠skej existuj√≠c√≠ ƒç√≠sla v lokaci
            existing_numbers = self.get_existing_numbers_for_location(data.get(loc_key, []))
            main_window.update_log(f"üìã Existuj√≠c√≠ ƒç√≠sla v lokaci {loc_key}: {sorted(existing_numbers) if existing_numbers else '≈æ√°dn√°'}")
            
            # Slouƒç s nov√Ωmi ƒç√≠sly
            all_numbers = existing_numbers.union(set(photo_numbers))
            main_window.update_log(f"üìä V≈°echna ƒç√≠sla po slouƒçen√≠: {sorted(all_numbers)}")
            
            # OPRAVENO: Vytvo≈ô optim√°ln√≠ intervaly
            intervals = self.merge_numbers_to_intervals(sorted(list(all_numbers)))
            main_window.update_log(f"üéØ Vytvo≈ôen√© intervaly: {intervals}")
            
            # Aktualizuj JSON data
            data[loc_key] = intervals
            
            # OPRAVENO: Pou≈æij spr√°vn√© kompaktn√≠ form√°tov√°n√≠ (jedno≈ô√°dkov√Ω)
            formatted_json = self.format_json_compact_fixed(data)
            
            # Aktualizuj editor
            main_window.location_config_text.setPlainText(formatted_json)
            
            # Aktualizuj seznam nep≈ôi≈ôazen√Ωch fotek
            main_window.update_missing_photos_list()
            
            main_window.update_log(f"‚úÖ √öspƒõ≈°nƒõ p≈ôi≈ôazeno do lokace {loc_key}")
            
            # Zobraz √∫spƒõ≈°n√© dokonƒçen√≠
            added_count = len(set(photo_numbers) - existing_numbers)
            QMessageBox.information(
                self,
                "√öspƒõch",
                f"‚úÖ P≈ôi≈ôazeno {len(photo_numbers)} fotek do lokace {numeric_location_id}\n"
                f"Textov√© ID: {location_id}\n"
                f"Fotky: {', '.join(map(str, sorted(photo_numbers)))}\n"
                f"Novƒõ p≈ôid√°no: {added_count} fotek\n"
                f"Celkem ƒç√≠sel v lokaci: {len(all_numbers)}\n"
                f"Intervaly: {', '.join(intervals)}"
            )
        
        except Exception as e:
            main_window.update_log(f"‚ùå Chyba p≈ôi p≈ôi≈ôazov√°n√≠: {e}")
            QMessageBox.critical(self, "Chyba", f"Nepoda≈ôilo se aktualizovat konfiguraci:\n{str(e)}")

    def format_json_compact_fixed(self, data):
        """Form√°tuje JSON v kompaktn√≠m stylu - ka≈æd√° lokace na jeden ≈ô√°dek se zarovn√°n√≠m"""
        if not data:
            return "{}"
        
        lines = ["{"]
        keys_list = list(data.keys())
        
        # Se≈ôazen√≠ kl√≠ƒç≈Ø numericky
        try:
            keys_list.sort(key=lambda x: int(x))
        except ValueError:
            keys_list.sort() # Fallback na alfabetick√© ≈ôazen√≠
        
        # Najdi nejdel≈°√≠ kl√≠ƒç pro zarovn√°n√≠
        max_key_len = max(len(f'"{key}":') for key in keys_list)
        
        for i, key in enumerate(keys_list):
            value = data[key]
            value_json = json.dumps(value, ensure_ascii=False, separators=(',', ' '))
            comma = "," if i < len(keys_list) - 1 else ""
            
            # Zarovn√°n√≠ kl√≠ƒç≈Ø pro lep≈°√≠ ƒçitelnost
            key_padded = f'"{key}":'.ljust(max_key_len + 2)
            lines.append(f"  {key_padded} {value_json}{comma}")
        
        lines.append("}")
        return "\n".join(lines)


    def extract_numeric_location_id(self, location_text_id):
        """Extrahuje ƒç√≠seln√© ID lokace z textov√©ho ID - OPRAVENO"""
        import re
        
        # Debug v√Ωpis
        main_window = self.find_main_window()
        if main_window:
            main_window.update_log(f"üîç Extrahuji ƒç√≠seln√© ID z: {location_text_id}")
        
        # Metoda 1: Hledej 5-ti m√≠stn√© ƒç√≠slo za posledn√≠m +
        parts = location_text_id.split('+')
        if len(parts) >= 2:
            # Projdi ƒç√°sti odzadu a hledej 5-ti m√≠stn√© ƒç√≠slo
            for part in reversed(parts):
                # Odstra≈à p≈ô√≠ponu souboru pokud existuje
                part_clean = part.split('.')[0] if '.' in part else part
                # Hledej 5-ti m√≠stn√© ƒç√≠slo na konci ƒç√°sti
                match = re.search(r'(\d{5})$', part_clean)
                if match:
                    numeric_id = int(match.group(1))
                    if main_window:
                        main_window.update_log(f"‚úÖ Nalezeno ƒç√≠seln√© ID: {numeric_id}")
                    return numeric_id
        
        # Metoda 2: Pokud je cel√Ω text jen ƒç√≠slo
        if location_text_id.strip().isdigit():
            numeric_id = int(location_text_id.strip())
            if main_window:
                main_window.update_log(f"‚úÖ P≈ô√≠m√© ƒç√≠seln√© ID: {numeric_id}")
            return numeric_id
        
        # Metoda 3: Hledej jak√©koliv ƒç√≠slo v n√°zvu lokace
        first_part = parts[0] if parts else location_text_id
        numbers = re.findall(r'\d+', first_part)
        if numbers:
            # Vezmi nejvƒõt≈°√≠ ƒç√≠slo (pravdƒõpodobnƒõ ID lokace)
            numeric_id = int(max(numbers, key=lambda x: int(x)))
            if main_window:
                main_window.update_log(f"‚úÖ ID z n√°zvu lokace: {numeric_id}")
            return numeric_id
        
        # OPRAVEN√ù fallback: Najdi nejvy≈°≈°√≠ existuj√≠c√≠ ID a p≈ôidej 1
        if main_window:
            try:
                config_text = main_window.location_config_text.toPlainText().strip()
                if config_text:
                    data = json.loads(config_text)
                    existing_ids = [int(k) for k in data.keys() if k.isdigit()]
                    if existing_ids:
                        new_id = max(existing_ids) + 1
                        main_window.update_log(f"‚ö†Ô∏è Pou≈æito nov√© ID: {new_id} (max existuj√≠c√≠ch + 1)")
                        return new_id
            except:
                pass
        
        # √öpln√Ω fallback
        if main_window:
            main_window.update_log(f"‚ö†Ô∏è Pou≈æito v√Ωchoz√≠ ID: 999 pro: {location_text_id}")
        return 999

    def extract_numeric_location_id_from_filename(self, filename):
        """Extrahuje ƒç√≠seln√© ID lokace z CEL√âHO n√°zvu souboru lokaƒçn√≠ mapy"""
        import re
        
        main_window = self.find_main_window()
        if main_window:
            main_window.update_log(f"üîç Extrahuji ƒç√≠seln√© ID z cel√©ho souboru: {filename}")
        
        try:
            # Rozdƒõlen√≠ podle '+' znak≈Ø
            parts = filename.split('+')
            if len(parts) < 2:
                return None
            
            # Posledn√≠ ƒç√°st p≈ôed p≈ô√≠ponou (nap≈ô. "00026.png" ‚Üí "00026")
            last_part = parts[-1]
            base_name = last_part.split('.')[0] if '.' in last_part else last_part
            
            # Hled√°n√≠ ƒç√≠seln√© ƒç√°sti na konci
            match = re.search(r'(\d{1,5})$', base_name)
            if match:
                numeric_id = int(match.group(1))
                if main_window:
                    main_window.update_log(f"‚úÖ Nalezeno ƒç√≠seln√© ID: {numeric_id} z ƒç√°sti '{base_name}'")
                return numeric_id
            
            if main_window:
                main_window.update_log(f"‚ùå Nenalezeno ƒç√≠seln√© ID v ƒç√°sti '{base_name}'")
            return None
            
        except Exception as e:
            if main_window:
                main_window.update_log(f"‚ùå Chyba p≈ôi extrakci ID: {e}")
            return None
    
    
    def get_existing_numbers_for_location(self, intervals_list):
        """Rozbal√≠ seznam interval≈Ø na mno≈æinu ƒç√≠sel"""
        numbers = set()
        
        for item in intervals_list:
            item_str = str(item).strip()
            if not item_str:
                continue
                
            if '-' in item_str:
                try:
                    start_str, end_str = item_str.split('-', 1)
                    start_num = int(start_str.strip())
                    end_num = int(end_str.strip())
                    if start_num > end_num:
                        start_num, end_num = end_num, start_num
                    numbers.update(range(start_num, end_num + 1))
                except ValueError:
                    continue
            else:
                try:
                    numbers.add(int(item_str))
                except ValueError:
                    continue
                    
        return numbers
    
    def merge_numbers_to_intervals(self, numbers):
        """Spoj√≠ ƒç√≠sla do interval≈Ø (nap≈ô. [1,2,3,5] -> ["1-3", "5"]) - OVƒö≈òENO"""
        if not numbers:
            return []
        
        # Se≈ôaƒè a odstra≈à duplicity
        numbers = sorted(set(numbers))
        intervals = []
        
        start = numbers[0]
        end = numbers[0]
        
        for n in numbers[1:]:
            if n == end + 1:  # Navazuj√≠c√≠ ƒç√≠slo
                end = n
            else:  # Mezera v sekvenci
                if start == end:
                    intervals.append(str(start))
                else:
                    intervals.append(f"{start}-{end}")
                start = n
                end = n
        
        # Zpracov√°n√≠ posledn√≠ho intervalu
        if start == end:
            intervals.append(str(start))
        else:
            intervals.append(f"{start}-{end}")
        
        return intervals

    def format_json_compact(self, data):
        """Form√°tuje JSON kompaktnƒõ - ka≈æd√° lokace na jeden ≈ô√°dek"""
        if not data:
            return "{}"
        
        lines = ["{"]
        keys_list = list(data.keys())
        
        # Se≈ôazen√≠ kl√≠ƒç≈Ø numericky
        try:
            keys_list.sort(key=lambda x: int(x))
        except ValueError:
            keys_list.sort()  # Fallback na alfabetick√© ≈ôazen√≠
        
        for i, key in enumerate(keys_list):
            value = data[key]
            value_json = json.dumps(value, ensure_ascii=False, separators=(',', ': '))
            comma = "," if i < len(keys_list) - 1 else ""
            key_padded = f'"{key}":'.ljust(6)  # Zarovn√°n√≠ kl√≠ƒç≈Ø
            lines.append(f"  {key_padded} {value_json}{comma}")
        
        lines.append("}")
        return "\n".join(lines)

    def assign_photos_to_location(self, photo_numbers, location_id):
        """P≈ôi≈ôad√≠ fotky k vybran√© lokaci"""
        main_window = self.find_main_window()
        if not main_window:
            return

        try:
            config_text = main_window.location_config_text.toPlainText().strip()
            if config_text:
                data = json.loads(config_text)
            else:
                data = {}

            loc_key = str(location_id)
            if loc_key not in data:
                data[loc_key] = []

            # P≈ôidej fotky
            data[loc_key].extend([str(num) for num in photo_numbers])

            # Aktualizuj JSON
            formatted_json = json.dumps(data, indent=2, ensure_ascii=False)
            main_window.location_config_text.setPlainText(formatted_json)
            main_window.update_missing_photos_list()

            QMessageBox.information(
                self, 
                "√öspƒõch", 
                f"P≈ôi≈ôazeno {len(photo_numbers)} fotek do lokace {location_id}"
            )

        except Exception as e:
            QMessageBox.critical(self, "Chyba", f"Nepoda≈ôilo se aktualizovat konfiguraci:\n{str(e)}")

    def find_main_window(self):
        """Najde hlavn√≠ okno aplikace"""
        parent = self.parent()
        while parent:
            if hasattr(parent, 'location_config_text'):
                return parent
            parent = parent.parent()
        return None

    def update_missing_photos(self, folder_path, json_numbers, crop_status=None):
        """
        Aktualizuje seznam fotek, kter√© NEMAJ√ç P≈òI≈òAZENOU LOKACI.
        Pokud je json_numbers pr√°zdn√Ω, zobraz√≠ v≈°echny fotky.
        """
        self.list_widget.clear()
        if crop_status is None:
            crop_status = {}
    
        if not folder_path or not os.path.isdir(folder_path):
            self.list_widget.addItem("‚ùå Slo≈æka neexistuje nebo nen√≠ zad√°na")
            self.info_label.setText("Zkontrolujte cestu k fotk√°m ƒçty≈ôl√≠stk≈Ø")
            return
    
        try:
            # Z√≠sk√°n√≠ v≈°ech fotek ze slo≈æky
            files = os.listdir(folder_path)
            photo_extensions = {'.jpg', '.jpeg', '.png', '.heic', '.heif', '.tiff', '.tif', '.bmp'}
            photos_in_folder = set()
            invalid_files = []
    
            for filename in files:
                ext = os.path.splitext(filename)[1].lower()
                if ext in photo_extensions:
                    try:
                        number_part = filename.split('+')[0]
                        photo_number = int(number_part)
                        photos_in_folder.add(photo_number)
                    except (ValueError, IndexError):
                        invalid_files.append(filename)
    
            # ‚úÖ NOV√â: Rozli≈°en√≠ re≈æim≈Ø zobrazen√≠
            if not json_numbers:  # Pr√°zdn√Ω seznam = zobraz v≈°echny fotky
                photos_to_display = photos_in_folder
                mode_text = "v≈°echny fotky"
            else:  # Nepr√°zdn√Ω seznam = zobraz jen fotky bez lokace
                json_numbers_set = set(json_numbers)
                photos_to_display = photos_in_folder - json_numbers_set
                mode_text = "fotky bez lokace"
    
            # Zobrazen√≠ v√Ωsledk≈Ø
            if not photos_in_folder:
                self.list_widget.addItem("‚ÑπÔ∏è Ve slo≈æce nejsou ≈æ√°dn√© fotky ƒçty≈ôl√≠stk≈Ø")
                self.info_label.setText("Slo≈æka je pr√°zdn√° nebo neobsahuje platn√© soubory")
            elif not photos_to_display and json_numbers:  # Jen kdy≈æ filtrujeme podle lokac√≠
                self.list_widget.addItem("‚úÖ V≈°echny fotky maj√≠ p≈ôi≈ôazenou lokaci")
                self.info_label.setText(f"Celkem {len(photos_in_folder)} fotek ‚Äì v≈°echny p≈ôi≈ôazeny v lokac√≠ch")
            else:
                # P≈ôid√°n√≠ fotek do seznamu
                for photo_num in sorted(photos_to_display):
                    is_cropped = crop_status.get(str(photo_num), False)
                    icon = "‚úÇÔ∏è" if is_cropped else "üñºÔ∏è"
                    item = QListWidgetItem(f"{icon} {photo_num}")
                    crop_tooltip_text = "O≈ôezan√°" if is_cropped else "Neupraven√°"
    
                    # ‚úÖ NOV√â: R≈Øzn√Ω tooltip podle re≈æimu
                    if not json_numbers:
                        tooltip_detail = "Zobrazeny v≈°echny fotky"
                    else:
                        tooltip_detail = "Nem√° p≈ôi≈ôazenou lokaci"
    
                    item.setToolTip(f"Fotka ƒç√≠slo {photo_num} ({crop_tooltip_text})\n{tooltip_detail}.")
                    self.list_widget.addItem(item)
    
                # ‚úÖ NOV√â: R≈Øzn√Ω info text podle re≈æimu
                if not json_numbers:
                    self.info_label.setText(f"Zobrazeno: {len(photos_to_display)} z {len(photos_in_folder)} fotek (v≈°echny)")
                else:
                    self.info_label.setText(f"Bez lokace: {len(photos_to_display)} z {len(photos_in_folder)} fotek")
    
            # Zobrazen√≠ neplatn√Ωch soubor≈Ø (beze zmƒõny)
            if invalid_files:
                self.list_widget.addItem("")
                self.list_widget.addItem("‚ö†Ô∏è Neplatn√© n√°zvy soubor≈Ø:")
                for invalid_file in invalid_files[:5]:
                    self.list_widget.addItem(f"  {invalid_file}")
                if len(invalid_files) > 5:
                    self.list_widget.addItem(f"  ... a {len(invalid_files) - 5} dal≈°√≠ch")
    
            # üî¥ DOPLNƒöNO: po naplnƒõn√≠ seznamu dopl≈à datum/mƒõs√≠c po≈ô√≠zen√≠,
            # p≈ôiƒçem≈æ ƒç√≠slo fotky z≈Østane POSLEDN√ç token.
            self.annotate_photo_items_with_taken_date()
    
        except Exception as e:
            self.list_widget.addItem(f"‚ùå Chyba p≈ôi ƒçten√≠ slo≈æky: {str(e)}")
            self.info_label.setText("Chyba p≈ôi anal√Ωze fotek")

class PDFGeneratorWindow(QDialog):
    """Okno pro generov√°n√≠ PDF z ƒçty≈ôl√≠stk≈Ø"""

    # Ve t≈ô√≠dƒõ PDFGeneratorWindow
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("üìÑ Gener√°tor PDF ƒçty≈ôl√≠stk≈Ø")
        self.setMinimumSize(1600, 880)
        self.resize(1800, 940)
    
        # NOV√â: Inicializace slovn√≠ku pro stav o≈ôez√°n√≠ fotek a z√°mku aktualizac√≠
        self.crop_status = {}
        
        # P≈òIDEJTE TENTO ≈ò√ÅDEK:
        from pathlib import Path
        self.crop_status_file = Path("settings") / "crop_status.json"
        
        self._photo_updates_enabled = True # Z√ÅMEK pro automatick√© aktualizace
    
        # Timer pro validaci (beze zmƒõny)
        self.clover_validation_timer = QTimer(self)
        self.clover_validation_timer.setSingleShot(True)
        self.clover_validation_timer.timeout.connect(self.validate_clover_range)
        self.clover_validation_enabled = False
    
        # Inicializace watcher≈Ø pro sledov√°n√≠ slo≈æek
        self._clover_watcher = QFileSystemWatcher(self)
        self._clover_watcher.directoryChanged.connect(self._on_clover_dir_changed)
        self._clover_watcher.fileChanged.connect(self._on_clover_dir_changed)
    
        self._output_watcher = QFileSystemWatcher(self)
        self._output_watcher.directoryChanged.connect(self.update_full_pdf_path_preview)
        self._output_watcher.fileChanged.connect(self.update_full_pdf_path_preview)
    
        # UI a nastaven√≠ (beze zmƒõny)
        self.init_ui()
        self.load_settings()
        self.finished.connect(self.save_settings)
    
        QTimer.singleShot(100, self.validate_clover_range)
        QTimer.singleShot(300, self.initial_sync_trees)
        QTimer.singleShot(200, self.adopt_dark_theme_after_ui)
        
    # FILE: gui/pdf_generator_window.py
    # CLASS: PdfGeneratorWindow
    # FUNCTION: export_json_settings
    # NAHRAƒé TOUTO VERZ√ç (doplnƒõn export a sluƒçov√°n√≠ sekce ‚Äûanonymizace‚Äú s kl√≠ƒçem "ANONYMIZOVANE")
    
    def export_json_settings(self):
        """Exportuje nastaven√≠ lokac√≠, stav≈Ø, pozn√°mek a anonymizace do jednoho JSON souboru - POUZE P≈òID√ÅV√Å, NIKDY NEUB√çR√Å"""
        try:
            # Cesta k exportn√≠mu souboru
            export_path = "/Users/safronus/Library/Mobile Documents/com~apple~CloudDocs/ƒåty≈ôl√≠stky/Generov√°n√≠ PDF/Skripty/gui/settings/LokaceStavyPoznamky.json"
            export_path = os.path.expanduser(export_path)
            
            # Vytvo≈ôen√≠ slo≈æky pokud neexistuje
            export_dir = os.path.dirname(export_path)
            os.makedirs(export_dir, exist_ok=True)
            
            # Naƒçten√≠ dat z GUI
            try:
                lokace_text = self.location_config_text.toPlainText().strip()
                stavy_text = self.status_config_text.toPlainText().strip()
                poznamky_text = self.notes_text.toPlainText().strip()
    
                # ‚¨áÔ∏è NOVƒö: anonymizace ‚Äì pokud editor existuje
                anonym_text = ""
                if hasattr(self, "anonym_config_text") and hasattr(self.anonym_config_text, "toPlainText"):
                    anonym_text = (self.anonym_config_text.toPlainText() or "").strip()
                
                # Parsov√°n√≠ JSON dat (s kontrolou validity)
                lokace_data = json.loads(lokace_text) if lokace_text else {}
                stavy_data = json.loads(stavy_text) if stavy_text else {}
                poznamky_data = json.loads(poznamky_text) if poznamky_text else {}
    
                # ‚¨áÔ∏è NOVƒö: anonymizace ‚Äì oƒçek√°v√° se dict s kl√≠ƒçem "ANONYMIZOVANE": list[str]
                anonym_data_raw = json.loads(anonym_text) if anonym_text else {}
                if anonym_data_raw and not isinstance(anonym_data_raw, dict):
                    raise json.JSONDecodeError("Ko≈ôen JSON anonymizace nen√≠ objekt {}", anonym_text, 0)
                # P≈ôevedeme na tvar stejn√© √∫rovnƒõ jako ostatn√≠ sekce => {"ANONYMIZOVANE": [...]}
                anonymizace_data = {}
                if isinstance(anonym_data_raw, dict) and "ANONYMIZOVANE" in anonym_data_raw:
                    anonymizace_data = {"ANONYMIZOVANE": anonym_data_raw.get("ANONYMIZOVANE", [])}
    
            except json.JSONDecodeError as e:
                QMessageBox.critical(self, "Chyba JSON", 
                                   f"Neplatn√Ω JSON form√°t v nƒõkter√© ze z√°lo≈æek:\n{str(e)}\n\n"
                                   "Pros√≠m opravte JSON p≈ôed exportem.")
                return
            
            # Naƒçten√≠ existuj√≠c√≠ch dat ze souboru
            existing_data = {}
            if os.path.exists(export_path):
                try:
                    with open(export_path, 'r', encoding='utf-8') as f:
                        existing_data = json.load(f)
                    self.update_log(f"üìÇ Naƒçtena existuj√≠c√≠ data z: {os.path.basename(export_path)}")
                except (json.JSONDecodeError, IOError) as e:
                    # Pokud soubor existuje ale je po≈°kozen√Ω, vytvo≈ô√≠me z√°lohu
                    backup_path = export_path + f".backup_{int(time.time())}"
                    try:
                        shutil.copy2(export_path, backup_path)
                        self.update_log(f"‚ö†Ô∏è Po≈°kozen√Ω soubor z√°lohov√°n jako: {os.path.basename(backup_path)}")
                    except:
                        pass
                    existing_data = {}
    
            # OPRAVEN√â: Pomocn√© funkce definovan√© spr√°vnƒõ
            def expand_interval_to_numbers(intervals_list):
                """Rozbal√≠ seznam interval≈Ø na mno≈æinu ƒç√≠sel"""
                numbers = set()
                for item in intervals_list:
                    item_str = str(item).strip()
                    if not item_str:
                        continue
                    if '-' in item_str:
                        try:
                            start_str, end_str = item_str.split('-', 1)
                            start_num = int(start_str.strip())
                            end_num = int(end_str.strip())
                            if start_num > end_num:
                                start_num, end_num = end_num, start_num
                            numbers.update(range(start_num, end_num + 1))
                        except ValueError:
                            continue
                    else:
                        try:
                            numbers.add(int(item_str))
                        except ValueError:
                            continue
                return numbers
    
            def merge_interval_lists(existing_list, new_list):
                """Slouƒç√≠ dva seznamy interval≈Ø/ƒç√≠sel bez ztr√°ty, s optimalizac√≠"""
                # P≈ôeveƒè oba seznamy na mno≈æiny ƒç√≠sel
                existing_numbers = expand_interval_to_numbers(existing_list)
                new_numbers = expand_interval_to_numbers(new_list)
                
                # Slouƒçen√≠ v≈°ech ƒç√≠sel
                all_numbers = existing_numbers.union(new_numbers)
                
                # P≈ôevod zpƒõt na optimalizovan√© intervaly
                if not all_numbers:
                    return []
                
                sorted_numbers = sorted(all_numbers)
                intervals = []
                start = sorted_numbers[0]
                end = sorted_numbers[0]
                
                for n in sorted_numbers[1:]:
                    if n == end + 1:  # Navazuj√≠c√≠ ƒç√≠slo
                        end = n
                    else:  # Mezera v sekvenci
                        if start == end:
                            intervals.append(str(start))
                        else:
                            intervals.append(f"{start}-{end}")
                        start = n
                        end = n
                
                # Zpracov√°n√≠ posledn√≠ho intervalu
                if start == end:
                    intervals.append(str(start))
                else:
                    intervals.append(f"{start}-{end}")
                
                return intervals
    
            def safe_merge_section(merged_data, section_data, section_name):
                """Bezpeƒçn√© slouƒçen√≠ sekce s inteligentn√≠m sluƒçov√°n√≠m interval≈Ø/ƒç√≠sel"""
                if not section_data:
                    return 0, 0
                
                if section_name not in merged_data:
                    merged_data[section_name] = {}
                
                added_items = 0
                merged_items = 0
                
                for key, value in section_data.items():
                    key_str = str(key)
                    
                    if key_str not in merged_data[section_name]:
                        # Nov√Ω kl√≠ƒç - p≈ôidat cel√Ω
                        merged_data[section_name][key_str] = value
                        added_items += 1
                        if isinstance(value, list):
                            total_numbers = len(expand_interval_to_numbers(value))
                            self.update_log(f"  ‚ûï Nov√Ω {section_name} kl√≠ƒç: {key_str} ({total_numbers} ƒç√≠sel)")
                        else:
                            self.update_log(f"  ‚ûï Nov√Ω {section_name} kl√≠ƒç: {key_str}")
                    else:
                        # Existuj√≠c√≠ kl√≠ƒç - slouƒçit hodnoty
                        existing_value = merged_data[section_name][key_str]
                        
                        if isinstance(value, list) and isinstance(existing_value, list):
                            # Slouƒçen√≠ seznam≈Ø interval≈Ø/ƒç√≠sel
                            old_count = len(expand_interval_to_numbers(existing_value))
                            merged_list = merge_interval_lists(existing_value, value)
                            new_count = len(expand_interval_to_numbers(merged_list))
                            
                            merged_data[section_name][key_str] = merged_list
                            merged_items += 1
                            added_numbers = new_count - old_count
                            self.update_log(f"  üîÑ Slouƒçen {section_name} kl√≠ƒç: {key_str} (+{added_numbers} ƒç√≠sel, celkem {new_count})")
                        elif isinstance(value, str) and isinstance(existing_value, str):
                            # Pro stringy (Nastaven√≠ pozn√°mek) - nep≈ôepisovat pokud jsou rozd√≠ln√©
                            if value != existing_value:
                                self.update_log(f"  ‚è≠Ô∏è P≈ôeskoƒçena pozn√°mka pro kl√≠ƒç {key_str} (u≈æ existuje jin√°: '{existing_value}')")
                            else:
                                self.update_log(f"  ‚úì Pozn√°mka pro kl√≠ƒç {key_str} je stejn√°")
                        else:
                            # Pro jin√© typy - nep≈ôepisovat
                            self.update_log(f"  ‚è≠Ô∏è P≈ôeskoƒçen {section_name} kl√≠ƒç: {key_str} (u≈æ existuje)")
                
                return added_items, merged_items
    
            # Bezpeƒçn√© slouƒçen√≠ dat - inteligentn√≠ sluƒçov√°n√≠ na √∫rovni jednotliv√Ωch kl√≠ƒç≈Ø
            merged_data = existing_data.copy()
            
            total_added = 0
            total_merged = 0
            
            # Slouƒçen√≠ lokac√≠
            if lokace_data:
                self.update_log("üó∫Ô∏è Zpracov√°v√°m lokace...")
                added, merged = safe_merge_section(merged_data, lokace_data, "lokace")
                total_added += added
                total_merged += merged
            
            # Slouƒçen√≠ stav≈Ø
            if stavy_data:
                self.update_log("‚öôÔ∏è Zpracov√°v√°m stavy...")
                added, merged = safe_merge_section(merged_data, stavy_data, "stavy")
                total_added += added
                total_merged += merged
            
            # Slouƒçen√≠ pozn√°mek
            if poznamky_data:
                self.update_log("üìù Zpracov√°v√°m pozn√°mky...")
                added, merged = safe_merge_section(merged_data, poznamky_data, "poznamky")
                total_added += added
                total_merged += merged
    
            # ‚¨áÔ∏è NOVƒö: Slouƒçen√≠ anonymizace (sekce "anonymizace" s kl√≠ƒçem "ANONYMIZOVANE")
            if anonymizace_data:
                self.update_log("üõ°Ô∏è Zpracov√°v√°m anonymizaci...")
                added, merged = safe_merge_section(merged_data, anonymizace_data, "anonymizace")
                total_added += added
                total_merged += merged
            
            # Metadata se v≈ædy aktualizuj√≠ (ale neub√≠raj√≠ p≈ôedchoz√≠ metadata kl√≠ƒçe)
            if "metadata" not in merged_data:
                merged_data["metadata"] = {}
            
            merged_data["metadata"]["last_export"] = datetime.datetime.now().isoformat()
            merged_data["metadata"]["export_source"] = "PDF Generator Window"
            merged_data["metadata"]["version"] = "1.0"
            
            # Z√°pis slouƒçen√Ωch dat do souboru
            with open(export_path, 'w', encoding='utf-8') as f:
                json.dump(merged_data, f, ensure_ascii=False, indent=2, sort_keys=True)
            
            # Statistiky pro u≈æivatele
            final_lokace = len(merged_data.get("lokace", {}))
            final_stavy = len(merged_data.get("stavy", {}))
            final_poznamky = len(merged_data.get("poznamky", {}))
            final_anonym = len(merged_data.get("anonymizace", {}))  # oƒçek√°v√° jeden kl√≠ƒç "ANONYMIZOVANE"
            
            success_message = (
                f"‚úÖ JSON nastaven√≠ bylo inteligentnƒõ slouƒçeno!\n\n"
                f"üìÅ Soubor: {os.path.basename(export_path)}\n"
                f"‚ûï Novƒõ p≈ôid√°no kl√≠ƒç≈Ø: {total_added}\n"
                f"üîÑ Slouƒçeno existuj√≠c√≠ch kl√≠ƒç≈Ø: {total_merged}\n\n"
                f"üìä Celkov√Ω stav souboru:\n"
                f"üó∫Ô∏è Lokace: {final_lokace}\n"
                f"‚öôÔ∏è Stavy: {final_stavy}\n"
                f"üìù Nastaven√≠ pozn√°mek: {final_poznamky}\n"
                f"üõ°Ô∏è Anonymizace (sekc√≠): {final_anonym}\n\n"
                f"üíæ Velikost souboru: {os.path.getsize(export_path)} byt≈Ø\n\n"
                f"üîí ≈Ω√ÅDN√Å ƒå√çSLA/INTERVALY NEBYLY ODEBR√ÅNY\n"
                f"üéØ INTERVALY BYLY INTELIGENTNƒö OPTIMALIZOV√ÅNY"
            )
            
            self.update_log(f"‚úÖ Inteligentn√≠ export dokonƒçen - {total_added} nov√Ωch, {total_merged} slouƒçen√Ωch")
            QMessageBox.information(self, "Inteligentn√≠ export dokonƒçen", success_message)
            
        except Exception as e:
            error_message = f"Nepoda≈ôilo se exportovat JSON nastaven√≠:\n{str(e)}"
            self.update_log(f"‚ùå Chyba exportu JSON: {str(e)}")
            QMessageBox.critical(self, "Chyba exportu", error_message)

    def check_states_without_notes_real_time(self):
        """Real-time kontrola, zda fotky se stavem maj√≠ tak√© pozn√°mku."""
        try:
            states_config_text = self.status_config_text.toPlainText().strip()
            notes_text = self.notes_text.toPlainText().strip()
    
            # Pokud je stav konfigurace pr√°zdn√°, skryjeme indikaci
            if not states_config_text:
                self._update_states_without_notes_indicator(None)
                return
    
            states_data = {}
            notes_data = {}
    
            try:
                states_data = json.loads(states_config_text)
                if notes_text:
                    notes_data = json.loads(notes_text)
            except json.JSONDecodeError:
                # Chybn√Ω JSON - nevykresluj nic
                self._update_states_without_notes_indicator(None)
                return
    
            if not isinstance(states_data, dict):
                self._update_states_without_notes_indicator(None)
                return
    
            # Z√≠skat v≈°echna ƒç√≠sla ƒçty≈ôl√≠stk≈Ø se stavem (kromƒõ BEZGPS a ZTRACENY)
            photos_with_states = set()
            for state_name, number_list in states_data.items():
                # NOV√â: Ignorovat stavy, kter√© nevy≈æaduj√≠ pozn√°mku
                if str(state_name).upper() in ["BEZGPS", "ZTRACENY"]:
                    continue
                    
                if not isinstance(number_list, list):
                    continue
    
                for item in number_list:
                    item_str = str(item).strip()
                    if not item_str:
                        continue
    
                    if '-' in item_str:
                        try:
                            start_str, end_str = item_str.split('-', 1)
                            start_num = int(start_str.strip())
                            end_num = int(end_str.strip())
                            if start_num > end_num:
                                start_num, end_num = end_num, start_num
                            photos_with_states.update(range(start_num, end_num + 1))
                        except ValueError:
                            continue
                    else:
                        try:
                            num = int(item_str)
                            photos_with_states.add(num)
                        except ValueError:
                            continue
    
            # Z√≠skat v≈°echna ƒç√≠sla ƒçty≈ôl√≠stk≈Ø s pozn√°mkou
            photos_with_notes = set()
            for key in notes_data.keys():
                try:
                    photos_with_notes.add(int(key))
                except ValueError:
                    continue
    
            # Naj√≠t ƒç√≠sla se stavem, kter√° nemaj√≠ pozn√°mku (kromƒõ BEZGPS a ZTRACENY)
            missing_notes = photos_with_states - photos_with_notes
    
            # Aktualizovat indik√°tor
            if len(missing_notes) == 0 and len(photos_with_states) > 0:
                self._update_states_without_notes_indicator(set(), all_ok=True)
                # NOV√â: Aktualizovat i indik√°tor v z√°lo≈æce Pozn√°mky
                self._update_notes_states_without_notes_indicator(set(), all_ok=True)
            elif len(missing_notes) > 0:
                self._update_states_without_notes_indicator(missing_notes, all_ok=False)
                # NOV√â: Aktualizovat i indik√°tor v z√°lo≈æce Pozn√°mky
                self._update_notes_states_without_notes_indicator(missing_notes, all_ok=False)
            else:
                # ≈Ω√°dn√© fotky se stavem
                self._update_states_without_notes_indicator(None)
                # NOV√â: Aktualizovat i indik√°tor v z√°lo≈æce Pozn√°mky
                self._update_notes_states_without_notes_indicator(None)
    
        except Exception:
            # Tich√° chyba - nenaru≈°uj u≈æivatelsk√© rozhran√≠
            pass

    def _update_states_without_notes_indicator(self, missing_notes_set, all_ok=False):
        """Aktualizuje indik√°tor chybƒõj√≠c√≠ch pozn√°mek pro fotky se stavem."""
        if not hasattr(self, 'states_without_notes_indicator'):
            return
    
        if missing_notes_set is None:
            self.states_without_notes_indicator.setVisible(False)
            return
    
        if all_ok:
            self.states_without_notes_indicator.setText("‚úÖ V≈°echny fotky se stavem maj√≠ pozn√°mku")
            self.states_without_notes_indicator.setStyleSheet("""
                QLabel {
                    color: #27ae60;
                    background-color: #d5f4e6;
                    border: 1px solid #27ae60;
                    border-radius: 4px;
                    padding: 6px 10px;
                    font-size: 11px;
                    font-weight: bold;
                }
            """)
            self.states_without_notes_indicator.setVisible(True)
        else:
            missing_list = sorted(list(missing_notes_set))
            if len(missing_list) <= 12:
                missing_str = ", ".join(str(x) for x in missing_list)
            else:
                missing_str = ", ".join(str(x) for x in missing_list[:10]) + f", ... (+{len(missing_list)-10})"
    
            self.states_without_notes_indicator.setText(f"‚ö†Ô∏è Chybƒõj√≠c√≠ pozn√°mky pro fotky: {missing_str}")
            self.states_without_notes_indicator.setToolTip(
                f"Celkem {len(missing_list)} fotek se stavem nem√° pozn√°mku.\n"
                f"Fotky: {', '.join(str(x) for x in missing_list)}"
            )
            self.states_without_notes_indicator.setStyleSheet("""
                QLabel {
                    color: #e74c3c;
                    background-color: #fadbd8;
                    border: 1px solid #e74c3c;
                    border-radius: 4px;
                    padding: 6px 10px;
                    font-size: 11px;
                    font-weight: bold;
                }
            """)
            self.states_without_notes_indicator.setVisible(True)

    # P≈ôidejte tyto dvƒõ metody kamkoliv do t≈ô√≠dy PDFGeneratorWindow
    def disable_photo_list_updates(self):
        """Doƒçasnƒõ zak√°≈æe automatick√© obnovov√°n√≠ seznam≈Ø fotek."""
        self._photo_updates_enabled = False
        self.update_log("‚è∏Ô∏è Automatick√© obnovov√°n√≠ seznamu fotek pozastaveno.")
    
    def enable_photo_list_updates(self, photo_number_to_reselect=None):
        """Znovu povol√≠ automatick√© obnovov√°n√≠ seznam≈Ø fotek a spust√≠ jednor√°zovou kontrolu.
    
        Pokud je zad√°no ƒç√≠slo fotky, po jednor√°zov√© kontrole bude tato fotka znovu oznaƒçena v seznamu.
        """
        self._photo_updates_enabled = True
        # Ulo≈æen√≠ pending reselectu; atribut je vytvo≈ôen on‚Äëthe‚Äëfly, nen√≠ nutn√© nic v __init__.
        try:
            self._pending_reselect_photo_number = int(photo_number_to_reselect) if photo_number_to_reselect is not None else None
        except Exception:
            self._pending_reselect_photo_number = None
    
        self.update_log("‚ñ∂Ô∏è Automatick√© obnovov√°n√≠ seznamu fotek obnoveno.")
        # Po odemƒçen√≠ pro jistotu jednor√°zovƒõ zaktualizujeme v≈°e, abychom nezme≈°kali zmƒõny
        QTimer.singleShot(50, lambda: self._on_clover_dir_changed(""))

    # Ve t≈ô√≠dƒõ PDFGeneratorWindow (p≈ôidejte tuto novou metodu)
    def _update_crop_status(self, photo_number_str, is_cropped):
        """Aktualizuje stav o≈ôezu pro danou fotku a obnov√≠ seznamy."""
        self.crop_status[photo_number_str] = is_cropped
        self.update_log(f"‚úÇÔ∏è Stav o≈ôezu pro fotku {photo_number_str} aktualizov√°n na: {'O≈ôezan√°' if is_cropped else 'Neupraven√°'}")
        # Okam≈æit√° aktualizace obou seznam≈Ø, kter√© zobrazuj√≠ fotky
        self.update_missing_photos_list()
        self.update_status_photos_list()

    def update_crop_status(self, photo_path, is_cropped):
        """Aktualizuje stav o≈ôezu pro danou fotku a obnov√≠ UI."""
        try:
            filename = os.path.basename(photo_path)
            photo_number_str = filename.split('+')[0]
            if photo_number_str.isdigit():
                self.crop_status[photo_number_str] = is_cropped
                self.update_log(f"‚úÇÔ∏è Stav o≈ôezu pro fotku {photo_number_str} aktualizov√°n na: {is_cropped}")
                # Okam≈æit√° aktualizace seznamu fotek
                self.update_missing_photos_list()
        except (ValueError, IndexError) as e:
            self.update_log(f"‚ùå Chyba p≈ôi aktualizaci stavu o≈ôezu pro {photo_path}: {e}")
        
    def extract_numbers_from_location_json(self):
        """Extrahuje v≈°echna ƒç√≠sla ƒçty≈ôl√≠stk≈Ø z JSON konfigurace lokac√≠"""
        try:
            config_text = self.location_config_text.toPlainText().strip()
            if not config_text:
                return []
            
            data = json.loads(config_text)
            all_numbers = set()
            
            for location_id, number_list in data.items():
                if not isinstance(number_list, list):
                    continue
                    
                for item in number_list:
                    item_str = str(item).strip()
                    if not item_str:
                        continue
                        
                    if '-' in item_str:
                        try:
                            start_str, end_str = item_str.split('-', 1)
                            start_num = int(start_str.strip())
                            end_num = int(end_str.strip())
                            if start_num > end_num:
                                start_num, end_num = end_num, start_num
                            
                            for num in range(start_num, end_num + 1):
                                all_numbers.add(num)
                        except ValueError:
                            continue
                    else:
                        try:
                            num = int(item_str)
                            all_numbers.add(num)
                        except ValueError:
                            continue
            
            return sorted(list(all_numbers))
            
        except json.JSONDecodeError:
            return []
        except Exception:
            return []
    
    def update_missing_photos_list(self):
        """Aktualizuje seznam nep≈ôi≈ôazen√Ωch fotek a zobrazuje chybn√° ƒç√≠sla p≈ôi≈ôazen√° v JSON, kter√° nejsou ve slo≈æce"""
        if not hasattr(self, 'missing_photos_widget'):
            return
    
        clover_path = self.edit_clover_path.text().strip()
        
        # ‚úÖ NOV√â: Rozli≈°en√≠ podle stavu checkboxu
        if hasattr(self, 'show_all_photos_checkbox') and self.show_all_photos_checkbox.isChecked():
            # Zobraz v≈°echny fotky - p≈ôedej pr√°zdn√Ω seznam jako json_numbers
            json_numbers = []
            self.missing_photos_widget.update_missing_photos(clover_path, json_numbers, self.crop_status)
        else:
            # P≈Øvodn√≠ chov√°n√≠ - zobraz jen fotky bez p≈ôi≈ôazen√© lokace
            json_numbers = self.extract_numbers_from_location_json()
            self.missing_photos_widget.update_missing_photos(clover_path, json_numbers, self.crop_status)
    
        # NOV√â: Aktualizace stavu tlaƒç√≠tka rychl√©ho o≈ôezu
        QTimer.singleShot(50, self.update_quick_crop_button_state)
    
        # N√°sleduj√≠c√≠ k√≥d pro real-time kontrolu chybƒõj√≠c√≠ch soubor≈Ø je v po≈ô√°dku,
        # ale vylep≈°√≠me manipulaci s textem v informaƒçn√≠m labelu.
    
        if not clover_path or not os.path.isdir(clover_path):
            return
    
        try:
            # Z√≠skej seznam skuteƒçnƒõ existuj√≠c√≠ch fotek ve slo≈æce
            existing_photos = self._get_existing_photo_numbers(clover_path)
    
            # Najdi ƒç√≠sla v JSON, kter√° nejsou ve slo≈æce
            json_numbers_set = set(json_numbers) if json_numbers else set()
            assigned_not_in_folder = sorted(json_numbers_set - existing_photos)
    
            # Aktualizuj info_label s ƒçervenou hl√°≈°kou, pokud jsou chybƒõj√≠c√≠ fotky
            current_text = self.missing_photos_widget.info_label.text()
    
            # OPRAVA: Robustnƒõj≈°√≠ oddƒõlen√≠ hlavn√≠ho textu od varov√°n√≠
            base_text_parts = []
            for line in current_text.splitlines():
                # Ignorovat star√© varov√°n√≠
                if 'P≈ôi≈ôazeny fotky, kter√© ve slo≈æce nejsou' not in line:
                    base_text_parts.append(line)
    
            base_text = '\n'.join(base_text_parts).strip()
    
            if assigned_not_in_folder:
                # P≈ôidej ƒçervenou hl√°≈°ku pomoc√≠ HTML
                missing_str = ", ".join(str(n) for n in assigned_not_in_folder[:10])
                if len(assigned_not_in_folder) > 10:
                    missing_str += f"... a dal≈°√≠ch {len(assigned_not_in_folder)-10}"
    
                error_html = f'‚ùå P≈ôi≈ôazeny fotky, kter√© ve slo≈æce nejsou: {missing_str}'
                final_text = f"{base_text}{error_html}"
                self.missing_photos_widget.info_label.setText(final_text)
            else:
                # Pouze z√°kladn√≠ text bez chybov√© hl√°≈°ky
                self.missing_photos_widget.info_label.setText(base_text)
    
        except Exception as e:
            self.update_log(f"‚ö†Ô∏è Chyba p≈ôi kontrole chybƒõj√≠c√≠ch fotek: {e}")
            pass

    def _on_clover_dir_changed(self, _path: str):
        """P≈ôi zmƒõnƒõ obsahu slo≈æky ƒçty≈ôl√≠stk≈Ø aktualizuj p≈ôehled i validaci."""
        try:
            # Tyto rychl√© operace mohou bƒõ≈æet v≈ædy
            self.update_clover_stats_label()
            self.validate_clover_range()
    
            # Zkontrolujeme z√°mek, ne≈æ spust√≠me n√°roƒçn√© aktualizace seznam≈Ø
            if not self._photo_updates_enabled:
                self.update_log("‚ÑπÔ∏è Zmƒõna ve slo≈æce detekov√°na, ale obnova seznamu je pozastavena.")
                return
    
            # Pokud nen√≠ zamƒçeno, aktualizujeme oba seznamy fotek
            self.update_missing_photos_list()
            self.update_status_photos_list()
    
            # NOV√â: po refreshi p≈ô√≠padnƒõ znovu oznaƒçit po≈æadovanou fotku
            try:
                pending_num = getattr(self, "_pending_reselect_photo_number", None)
                if pending_num is not None and hasattr(self, "missing_photos_widget") and self.missing_photos_widget:
                    # Prov√©st reselect v seznamu ‚ÄûAnal√Ωza fotek‚Äú
                    self.missing_photos_widget._select_photo_in_list(int(pending_num))
                # Vyƒçistit pending reselect
                self._pending_reselect_photo_number = None
            except Exception:
                # Bezpeƒçn√Ω no‚Äëop; reselect nesm√≠ shodit UI
                pass
    
        except Exception:
            # Tich√° chyba, aby aplikace nespadla p≈ôi rychl√Ωch zmƒõn√°ch
            pass

    def get_photo_to_state_mapping(self):
        """Z√≠sk√° mapov√°n√≠ foto_ƒç√≠slo -> stav z JSON konfigurace stav≈Ø"""
        try:
            config_text = self.status_config_text.toPlainText().strip()
            if not config_text:
                return {}
                
            data = json.loads(config_text)
            if not isinstance(data, dict):
                return {}
                
            photo_to_state = {}
            
            for state_name, number_list in data.items():
                if not isinstance(number_list, list):
                    continue
                    
                for item in number_list:
                    item_str = str(item).strip()
                    if not item_str:
                        continue
                        
                    if '-' in item_str:
                        try:
                            start_str, end_str = item_str.split('-', 1)
                            start_num = int(start_str.strip())
                            end_num = int(end_str.strip())
                            if start_num > end_num:
                                start_num, end_num = end_num, start_num
                                
                            for num in range(start_num, end_num + 1):
                                if num in photo_to_state:
                                    # Duplik√°tn√≠ p≈ôi≈ôazen√≠ - oznaƒç√≠me speci√°lnƒõ
                                    if isinstance(photo_to_state[num], str):
                                        photo_to_state[num] = [photo_to_state[num], state_name]
                                    else:
                                        photo_to_state[num].append(state_name)
                                else:
                                    photo_to_state[num] = state_name
                        except ValueError:
                            continue
                    else:
                        try:
                            num = int(item_str)
                            if num in photo_to_state:
                                # Duplik√°tn√≠ p≈ôi≈ôazen√≠
                                if isinstance(photo_to_state[num], str):
                                    photo_to_state[num] = [photo_to_state[num], state_name]
                                else:
                                    photo_to_state[num].append(state_name)
                            else:
                                photo_to_state[num] = state_name
                        except ValueError:
                            continue
                            
            return photo_to_state
            
        except json.JSONDecodeError:
            return {}
        except Exception as e:
            self.update_log(f"‚ùå Chyba p≈ôi parsov√°n√≠ stav≈Ø: {e}")
            return {}
    
    def check_duplicate_states_real_time(self):
        """Real-time kontrola duplik√°tn√≠ch stav≈Ø p≈ôi≈ôazen√Ωch jedn√© fotce"""
        try:
            photo_to_state = self.get_photo_to_state_mapping()
            
            # Najdi fotky s v√≠ce stavy
            duplicate_states = {}
            for photo_num, state_info in photo_to_state.items():
                if isinstance(state_info, list):  # V√≠ce stav≈Ø
                    duplicate_states[photo_num] = state_info
                    
            self._update_duplicate_states_indicator(duplicate_states)
            
        except Exception:
            # Tich√° chyba - nenaru≈°uj UI
            pass
    
    def _update_duplicate_states_indicator(self, duplicate_states: dict):
        """Aktualizuj indik√°tor duplik√°tn√≠ch stav≈Ø"""
        if not hasattr(self, 'duplicate_states_indicator'):
            return
            
        if duplicate_states:
            duplicates_list = sorted(duplicate_states.keys())
            if len(duplicates_list) <= 10:
                duplicates_str = ", ".join(str(num) for num in duplicates_list)
            else:
                duplicates_str = ", ".join(str(num) for num in duplicates_list[:8]) + f", ... (+{len(duplicates_list)-8})"
                
            # Vytvo≈ô detail string pro tooltip
            detail_lines = []
            for photo_num in sorted(duplicate_states.keys())[:5]:  # Max 5 pro tooltip
                states = duplicate_states[photo_num]
                detail_lines.append(f"Fotka {photo_num}: {', '.join(states)}")
            if len(duplicate_states) > 5:
                detail_lines.append(f"... a dal≈°√≠ch {len(duplicate_states)-5} fotek")
                
            self.duplicate_states_indicator.setText(f"‚ö†Ô∏è Duplik√°tn√≠ stavy: {duplicates_str}")
            self.duplicate_states_indicator.setToolTip("Fotky s v√≠ce p≈ôi≈ôazen√Ωmi stavy:\n" + "\n".join(detail_lines))
            self.duplicate_states_indicator.setStyleSheet("""
                QLabel {
                    color: #e74c3c;
                    background-color: #fadbd8;
                    border: 1px solid #e74c3c;
                    border-radius: 4px;
                    padding: 6px 10px;
                    font-size: 11px;
                    font-weight: bold;
                }
            """)
            self.duplicate_states_indicator.setVisible(True)
        else:
            self.duplicate_states_indicator.setVisible(False)

    # TUTO CELOU FUNKCI ODSTRA≈áTE ZE SOUBORU
    def update_state_photos_list(self):
        """Aktualizuje seznam fotek, kter√© je≈°tƒõ nemaj√≠ p≈ôi≈ôazen√Ω stav"""
        if not hasattr(self, 'missing_photos_widget'):
            return
        # Z√≠skej fotky se stavem
        photo_to_state = self.get_photo_to_state_mapping()
        photos_with_states = set()
        for photo_num, state_info in photo_to_state.items():
            if isinstance(state_info, str):
                photos_with_states.add(photo_num)
            elif isinstance(state_info, list):
                photos_with_states.add(photo_num) # I duplik√°tn√≠ stavy poƒç√≠t√°me jako "m√° stav"
        # Aktualizuj missing photos widget s excludovan√Ωmi fotkami
        clover_path = self.edit_clover_path.text().strip()
        json_numbers = self.extract_numbers_from_location_json()
        # Roz≈°i≈ô json_numbers o fotky se stavem (aby nebyly v missing)
        json_numbers_with_states = set(json_numbers).union(photos_with_states)
        self.missing_photos_widget.update_missing_photos(clover_path, list(json_numbers_with_states))

    def _refresh_clover_watcher(self):
        """Sleduj aktu√°ln√≠ cestu k ƒçty≈ôl√≠stk≈Øm a ihned aktualizuj p≈ôehled."""
        if not hasattr(self, '_clover_watcher'):
            return
        
        try:
            old_dirs = self._clover_watcher.directories()
            if old_dirs:
                self._clover_watcher.removePaths(old_dirs)
        except Exception:
            pass
        
        new_path = (self.edit_clover_path.text() or "").strip()
        if new_path and os.path.isdir(new_path):
            self._clover_watcher.addPath(new_path)
        
        # Po p≈ôepnut√≠ cesty ihned p≈ôepoƒç√≠tej p≈ôehled a validaci
        self._on_clover_dir_changed(new_path)

    def _refresh_output_watcher(self):
        """Sleduj aktu√°ln√≠ v√Ωstupn√≠ slo≈æku a pr≈Øbƒõ≈ænƒõ aktualizuj kontrolu v√Ωstupu."""
        if not hasattr(self, '_output_watcher'):
            return
        try:
            old_dirs = self._output_watcher.directories()
            if old_dirs:
                self._output_watcher.removePaths(old_dirs)
        except Exception:
            pass
        new_path = (self.edit_output_folder.text() or "").strip()
        if new_path and os.path.isdir(new_path):
            self._output_watcher.addPath(new_path)
        # Po p≈ôepnut√≠ cesty ihned p≈ôepoƒç√≠tej ‚ÄúKontrola v√Ωstupn√≠ slo≈æky PDF‚Äù
        self.update_full_pdf_path_preview()

    # ========== DARK THEME FUNCTIONS (z pdf_generator_window2.py) ==========
    
    def _dark_palette(self):
        """
        Paleta pro dark-theme MacOS vzhled, sladƒõn√° s hlavn√≠m oknem (StatusWidget/LogWidget).
        Pou≈æ√≠v√°na pouze pro QSS; nezasahuje do logiky.
        """
        return {
            'bg': '#1e1e1e',  # hlavn√≠ tmav√© pozad√≠
            'bg2': '#2b2b2b',  # sekund√°rn√≠ panelov√© pozad√≠
            'text': '#e6e6e6',
            'muted': '#b0b0b0',
            'frame': '#555555',
            'frame2': '#888888',
            'accent': '#2196F3',  # modr√Ω akcent (focus, aktivn√≠ tab)
            'accent_hover': '#90CAF9',
            'group_border': '#555555',
            # Palety tlaƒç√≠tek (konzistentn√≠ s hlavn√≠m oknem)
            'GREEN': ("#4CAF50", "#45a049", "#3d8b40"),
            'RED': ("#f44336", "#da190b", "#c1170a"),
            'BLUE': ("#2196F3", "#1976D2", "#1565C0"),
            'ORNG': ("#FF9800", "#F57C00", "#E65100"),
            'PURP': ("#8e44ad", "#7d3c98", "#6c3483"),
            'TEAL': ("#009688", "#00897B", "#00695C"),
            'GRAY': ("#616161", "#757575", "#424242"),
            # Strom soubor≈Ø
            'tree_bg': '#1f1f1f',
            'tree_alt': '#242424',
            'tree_text': '#e6e6e6',
            'tree_sel': '#2a3b4f',
            'tree_sel_text': '#ffffff',
        }

    def _style_btn(self, btn, base, hover, pressed, min_w=None, min_h=32):
        """
        Sjednocen√Ω vzhled tlaƒç√≠tek ve stylu hlavn√≠ho okna (dark-theme).
        Pouze QSS; ≈æ√°dn√° zmƒõna logiky nebo sign√°l≈Ø.
        """
        if not btn:
            return
        if min_h:
            btn.setMinimumHeight(int(min_h))
        if min_w:
            btn.setMinimumWidth(int(min_w))
        btn.setStyleSheet(f"""
            QPushButton {{
                background-color: {base};
                color: #ffffff;
                border: none;
                border-radius: 6px;
                font-weight: bold;
                font-size: 12px;
                padding: 8px 12px;
            }}
            QPushButton:hover {{ background-color: {hover}; }}
            QPushButton:pressed {{ background-color: {pressed}; }}
            QPushButton:disabled {{ background-color: #3a3a3a; color: #777777; }}
        """)

    def _apply_dark_theme_base_qss(self):
        """
        Z√°kladn√≠ dark QSS pro dialog ‚Äì kompaktnƒõj≈°√≠: men≈°√≠ p√≠smo, men≈°√≠ paddingy/margins.
        """
        C = self._dark_palette()
        self.setStyleSheet(f"""
        /* Okno */
        QDialog {{
            background-color: {C['bg']};
            color: {C['text']};
            font-size: 11px;
        }}
        /* Skupiny */
        QGroupBox {{
            font-weight: bold;
            font-size: 12px;
            color: {C['text']};
            border: 1px solid {C['group_border']};
            border-radius: 6px;
            margin-top: 6px;
            padding-top: 6px;
            background-color: {C['bg2']};
        }}
        QGroupBox::title {{
            subcontrol-origin: margin;
            left: 8px;
            padding: 0 4px;
        }}
        /* Tab widget a z√°lo≈æky */
        QTabWidget::pane {{
            border: 1px solid {C['group_border']};
            border-radius: 5px;
            background-color: {C['bg2']};
        }}
        QTabBar::tab {{
            background-color: #303030;
            color: {C['text']};
            padding: 6px 12px;
            margin-right: 1px;
            border-top-left-radius: 5px;
            border-top-right-radius: 5px;
            font-weight: bold;
            font-size: 12px;
        }}
        QTabBar::tab:selected {{ background-color: {C['accent']}; color: #ffffff; }}
        QTabBar::tab:hover {{ background-color: {C['accent_hover']}; color: #000000; }}
    
        /* Textov√© vstupy */
        QLineEdit, QPlainTextEdit, QTextEdit {{
            padding: 4px 8px;
            border: 1px solid {C['frame']};
            border-radius: 4px;
            font-size: 11px;
            background-color: #212121;
            color: {C['text']};
            selection-background-color: {C['accent']};
            selection-color: #ffffff;
        }}
        QLineEdit:focus, QPlainTextEdit:focus, QTextEdit:focus {{
            border: 1px solid {C['accent']};
            background-color: #252525;
        }}
    
        /* ƒå√≠seln√≠ky */
        QSpinBox, QDoubleSpinBox {{
            padding: 3px 6px;
            border: 1px solid {C['frame']};
            border-radius: 4px;
            font-size: 11px;
            background-color: #212121;
            color: {C['text']};
        }}
        QSpinBox:focus, QDoubleSpinBox:focus {{
            border: 1px solid {C['accent']};
            background-color: #252525;
        }}
    
        /* Checkboxy a labely */
        QCheckBox {{ font-size: 11px; color: {C['text']}; }}
        QLabel {{ font-size: 11px; color: {C['text']}; }}
    
        /* Progress bar ‚Äì kompaktnƒõj≈°√≠ v√Ω≈°ka */
        QProgressBar {{
            border: 1px solid {C['frame']};
            border-radius: 5px;
            text-align: center;
            font-weight: bold;
            font-size: 11px;
            background-color: #212121;
            color: {C['muted']};
            min-height: 14px;
        }}
        QProgressBar::chunk {{
            background-color: {C['accent']};
            border-radius: 4px;
        }}
        """)

    def _style_file_trees_dark(self):
        """
        Dark-theme vzhled QTreeView strom≈Ø (souborov√Ω prohl√≠≈æeƒç) v PDF oknƒõ,
        vƒçetnƒõ hlaviƒçek; bez z√°sahu do model≈Ø, D&D nebo kontextov√Ωch nab√≠dek.
        """
        C = self._dark_palette()
        from PySide6.QtWidgets import QTreeView

        trees = []
        for gb in [getattr(self, 'location_tree', None),
                   getattr(self, 'clover_tree', None),
                   getattr(self, 'output_tree', None),
                   getattr(self, 'copy_tree', None)]:
            if gb:
                tv = gb.findChild(QTreeView)
                if tv:
                    trees.append(tv)

        tree_qss = f"""
            QTreeView {{
                background-color: {C['tree_bg']};
                alternate-background-color: {C['tree_alt']};
                color: {C['tree_text']};
                border: 1px solid {C['frame']};
                border-radius: 6px;
                selection-background-color: {C['tree_sel']};
                selection-color: {C['tree_sel_text']};
                show-decoration-selected: 1;
            }}
            QTreeView::item:hover {{ background-color: #2a2a2a; }}
            QHeaderView::section {{
                background-color: #2a2a2a;
                color: {C['text']};
                padding: 4px 6px;
                border: 1px solid {C['frame']};
            }}
        """

        for tv in trees:
            try:
                tv.setAlternatingRowColors(True)
                tv.setStyleSheet(tree_qss)
            except Exception:
                pass

        # Cesty (labely nad stromy) ‚Äì zjemnit; ponechat monospace
        from PySide6.QtWidgets import QLabel
        for gb in [getattr(self, 'location_tree', None),
                   getattr(self, 'clover_tree', None),
                   getattr(self, 'output_tree', None),
                   getattr(self, 'copy_tree', None)]:
            try:
                if not gb:
                    continue
                labels = gb.findChildren(QLabel)
                for lb in labels:
                    lb.setStyleSheet(f"""
                        QLabel {{
                            background-color: #252525;
                            border: 1px solid {C['frame']};
                            border-radius: 4px;
                            padding: 6px 12px;
                            font-size: 12px;
                            color: {C['muted']};
                            font-family: monospace;
                        }}
                    """)
            except Exception:
                pass
            
    def update_log_and_progress(self, message: str):
        """
        Zpracuje zpr√°vu z vl√°kna. Pokud obsahuje prefix pro progress bar,
        aktualizuje ho. Jinak zpr√°vu zap√≠≈°e do logu.
        """
        if message.startswith("phase_"):
            try:
                phase, val_str = message.split(':', 1)
                val = int(val_str)
                
                if phase == "phase_loading":
                    self.progress_bar_loading.setValue(val)
                elif phase == "phase_combining":
                    self.progress_bar_combining.setValue(val)
                elif phase == "phase_saving":
                    self.progress_bar_saving.setValue(val)
            except (ValueError, IndexError):
                self.update_log(message) # Pokud parsov√°n√≠ sel≈æe, zap√≠≈°eme jako log
        else:
            self.update_log(message)
        
    
    def update_progress_bars(self, message: str):
        """
        Aktualizuje t≈ôi progress bary podle zpr√°vy ve form√°tu:
        \"phase_name:value\", nap≈ô√≠klad \"phase_loading:50\".
        """
        try:
            if ':' not in message:
                return
            phase, val_str = message.split(':', 1)
            val = int(val_str)
            
            # Zobrazit progress bary pokud nejsou viditeln√©
            if not self.progress_bar_loading.isVisible():
                self.progress_bar_loading.setVisible(True)
            if not self.progress_bar_combining.isVisible():
                self.progress_bar_combining.setVisible(True)
            if not self.progress_bar_saving.isVisible():
                self.progress_bar_saving.setVisible(True)
            
            if phase == "phase_loading":
                self.progress_bar_loading.setValue(val)
            elif phase == "phase_combining":
                self.progress_bar_combining.setValue(val)
            elif phase == "phase_saving":
                self.progress_bar_saving.setValue(val)
    
            # Skryt√≠ progress bar≈Ø, kdy≈æ jsou 100 % u v≈°ech
            if (self.progress_bar_loading.value() == 100 and
                self.progress_bar_combining.value() == 100 and
                self.progress_bar_saving.value() == 100):
                self.progress_bar_loading.setVisible(False)
                self.progress_bar_combining.setVisible(False)
                self.progress_bar_saving.setVisible(False)
        except Exception:
            pass

            
    def _install_log_clear_button(self, parent_container):
        """Vytvo≈ô√≠ a ukotv√≠ mal√© kulat√© Clear tlaƒç√≠tko jako p≈ôekryvn√© d√≠tƒõ v prav√©m horn√≠m rohu log oblasti."""
        from PySide6.QtWidgets import QPushButton
        from PySide6.QtCore import Qt, QObject, QEvent
    
        if not hasattr(self, "btn_log_clear") or self.btn_log_clear is None:
            self.btn_log_clear = QPushButton("‚úï", parent=parent_container)
            self.btn_log_clear.setToolTip("Vymazat v≈°echny logy")
            self.btn_log_clear.setFixedSize(28, 28)
            self.btn_log_clear.setCursor(Qt.PointingHandCursor)
            
            # Tmav√Ω styl konzistentn√≠ s PDF oknem
            self.btn_log_clear.setStyleSheet("""
            QPushButton {
                background-color: rgba(198, 40, 40, 160);
                color: #FFFFFF;
                border: 1px solid rgba(255, 255, 255, 180);
                border-radius: 14px;
                font-weight: 700;
                font-size: 14px;
            }
            QPushButton:hover { 
                background-color: rgba(198, 40, 40, 200); 
            }
            QPushButton:pressed { 
                background-color: rgba(198, 40, 40, 240); 
            }
            QPushButton:disabled {
                background-color: rgba(198, 40, 40, 90);
                color: rgba(255,255,255,140);
            }
            """)
            
            self.btn_log_clear.clicked.connect(self._on_log_clear_click)
            self.btn_log_clear.show()
            self.btn_log_clear.raise_()
    
            def _position_clear_button():
                try:
                    margin = 8
                    bx = max(0, parent_container.width() - self.btn_log_clear.width() - margin)
                    by = margin
                    self.btn_log_clear.move(bx, by)
                    self.btn_log_clear.raise_()
                except Exception:
                    pass
    
            self._position_log_clear_button = _position_clear_button
            _position_clear_button()
    
            # Event filter pro auto-reposition p≈ôi Show/Resize
            class _ClearPosFilter(QObject):
                def __init__(self, outer):
                    super().__init__(outer)
                    self.outer = outer
    
                def eventFilter(self, obj, event):
                    if event.type() in (QEvent.Show, QEvent.Resize):
                        try:
                            self.outer._position_log_clear_button()
                        except Exception:
                            pass
                    return False
    
            if not hasattr(self, "_log_clear_pos_filter"):
                self._log_clear_pos_filter = _ClearPosFilter(self)
                parent_container.installEventFilter(self._log_clear_pos_filter)

    
    def _on_log_clear_click(self):
        """Handler pro kliknut√≠ na tlaƒç√≠tko vymaz√°n√≠ logu - bez potvrzovac√≠ho dialogu."""
        try:
            if hasattr(self, 'log_text') and self.log_text:
                self.log_text.clear()
                self.update_log("üóëÔ∏è Log vymaz√°n u≈æivatelem")
        except Exception as e:
            print(f"Chyba p≈ôi maz√°n√≠ logu: {e}")


    def _setup_dynamic_tab_widths(self):
        """Nastaven√≠ dynamick√© ≈°√≠≈ôky z√°lo≈æek - jin√Ω p≈ô√≠stup"""
        try:
            # 1) Zak√°z√°n√≠ scroll tlaƒç√≠tek
            self.tabs.setUsesScrollButtons(False)
            
            # 2) Nastaven√≠ tab bar policy
            tab_bar = self.tabs.tabBar()
            if tab_bar:
                tab_bar.setExpanding(False)
                tab_bar.setDrawBase(False)
                
                # 3) Nastaven√≠ minim√°ln√≠ ≈°√≠≈ôky pro ka≈ædou z√°lo≈æku
                tab_texts = []
                for i in range(self.tabs.count()):
                    tab_texts.append(self.tabs.tabText(i))
                
                # 4) V√Ωpoƒçet pot≈ôebn√© ≈°√≠≈ôky podle nejdel≈°√≠ho textu
                font = tab_bar.font()
                font.setBold(True)
                font.setPointSize(12)
                
                from PySide6.QtGui import QFontMetrics
                font_metrics = QFontMetrics(font)
                
                max_width = 0
                for text in tab_texts:
                    text_width = font_metrics.horizontalAdvance(text)
                    needed_width = text_width + 40  # padding
                    max_width = max(max_width, needed_width)
                
                # 5) Nastaven√≠ minim√°ln√≠ ≈°√≠≈ôky cel√©ho tab widgetu
                total_width = max_width * len(tab_texts) + 20  # +20 pro okraje
                self.tabs.setMinimumWidth(total_width)
                
                # 6) Nastaven√≠ tab size policy
                for i in range(self.tabs.count()):
                    tab_bar.setTabData(i, max_width)
                    
        except Exception as e:
            if hasattr(self, 'update_log'):
                self.update_log(f"‚ö†Ô∏è Chyba p≈ôi nastavov√°n√≠ ≈°√≠≈ôky z√°lo≈æek: {e}")

    def adopt_dark_theme_after_ui(self):
        """
        Aplikuje dark-theme vzhled; kompaktnƒõj≈°√≠ z√°lo≈æky a ovl√°dac√≠ prvky.
        """
        C = self._dark_palette()
        self._apply_dark_theme_base_qss()
    
        # Kompaktn√≠ z√°lo≈æky ‚Äì bez elide, men≈°√≠ padding
        self.tabs.setUsesScrollButtons(False)
        self.tabs.setElideMode(Qt.ElideNone)
        tab_qss = f"""
        QTabWidget::pane {{
            border: 1px solid {C['group_border']};
            border-radius: 5px;
            background-color: {C['bg2']};
        }}
        QTabBar::tab {{
            background-color: #303030;
            color: {C['text']};
            padding: 6px 10px;
            margin-right: 1px;
            border-top-left-radius: 5px;
            border-top-right-radius: 5px;
            font-weight: bold;
            font-size: 12px;
        }}
        QTabBar::tab:selected {{
            background-color: {C['accent']};
            color: #ffffff;
        }}
        QTabBar::tab:hover {{
            background-color: {C['accent_hover']};
            color: #000000;
        }}
        """
        self.tabs.setStyleSheet(tab_qss)
    
        # Stromy soubor≈Ø ‚Äì zachovat, jen se vol√° st√°vaj√≠c√≠ styling
        self._style_file_trees_dark()
    
        # Kompaktnƒõj≈°√≠ lineedity
        def _style_lineedit(w):
            if not w:
                return
            w.setStyleSheet(w.styleSheet() + f"""
            QLineEdit {{
                background-color: #212121;
                color: {C['text']};
                border: 1px solid {C['frame']};
                border-radius: 4px;
                padding: 4px 8px;
                selection-background-color: {C['accent']};
                selection-color: #ffffff;
                font-size: 11px;
            }}
            QLineEdit:focus {{
                border: 1px solid {C['accent']};
                background-color: #252525;
            }}
            """)
            try:
                if w.minimumHeight() > 34:
                    w.setMinimumHeight(28)
            except Exception:
                pass
    
        for name in ['edit_location_path', 'edit_clover_path', 'edit_output_folder',
                     'edit_pdf_filename', 'edit_copy_folder']:
            _style_lineedit(getattr(self, name, None))
    
        # Tlaƒç√≠tka ‚Äì m√≠rnƒõ men≈°√≠ v√Ω≈°ky a ≈°√≠≈ôky
        GREEN, RED, BLUE, ORNG, PURP, TEAL, GRAY = (
            C['GREEN'], C['RED'], C['BLUE'], C['ORNG'], C['PURP'], C['TEAL'], C['GRAY']
        )
        self._style_btn(getattr(self, 'btn_generate', None), *GREEN, min_w=150, min_h=36)
        self._style_btn(getattr(self, 'btn_stop', None), *RED, min_w=120, min_h=36)
        self._style_btn(getattr(self, 'btn_export_json', None), *BLUE, min_w=180, min_h=36)
        self._style_btn(getattr(self, 'btn_toggle_display', None), *PURP, min_w=120, min_h=34)
        self._style_btn(getattr(self, 'btn_open_output', None), *TEAL, min_w=170, min_h=30)
        self._style_btn(getattr(self, 'btn_close', None), *GRAY, min_w=120, min_h=30)
    
        # Browse tlaƒç√≠tka kompaktnƒõj≈°√≠
        for attr_name in dir(self):
            if attr_name.startswith('btn_browse') or attr_name == 'btn_generate_filename':
                btn = getattr(self, attr_name, None)
                if btn:
                    if attr_name == 'btn_generate_filename':
                        self._style_btn(btn, *ORNG, min_w=40, min_h=28)
                    else:
                        self._style_btn(btn, *BLUE, min_w=40, min_h=28)
    
        # Log panel ‚Äì men≈°√≠ p√≠smo, ji≈æ nastaveno jinde; jen QSS pro jistotu
        if hasattr(self, 'log_text') and self.log_text:
            self.log_text.setStyleSheet(f"""
            QTextEdit {{
                background-color: #1a1a1a;
                color: {C['text']};
                border: 1px solid {C['frame']};
                border-radius: 6px;
                font-family: monospace;
                font-size: 9px;
                selection-background-color: {C['accent']};
                selection-color: #ffffff;
            }}
            """)

    # ========== P≈ÆVODN√ç FUNKCIONALITA (z pdf_generator_window.py) ==========
        
    def initial_sync_trees(self):
        """Poƒç√°teƒçn√≠ synchronizace stromov√Ωch struktur po spu≈°tƒõn√≠ aplikace"""
        try:
            if hasattr(self, 'location_tree') and hasattr(self, 'clover_tree') and \
               hasattr(self, 'output_tree') and hasattr(self, 'copy_tree'):
                self.sync_paths_to_trees()
                self.update_log("üöÄ Aplikace spu≈°tƒõna - stromov√© struktury synchronizov√°ny")
            else:
                # Pokud stromy je≈°tƒõ nejsou vytvo≈ôen√©, zkus√≠me to znovu za chv√≠li
                QTimer.singleShot(200, self.initial_sync_trees)
        except Exception as e:
            self.update_log(f"‚ö†Ô∏è Chyba p≈ôi poƒç√°teƒçn√≠ synchronizaci: {str(e)}")

        
    def validate_clover_range(self):
        """Real-time validace existence ƒçty≈ôl√≠stk≈Ø v rozsahu N-M."""
        if not hasattr(self, 'clover_validation_label'): 
            return
            
        n, m = self.spin_n.value(), self.spin_m.value()
        clover_path = self.edit_clover_path.text().strip()
        
        if not clover_path or not os.path.isdir(clover_path):
            self.clover_validation_label.setText("üìÅ Zadejte platnou cestu k ƒçty≈ôl√≠stk≈Øm.")
            return
            
        if n > m:
            self.clover_validation_label.setText("‚ùå Chyba: N nem≈Ø≈æe b√Ωt vƒõt≈°√≠ ne≈æ M.")
            return
            
        try:
            files = os.listdir(clover_path)
            exts = {'.jpg', '.jpeg', '.png', '.heic', '.heif'}
            found_numbers = set()
            
            for file in files:
                if Path(file).suffix.lower() in exts:
                    try:
                        num_part = file.split('+')[0]
                        found_numbers.add(int(num_part))
                    except (ValueError, IndexError):
                        continue
            
            required = set(range(n, m + 1))
            missing = required - found_numbers
            
            if not missing:
                self.clover_validation_label.setText(f"‚úÖ V≈°ech {len(required)} ƒçty≈ôl√≠stk≈Ø nalezeno.")
            else:
                missing_str = ", ".join(map(str, sorted(list(missing))[:5]))
                if len(missing) > 5: 
                    missing_str += "..."
                self.clover_validation_label.setText(f"‚ö†Ô∏è Chyb√≠ {len(missing)} ƒçty≈ôl√≠stk≈Ø: {missing_str}")
                
        except Exception as e:
            self.clover_validation_label.setText(f"‚ùå Chyba p≈ôi kontrole: {e}")

    def create_log_area(self):
        log_group = QGroupBox("üìã Log generov√°n√≠")
        log_layout = QVBoxLayout()
        log_layout.setContentsMargins(8, 8, 8, 8)
        log_layout.setSpacing(6)
    
        self.log_text = QTextEdit()
        self.log_text.setReadOnly(True)
        # jemnƒõ men≈°√≠ font
        self.log_text.setFont(self._get_monospace_font(size=9))
    
        log_layout.addWidget(self.log_text)
        log_group.setLayout(log_layout)
        return log_group

    # FILE: gui/pdf_generator_window.py
    # CLASS: PdfGeneratorWindow
    # FUNKCE: create_file_browser_tab
    # NAHRAƒé TOUTO VERZ√ç (sjednocen√° z√°lo≈æka, bez vno≈ôov√°n√≠ dal≈°√≠ch groupbox≈Ø;
    #                     DnD funguje d√≠ky FileTreeView z create_file_tree_widget)
    
    def create_file_browser_tab(self):
        from PySide6.QtWidgets import QWidget, QVBoxLayout, QHBoxLayout, QSizePolicy
        from PySide6.QtWidgets import QTreeView  # pro nalezen√≠ vno≈ôen√©ho stromu
    
        tab = QWidget()
        tab_layout = QVBoxLayout(tab)
        tab_layout.setSpacing(6)
        tab_layout.setContentsMargins(8, 8, 8, 8)
    
        # Fixn√≠ cesty panel≈Ø
        output_path  = "/Users/safronus/Library/Mobile Documents/com~apple~CloudDocs/ƒåty≈ôl√≠stky/Generov√°n√≠ PDF/PDF k vyti≈°tƒõn√≠/"
        printed_path = "/Users/safronus/Library/Mobile Documents/com~apple~CloudDocs/ƒåty≈ôl√≠stky/Generov√°n√≠ PDF/Vyti≈°tƒõn√© PDF/"
    
        # POU≈ΩIJEME P≈ò√çMO jednotn√Ω widget (groupbox) z create_file_tree_widget ‚Äì ≈æ√°dn√© dal≈°√≠ obaly
        left_widget  = self.create_file_tree_widget("üíæ V√Ωstupn√≠ slo≈æka", output_path)
        right_widget = self.create_file_tree_widget("üñ®Ô∏è Vyti≈°tƒõn√© PDF", printed_path)
    
        # Vedle sebe, stejn√° velikost, pln√° v√Ω≈°ka
        row = QHBoxLayout()
        row.setSpacing(10)
        row.setContentsMargins(0, 0, 0, 0)
    
        left_widget.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        right_widget.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
    
        row.addWidget(left_widget, 1)
        row.addWidget(right_widget, 1)
    
        tab_layout.addLayout(row, 1)
        tab_layout.setStretch(0, 1)
    
        # Ulo≈æ reference na vno≈ôen√© stromy (FileTreeView je potomkem QTreeView)
        self.output_tree  = left_widget.findChild(QTreeView)
        self.printed_tree = right_widget.findChild(QTreeView)
    
        self.tabs.addTab(tab, "üìÇ P≈ôehled vygenerovan√Ωch PDF")

    def sync_paths_to_trees(self):
        """(removed) D≈ô√≠vƒõj≈°√≠ tlaƒç√≠tko 'Synchronizovat cesty' bylo odstranƒõno."""
        return

    # FILE: gui/pdf_generator_window.py
    # CLASS: PdfGeneratorWindow
    # FUNCTION: create_file_tree_widget
    # NAHRAƒé CEL√ù OBSAH FUNKCE TOUTO VERZ√ç (oprava: QAbstractItemView.ExtendedSelection)
    
    def create_file_tree_widget(self, title, path):
        """Vytvo≈ô√≠ widget se stromovou strukturou soubor≈Ø ‚Äì jednotn√Ω vzhled, pln√° v√Ω≈°ka, funkƒçn√≠ DnD (FileTreeView)."""
        from PySide6.QtWidgets import (
            QGroupBox, QVBoxLayout, QLabel, QSizePolicy, QFileSystemModel, QHeaderView, QAbstractItemView
        )
        from PySide6.QtCore import Qt, QSize
        import os
    
        group = QGroupBox(title)
        group.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
    
        layout = QVBoxLayout()
        layout.setContentsMargins(10, 10, 10, 10)
        layout.setSpacing(4)
    
        # 1) Hlaviƒçka s plnou cestou (jedno≈ô√°dkov√°, kop√≠rovateln√°)
        path_label = QLabel()
        path_label.setWordWrap(False)
        path_label.setTextInteractionFlags(Qt.TextSelectableByMouse)
        if path and os.path.exists(path):
            path_label.setText(f"üìÇ {path}")
            path_label.setToolTip(path)
        else:
            path_label.setText("üìÇ Cesta nen√≠ nastavena nebo neexistuje")
        layout.addWidget(path_label)
    
        # 2) Strom ‚Äì pou≈æit√≠ FileTreeView (m√° implementovan√Ω hromadn√Ω Drag&Drop MOVE)
        tree = FileTreeView()
        tree.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        tree.setUniformRowHeights(True)
        tree.setRootIsDecorated(True)
        tree.setAlternatingRowColors(False)
        tree.setIndentation(18)
        tree.setIconSize(QSize(16, 16))
        tree.setSelectionMode(QAbstractItemView.ExtendedSelection)  # ‚Üê FIX: pou≈æ√≠t enum z QAbstractItemView
    
        # Jednotn√Ω stylesheet (obƒõ strany identicky)
        tree.setStyleSheet("""
            QTreeView {
                background-color: #1f1f1f;
                color: #e6e6e6;
                border: 1px solid #555;
                outline: none;
            }
            QTreeView::item { padding: 2px 6px; }
            QTreeView::item:selected { background-color: #2a3b4f; }
            QHeaderView::section {
                background-color: #2a2a2a;
                color: #cccccc;
                padding: 2px 6px;
                border: 1px solid #444;
            }
        """)
    
        # 3) Model + filtry
        model = QFileSystemModel()
        model.setRootPath(path if path and os.path.exists(path) else "")
    
        tl = (title or "").lower()
        if "ƒçty≈ôl√≠st" in tl or "clover" in tl:
            model.setNameFilters(["*.jpg", "*.jpeg", "*.png", "*.heic", "*.heif", "*.tiff", "*.tif", "*.bmp"])
            model.setNameFilterDisables(False)
        elif "mapky" in tl or "location" in tl:
            model.setNameFilters(["*.jpg", "*.jpeg", "*.png", "*.pdf"])
            model.setNameFilterDisables(False)
        elif "v√Ωstup" in tl or "output" in tl or "pdf" in tl or "vyti≈°tƒõn√©" in tl:
            model.setNameFilters(["*.pdf"])
            model.setNameFilterDisables(False)
    
        tree.setModel(model)
        if path and os.path.exists(path):
            root_index = model.index(path)
            tree.setRootIndex(root_index)
    
        # Sloupce + header ‚Äì sjednocen√©
        header = tree.header()
        header.setStretchLastSection(True)
        header.setSectionResizeMode(0, QHeaderView.Stretch)
        tree.hideColumn(1)  # Size
        tree.hideColumn(2)  # Type
        tree.hideColumn(3)  # Date Modified
    
        # Kontextov√© menu ‚Äì zachov√°no
        tree.setContextMenuPolicy(Qt.CustomContextMenu)
        tree.customContextMenuRequested.connect(
            lambda pos: self.show_tree_context_menu(tree, pos, model)
        )
    
        # Reference (pro refresh po DnD ve FileTreeView)
        tree.file_model = model
        tree.root_path = path or ""
        tree.path_label = path_label
    
        layout.addWidget(tree, stretch=1)
        group.setLayout(layout)
        return group
    
    def show_tree_context_menu(self, tree, position, model):
        """Zobraz√≠ kontextov√© menu pro stromovou strukturu"""

        indexes = tree.selectedIndexes()
        if not indexes:
            return

        menu = QMenu(tree)

        # Z√≠sk√°n√≠ cesty k souboru
        index = indexes[0]
        file_path = model.filePath(index)
        is_dir = model.isDir(index)

        # Akce menu
        if not is_dir:
            # Otev≈ô√≠t soubor
            open_action = QAction("üìÇ Otev≈ô√≠t", menu)
            open_action.triggered.connect(lambda: self.open_file(file_path))
            menu.addAction(open_action)

            menu.addSeparator()

        # P≈ôejmenovat
        rename_action = QAction("‚úèÔ∏è P≈ôejmenovat", menu)
        rename_action.triggered.connect(lambda: self.rename_file(tree, model, index))
        menu.addAction(rename_action)

        # Kop√≠rovat
        copy_action = QAction("üìã Kop√≠rovat", menu)
        copy_action.triggered.connect(lambda: self.copy_files(tree, model))
        menu.addAction(copy_action)

        # Vlo≈æit (pokud je nƒõco ve schr√°nce)
        if hasattr(self, 'clipboard_files') and self.clipboard_files:
            paste_action = QAction("üì• Vlo≈æit", menu)
            paste_action.triggered.connect(lambda: self.paste_files(tree, model, index))
            menu.addAction(paste_action)

        menu.addSeparator()

        # Smazat
        delete_action = QAction("üóëÔ∏è Smazat", menu)
        delete_action.triggered.connect(lambda: self.delete_files(tree, model))
        menu.addAction(delete_action)

        menu.addSeparator()

        # Obnovit
        refresh_action = QAction("üîÑ Obnovit", menu)
        refresh_action.triggered.connect(lambda: self.refresh_tree(tree))
        menu.addAction(refresh_action)

        menu.exec_(tree.mapToGlobal(position))

    def open_file(self, file_path):
        """Otev≈ôe soubor v defaultn√≠ aplikaci"""
        import subprocess
        import platform

        try:
            if platform.system() == 'Darwin':  # macOS
                subprocess.Popen(['open', file_path])
            elif platform.system() == 'Windows':
                subprocess.Popen(['start', file_path], shell=True)
            else:  # Linux
                subprocess.Popen(['xdg-open', file_path])
            self.update_log(f"üìÇ Otev≈ôen soubor: {os.path.basename(file_path)}")
        except Exception as e:
            QMessageBox.warning(self, "Chyba", f"Nepoda≈ôilo se otev≈ô√≠t soubor:\n{str(e)}")

    def rename_file(self, tree, model, index):
        """P≈ôejmenuje soubor nebo slo≈æku"""
        from PySide6.QtWidgets import QInputDialog

        old_path = model.filePath(index)
        old_name = os.path.basename(old_path)

        new_name, ok = QInputDialog.getText(
            self,
            "P≈ôejmenovat",
            "Nov√Ω n√°zev:",
            text=old_name
        )

        if ok and new_name and new_name != old_name:
            new_path = os.path.join(os.path.dirname(old_path), new_name)
            try:
                os.rename(old_path, new_path)
                self.update_log(f"‚úèÔ∏è P≈ôejmenov√°no: {old_name} ‚Üí {new_name}")
                self.refresh_tree(tree)
            except Exception as e:
                QMessageBox.warning(self, "Chyba", f"Nepoda≈ôilo se p≈ôejmenovat:\n{str(e)}")

    def copy_files(self, tree, model):
        """Zkop√≠ruje vybran√© soubory do schr√°nky"""
        indexes = tree.selectedIndexes()
        if not indexes:
            return

        # Z√≠sk√°n√≠ unik√°tn√≠ch cest (ka≈æd√Ω soubor m√° 4 indexy - n√°zev, velikost, typ, datum)
        paths = list(set([model.filePath(idx) for idx in indexes if idx.column() == 0]))

        self.clipboard_files = paths
        self.clipboard_operation = 'copy'
        self.update_log(f"üìã Zkop√≠rov√°no {len(paths)} polo≈æek do schr√°nky")

    def _get_monospace_font(self, size=11):
        """Vr√°t√≠ platformovƒõ-specifick√Ω monospace font."""
        if sys.platform == "darwin":
            return QFont("Monaco", size)
        elif sys.platform.startswith("win"):
            return QFont("Consolas", size)
        else:
            return QFont("DejaVu Sans Mono", size)

    def paste_files(self, tree, model, index):
        """Vlo≈æ√≠ soubory ze schr√°nky"""
        import shutil

        if not hasattr(self, 'clipboard_files') or not self.clipboard_files:
            return

        # Urƒçen√≠ c√≠lov√© slo≈æky
        target_path = model.filePath(index)
        if not model.isDir(index):
            target_path = os.path.dirname(target_path)

        success_count = 0
        for source_path in self.clipboard_files:
            try:
                filename = os.path.basename(source_path)
                dest_path = os.path.join(target_path, filename)

                # Kontrola duplicity
                if os.path.exists(dest_path):
                    base, ext = os.path.splitext(filename)
                    counter = 1
                    while os.path.exists(dest_path):
                        dest_path = os.path.join(target_path, f"{base}_{counter}{ext}")
                        counter += 1

                if os.path.isdir(source_path):
                    shutil.copytree(source_path, dest_path)
                else:
                    shutil.copy2(source_path, dest_path)
                success_count += 1

            except Exception as e:
                self.update_log(f"‚ùå Chyba p≈ôi kop√≠rov√°n√≠ {filename}: {str(e)}")

        if success_count > 0:
            self.update_log(f"‚úÖ Vlo≈æeno {success_count} polo≈æek")
            self.refresh_tree(tree)

    def delete_files(self, tree, model):
        """Sma≈æe vybran√© soubory"""
        import shutil

        indexes = tree.selectedIndexes()
        if not indexes:
            return

        # Z√≠sk√°n√≠ unik√°tn√≠ch cest
        paths = list(set([model.filePath(idx) for idx in indexes if idx.column() == 0]))

        # Potvrzen√≠
        reply = QMessageBox.question(
            self,
            "Potvrzen√≠ smaz√°n√≠",
            f"Opravdu chcete smazat {len(paths)} polo≈æek?",
            QMessageBox.Yes | QMessageBox.No
        )

        if reply == QMessageBox.Yes:
            success_count = 0
            for path in paths:
                try:
                    if os.path.isdir(path):
                        shutil.rmtree(path)
                    else:
                        os.remove(path)
                    success_count += 1
                except Exception as e:
                    self.update_log(f"‚ùå Chyba p≈ôi maz√°n√≠ {os.path.basename(path)}: {str(e)}")

            if success_count > 0:
                self.update_log(f"üóëÔ∏è Smaz√°no {success_count} polo≈æek")
                self.refresh_tree(tree)

    def refresh_tree(self, tree):
        """Obnov√≠ stromovou strukturu"""
        if hasattr(tree, 'file_model'):
            # Trigger refresh modelu
            tree.file_model.setRootPath("")
            tree.file_model.setRootPath(tree.root_path)
            if tree.root_path and os.path.exists(tree.root_path):
                tree.setRootIndex(tree.file_model.index(tree.root_path))

    # FILE: gui/pdf_generator_window.py
    # CLASS: PdfGeneratorWindow
    # (POKUD V T√âTO T≈ò√çDƒö EXISTUJ√ç N√ÅSLEDUJ√çC√ç HANDLERY, NAHRAƒé JE NO-OP VERZ√ç)
    # D≈Øvod: tlaƒç√≠tka byla odstranƒõna, a≈• nic jin√©ho v k√≥du nespadne p≈ôi p≈ô√≠padn√Ωch odkazech.
    
    def refresh_all_trees(self):
        """(removed) D≈ô√≠vƒõj≈°√≠ tlaƒç√≠tko 'Obnovit v≈°echny stromy' bylo odstranƒõno."""
        return
        
    def init_ui(self):
        """
        Sestaven√≠ kompletn√≠ho u≈æivatelsk√©ho rozhran√≠ okna pro gener√°tor PDF ‚Äì kompaktnƒõj≈°√≠ rozvr≈æen√≠.
        """
        main_layout = QVBoxLayout(self)
        main_layout.setSpacing(12)
        main_layout.setContentsMargins(14, 14, 14, 14)
    
        content_layout = QHBoxLayout()
        content_layout.setSpacing(14)
    
        # Lev√° ƒç√°st
        left_widget = QWidget()
        self.left_layout = QVBoxLayout(left_widget)
        self.left_layout.setContentsMargins(0, 0, 0, 0)
        self.left_layout.setSpacing(12)
    
        self.tabs = QTabWidget()
        self.create_basic_settings_tab()
        self.create_location_config_tab()
        self.create_notes_tab()          # ‚úÖ Nejd≈ô√≠ve vytvo≈ôit notes_text
        self.create_status_config_tab()  # ‚úÖ Teprve pak na nƒõj odkazovat
        self.create_file_browser_tab()
        self.left_layout.addWidget(self.tabs)
    
        # Kompaktnƒõj≈°√≠ progress bary
        self.progress_bar_loading = QProgressBar()
        self.progress_bar_loading.setFormat("üì• Naƒç√≠t√°n√≠ dat: %p%")
        self.progress_bar_loading.setVisible(False)
        self.progress_bar_loading.setMinimumHeight(16)
    
        self.progress_bar_combining = QProgressBar()
        self.progress_bar_combining.setFormat("üé® Kombinov√°n√≠ obr√°zk≈Ø: %p%")
        self.progress_bar_combining.setVisible(False)
        self.progress_bar_combining.setMinimumHeight(16)
    
        self.progress_bar_saving = QProgressBar()
        self.progress_bar_saving.setFormat("üíæ Ukl√°d√°n√≠ PDF: %p%")
        self.progress_bar_saving.setVisible(False)
        self.progress_bar_saving.setMinimumHeight(16)
    
        self.left_layout.addWidget(self.progress_bar_loading)
        self.left_layout.addWidget(self.progress_bar_combining)
        self.left_layout.addWidget(self.progress_bar_saving)
    
        # Ovl√°dac√≠ tlaƒç√≠tka
        button_widget = self.create_control_buttons()
        self.left_layout.addWidget(button_widget)
    
        # Prav√° ƒç√°st ‚Äì log panel u≈æ≈°√≠
        log_group = self.create_log_area()
        log_group.setMinimumWidth(520)
        log_group.setMaximumWidth(640)
    
        content_layout.addWidget(left_widget, stretch=3)
        content_layout.addWidget(log_group, stretch=1)
        main_layout.addLayout(content_layout)
    
        self._mark_log_ready()
    
        # Sign√°ly (beze zmƒõn)
        self.spin_n.valueChanged.connect(self.update_pdf_filename)
        self.spin_m.valueChanged.connect(self.update_pdf_filename)
        self.edit_output_folder.textChanged.connect(self.update_full_pdf_path_preview)
    
        from PySide6.QtGui import QShortcut, QKeySequence
        sc_close = QShortcut(QKeySequence(QKeySequence.Close), self)
        sc_close.activated.connect(self.reject)
    
        self.setMinimumWidth(1400)
        self.tabs.setMinimumWidth(1100)
        
        if hasattr(self, 'notes_text'):
            self.notes_text.textChanged.connect(self.check_states_without_notes_real_time)


    def start_clover_validation_timer(self):
        """Spu≈°tƒõn√≠ automatick√© validace ƒçty≈ôl√≠stk≈Ø ka≈æd√Ωch 5 sekund"""
        if not self.clover_validation_enabled:
            self.clover_validation_enabled = True
            if not self.clover_validation_timer.isActive():
                self.clover_validation_timer.start(5000)  # 5 sekund = 5000ms
                if hasattr(self, 'update_log'):
                    self.update_log("üîÑ Spu≈°tƒõna automatick√° validace ƒçty≈ôl√≠stk≈Ø (ka≈æd√Ωch 5s)")

    def stop_clover_validation_timer(self):
        """Zastaven√≠ automatick√© validace ƒçty≈ôl√≠stk≈Ø"""
        if self.clover_validation_enabled:
            self.clover_validation_enabled = False
            if self.clover_validation_timer.isActive():
                self.clover_validation_timer.stop()
                if hasattr(self, 'update_log'):
                    self.update_log("‚èπÔ∏è Zastavena automatick√° validace ƒçty≈ôl√≠stk≈Ø")

    def toggle_clover_validation_timer(self):
        """P≈ôepnut√≠ automatick√© validace ƒçty≈ôl√≠stk≈Ø"""
        if self.clover_validation_enabled:
            self.stop_clover_validation_timer()
        else:
            # Spust√≠ se automatically v validate_clover_range() pokud jsou podm√≠nky splnƒõny
            self.validate_clover_range()

    def create_control_buttons(self):
        widget = QWidget()
        layout = QHBoxLayout(widget)
        layout.setSpacing(10)
        
        self.btn_generate = QPushButton("üöÄ Generovat PDF")
        self.btn_stop = QPushButton("‚èπÔ∏è Zastavit")
        self.btn_stop.setEnabled(False)
        
        # NOV√â: Tlaƒç√≠tko pro export JSON nastaven√≠
        self.btn_export_json = QPushButton("üì§ Exportovat JSON nastaven√≠")
        self.btn_export_json.setToolTip("Exportuje nastaven√≠ lokac√≠, stav≈Ø a pozn√°mek do jednoho JSON souboru")
        
        layout.addStretch()
        layout.addWidget(self.btn_generate)
        layout.addWidget(self.btn_stop)
        layout.addStretch()  # Oddƒõl√≠ lev√° tlaƒç√≠tka od prav√©ho
        layout.addWidget(self.btn_export_json)  # Um√≠st√≠ zcela vpravo
        
        # Propojen√≠ sign√°l≈Ø
        self.btn_generate.clicked.connect(self.generate_pdf)
        self.btn_stop.clicked.connect(self.stop_generation)
        self.btn_export_json.clicked.connect(self.export_json_settings)  # NOV√â
        
        return widget

    # Ve t≈ô√≠dƒõ PDFGeneratorWindow v souboru pdf_generator_window.py

    def update_pdf_filename(self):
        """Aktualizuje n√°zev souboru v editovateln√©m poli podle rozsahu a poƒçtu str√°nek."""
        if not self.checkbox_auto_filename.isChecked():
            self.label_pdf_filename.setText("Ruƒçn√≠ n√°zev PDF")
            return
    
        n = self.spin_n.value()
        m = self.spin_m.value()
    
        if m < n:
            self.edit_pdf_filename.setText("Chybn√Ω rozsah N > M")
            self.label_pdf_filename.setText("Automatick√Ω n√°zev PDF (i p≈ôi chybƒõ)")
            self.update_full_pdf_path_preview()
            return
    
        pages_per_pdf = self.spin_pages_per_pdf.value()
        total_images = m - n + 1
        IMAGES_PER_PAGE = 5
        IMAGES_PER_PDF = IMAGES_PER_PAGE * pages_per_pdf
    
        if total_images <= 0:
            num_pdfs = 0
        else:
            num_pdfs = (total_images + IMAGES_PER_PDF - 1) // IMAGES_PER_PDF
    
        # ZDE JE PO≈ΩADOVAN√Å ZMƒöNA
        base_prefix = "F"
    
        filenames = []
        if num_pdfs <= 1:
            filenames.append(f"{base_prefix}-{n}-{m}.pdf")
            self.label_pdf_filename.setText("Automatick√Ω n√°zev PDF")
        else:
            for i in range(num_pdfs):
                start_num = n + (i * IMAGES_PER_PDF)
                end_num = min(m, start_num + IMAGES_PER_PDF - 1)
                filenames.append(f"{base_prefix}-{start_num}-{end_num}.pdf")
            self.label_pdf_filename.setText("Automatick√© n√°zvy PDF")
    
        self.edit_pdf_filename.setText(", ".join(filenames))
        self.update_full_pdf_path_preview()


    def update_full_pdf_path_preview(self):
        """Aktualizuje n√°hled cesty k PDF a reaguje na zmƒõnu poƒçtu stran."""
        output_folder = self.edit_output_folder.text().strip()
        
        if not self.checkbox_auto_filename.isChecked() or not output_folder:
            # ... (st√°vaj√≠c√≠ k√≥d pro manu√°ln√≠ re≈æim nebo chybƒõj√≠c√≠ slo≈æku) ...
            return

        n = self.spin_n.value()
        m = self.spin_m.value()
        pages_per_pdf = self.spin_pages_per_pdf.value()
        
        if m < n:
            self.label_full_pdf_path.setText("‚ùå Chybn√Ω rozsah (N > M)")
            self.label_full_pdf_path.setToolTip("")
            return
        
        total_images = m - n + 1
        IMAGES_PER_PAGE = 5
        IMAGES_PER_PDF = IMAGES_PER_PAGE * pages_per_pdf
        num_pdfs = (total_images + IMAGES_PER_PDF - 1) // IMAGES_PER_PDF if total_images > 0 else 1
        
        base_prefix = "E"
        future_files = []
        if num_pdfs <= 1:
            future_files.append(f"{base_prefix}-{n}-{m}.pdf")
        else:
            for i in range(num_pdfs):
                start_num = n + i * IMAGES_PER_PDF
                end_num = min(m, start_num + IMAGES_PER_PDF - 1)
                future_files.append(f"{base_prefix}-{start_num}-{end_num}.pdf")

        folder_exists = os.path.isdir(output_folder)
        existing_files = []
        non_existing_files = []
        
        if folder_exists:
            for fname in future_files:
                if os.path.exists(os.path.join(output_folder, fname)):
                    existing_files.append(fname)
                else:
                    non_existing_files.append(fname)

        # Sestaven√≠ zpr√°vy pro UI
        tooltip_lines = [f"V√Ωstupn√≠ slo≈æka: {output_folder}"]
        
        if not folder_exists:
            icon, color, bg_color, status = "‚ùå", "#e74c3c", "#fadbd8", "Slo≈æka neexistuje!"
            tooltip_lines.append(f"Status: {status}")
        elif existing_files:
            icon, color, bg_color, status = "‚ö†Ô∏è", "#f39c12", "#fef9e7", "Nƒõkter√© soubory budou p≈ôeps√°ny!"
            tooltip_lines.append(f"Status: {status}")
            if existing_files:
                tooltip_lines.append("\nSoubory k p≈ôeps√°n√≠:")
                tooltip_lines.extend([f"  - {f}" for f in existing_files])
            if non_existing_files:
                tooltip_lines.append("\nNov√© soubory k vytvo≈ôen√≠:")
                tooltip_lines.extend([f"  - {f}" for f in non_existing_files])
        else:
            icon, color, bg_color, status = "‚úÖ", "#27ae60", "#d5f4e6", "P≈ôipraveno k vytvo≈ôen√≠"
            tooltip_lines.append(f"Status: {status}")
            tooltip_lines.append("\nSoubory k vytvo≈ôen√≠:")
            tooltip_lines.extend([f"  - {f}" for f in non_existing_files])
            
        main_text = f"{icon} {status}"
        if len(future_files) > 1:
            main_text = f"{icon} Celkem {len(future_files)} soubor≈Ø. {status}"

        self.label_full_pdf_path.setText(main_text)
        self.label_full_pdf_path.setToolTip("\n".join(tooltip_lines))
        self.label_full_pdf_path.setStyleSheet(f"""
            QLabel {{
                color: {color}; font-style: italic; font-size: 12px; font-weight: bold;
                padding: 10px 15px; background-color: {bg_color}; border: 2px solid {color};
                border-radius: 6px; margin: 5px 0px;
            }}""")

    def on_auto_filename_toggled(self, checked):
        """P≈ôep√≠n√° editovatelnost pole a aktualizuje n√°zev a label."""
        self.edit_pdf_filename.setEnabled(not checked)
        # Zavol√°me hlavn√≠ metodu, kter√° se postar√° o nastaven√≠ n√°zvu i labelu
        self.update_pdf_filename()

    def create_basic_settings_tab(self):
        """Vytvo≈ôen√≠ tabu z√°kladn√≠ch nastaven√≠ s nov√Ωm rozvr≈æen√≠m."""
        tab = QWidget()
        main_layout = QVBoxLayout(tab)
        main_layout.setSpacing(20)
        main_layout.setContentsMargins(20, 20, 20, 20)

        top_layout = QHBoxLayout()
        top_layout.setSpacing(25)

        # Skupina: Rozsah ƒçty≈ôl√≠stk≈Ø
        range_group = QGroupBox("üî¢ Rozsah a str√°nkov√°n√≠") # Zmƒõnƒõn n√°zev
        range_layout = QGridLayout(range_group)
        range_layout.setSpacing(15)
        
        self.spin_n = QSpinBox()
        self.spin_n.setRange(1, 200000)
        self.spin_m = QSpinBox()
        self.spin_m.setRange(1, 200000)
        
        # NOV√ù PRVEK: Poƒçet stran na PDF
        self.spin_pages_per_pdf = QSpinBox()
        self.spin_pages_per_pdf.setRange(1, 1000) # Rozsah 1-1000 stran
        self.spin_pages_per_pdf.setValue(10) # V√Ωchoz√≠ hodnota

        range_layout.addWidget(QLabel("Prvn√≠ ƒçty≈ôl√≠stek (N):"), 0, 0)
        range_layout.addWidget(self.spin_n, 0, 1)
        range_layout.addWidget(QLabel("Posledn√≠ ƒçty≈ôl√≠stek (M):"), 1, 0)
        range_layout.addWidget(self.spin_m, 1, 1)
        range_layout.addWidget(QLabel("Max. stran na jedno PDF:"), 2, 0)
        range_layout.addWidget(self.spin_pages_per_pdf, 2, 1)

        self.clover_validation_label = QLabel("Pro validaci zadejte cesty a rozsah.")
        self.clover_validation_label.setWordWrap(True)
        range_layout.addWidget(self.clover_validation_label, 3, 0, 1, 2)
        
        # --- P≈ôehled min/max/poƒçet ve slo≈æce ƒçty≈ôl√≠stk≈Ø (nov√©) ---
        stats_row = 4  # dal≈°√≠ voln√Ω ≈ô√°dek v gridu
        stats_layout = QHBoxLayout()
        stats_layout.setSpacing(6)
        
        self.clover_stats_label = QLabel("Nalezeno: ‚Äî (0)")
        self.clover_stats_label.setToolTip("P≈ôehled ƒç√≠sel ve slo≈æce 'Obr√°zky ke zpracov√°n√≠'")
        
        btn_refresh_stats = QPushButton("‚Üª")
        btn_refresh_stats.setFixedSize(28, 28)
        btn_refresh_stats.setToolTip("Obnovit p≈ôehled min‚Äìmax‚Äìpoƒçet")
        btn_refresh_stats.clicked.connect(self.update_clover_stats_label)
        
        stats_layout.addWidget(self.clover_stats_label)
        stats_layout.addStretch()
        stats_layout.addWidget(btn_refresh_stats)
        
        range_layout.addLayout(stats_layout, stats_row, 0, 1, 2)

        # ‚úÖ NOV√â: P≈ôehled str√°nek PDF
        pdf_stats_row = 5  # dal≈°√≠ voln√Ω ≈ô√°dek
        self.pdf_pages_stats_label = QLabel("Celkem stran: ‚Äî | Posledn√≠ PDF: ‚Äî stran")
        self.pdf_pages_stats_label.setToolTip("P≈ôehled celkov√©ho poƒçtu stran a stran v posledn√≠m PDF")
        self.pdf_pages_stats_label.setStyleSheet("""
            QLabel {
                color: #2196F3;
                font-weight: bold;
                padding: 4px 8px;
                background-color: #1e3a5f;
                border: 1px solid #2196F3;
                border-radius: 4px;
            }
        """)
        range_layout.addWidget(self.pdf_pages_stats_label, pdf_stats_row, 0, 1, 2)

        # Skupina: Cesty k soubor≈Øm
        paths_group = QGroupBox("üìÅ Cesty k soubor≈Øm a slo≈æk√°m")
        paths_layout = QGridLayout(paths_group)
        paths_layout.setSpacing(15)
        
        self.edit_location_path = QLineEdit()
        self.edit_clover_path = QLineEdit()
        self.edit_output_folder = QLineEdit()
        
        paths_layout.addWidget(QLabel("Cesta k mapk√°m lokac√≠:"), 0, 0)
        paths_layout.addWidget(self._create_path_widget(self.edit_location_path), 0, 1)
        paths_layout.addWidget(QLabel("Cesta k fotk√°m ƒçty≈ôl√≠stk≈Ø:"), 1, 0)
        paths_layout.addWidget(self._create_path_widget(self.edit_clover_path), 1, 1)
        paths_layout.addWidget(QLabel("V√Ωstupn√≠ slo≈æka pro PDF:"), 2, 0)
        paths_layout.addWidget(self._create_path_widget(self.edit_output_folder), 2, 1)
        
        top_layout.addWidget(range_group)
        top_layout.addWidget(paths_group)
        main_layout.addLayout(top_layout)

        # N√°zev PDF souboru (zbytek z≈Øst√°v√° stejn√Ω)
        filename_group = QGroupBox("üìÑ N√°zev PDF souboru")
        filename_layout = QGridLayout(filename_group)
        filename_layout.setSpacing(10)
        self.checkbox_auto_filename = QCheckBox("Generovat n√°zev automaticky (nap≈ô. F-N-M.pdf)")
        self.checkbox_auto_filename.setChecked(True)
        self.checkbox_auto_filename.toggled.connect(self.on_auto_filename_toggled)
        self.edit_pdf_filename = QLineEdit()
        self.edit_pdf_filename.setEnabled(False)
        self.label_full_pdf_path = QLabel("Zadejte v√Ωstupn√≠ slo≈æku a n√°zev souboru")
        self.label_full_pdf_path.setWordWrap(True)
        filename_layout.addWidget(self.checkbox_auto_filename, 0, 0, 1, 2)
        self.label_pdf_filename = QLabel("Ruƒçn√≠ n√°zev PDF:") # Ulo≈æ√≠me si referenci
        filename_layout.addWidget(self.label_pdf_filename, 1, 0)
        filename_layout.addWidget(self.edit_pdf_filename, 1, 1)
        filename_layout.addWidget(QLabel("Kontrola v√Ωstupn√≠ slo≈æky PDF:"), 2, 0)
        filename_layout.addWidget(self.label_full_pdf_path, 2, 1)
        main_layout.addWidget(filename_group)

        copy_group = QGroupBox("üìã Kop√≠rov√°n√≠ a p≈ôejmenov√°n√≠ miniatur")
        copy_layout = QHBoxLayout(copy_group)
        copy_layout.setSpacing(10)
        self.checkbox_copy_enabled = QCheckBox("Povolit kop√≠rov√°n√≠")
        self.checkbox_copy_enabled.toggled.connect(lambda checked: self.edit_copy_folder.setEnabled(checked))
        self.edit_copy_folder = QLineEdit()
        self.edit_copy_folder.setEnabled(False)
        copy_layout.addWidget(self.checkbox_copy_enabled)
        copy_layout.addWidget(QLabel("C√≠lov√° slo≈æka pro kopie:"))
        copy_layout.addWidget(self._create_path_widget(self.edit_copy_folder))
        main_layout.addWidget(copy_group)
        main_layout.addStretch()

        self.tabs.addTab(tab, "‚öôÔ∏è Z√°kladn√≠ nastaven√≠")

        # Propojen√≠ sign√°l≈Ø
        self.spin_n.valueChanged.connect(self._trigger_clover_validation)
        self.spin_m.valueChanged.connect(self._trigger_clover_validation)
        self.edit_clover_path.textChanged.connect(self.update_clover_stats_label)
        # NOV√â: P≈ôidejte tento ≈ô√°dek
        self.edit_clover_path.textChanged.connect(self.update_missing_photos_list)
        # NOV√â: P≈ôipojen√≠ watcheru p≈ôi zmƒõnƒõ cesty
        self.edit_clover_path.textChanged.connect(self._refresh_clover_watcher)
        self.edit_output_folder.textChanged.connect(self._refresh_output_watcher)
        
        # V≈°echny relevantn√≠ zmƒõny nyn√≠ volaj√≠ JEDNU metodu pro aktualizaci n√°zvu
        self.spin_n.valueChanged.connect(self.update_pdf_filename)
        self.spin_m.valueChanged.connect(self.update_pdf_filename)
        self.spin_pages_per_pdf.valueChanged.connect(self.update_pdf_filename)

        # ‚úÖ NOV√â: P≈ôipojen√≠ aktualizace statistik str√°nek PDF
        self.spin_n.valueChanged.connect(self.update_pdf_pages_stats)
        self.spin_m.valueChanged.connect(self.update_pdf_pages_stats)
        self.spin_pages_per_pdf.valueChanged.connect(self.update_pdf_pages_stats)

        # N√°hled cesty se aktualizuje pouze p≈ôi zmƒõnƒõ slo≈æky, nebo jako d≈Øsledek zmƒõny n√°zvu
        self.edit_output_folder.textChanged.connect(self.update_full_pdf_path_preview)
        # Tento sign√°l u≈æ nen√≠ pot≈ôeba, proto≈æe `update_pdf_filename` vol√° `update_full_pdf_path_preview`
        # self.edit_pdf_filename.textChanged.connect(self.update_full_pdf_path_preview) 

    def calculate_pdf_pages_stats(self):
        """Vypoƒç√≠t√° celkov√Ω poƒçet stran PDF a poƒçet stran posledn√≠ho PDF."""
        try:
            n = self.spin_n.value()
            m = self.spin_m.value()
            pages_per_pdf = self.spin_pages_per_pdf.value()
            
            if m < n:
                return None, None, "Chybn√Ω rozsah (N > M)"
            
            total_images = m - n + 1
            IMAGES_PER_PAGE = 5
            IMAGES_PER_PDF = IMAGES_PER_PAGE * pages_per_pdf
            
            if total_images <= 0:
                return 0, 0, "≈Ω√°dn√© obr√°zky"
            
            # V√Ωpoƒçet poƒçtu PDF soubor≈Ø
            num_pdfs = (total_images + IMAGES_PER_PDF - 1) // IMAGES_PER_PDF
            
            if num_pdfs <= 1:
                # Jen jeden PDF
                pages_needed = (total_images + IMAGES_PER_PAGE - 1) // IMAGES_PER_PAGE
                total_pages = pages_needed
                last_pdf_pages = pages_needed
            else:
                # V√≠ce PDF soubor≈Ø
                # Poƒçet pln√Ωch PDF (kromƒõ posledn√≠ho)
                full_pdfs = num_pdfs - 1
                total_pages_in_full_pdfs = full_pdfs * pages_per_pdf
                
                # Zb√Ωvaj√≠c√≠ obr√°zky pro posledn√≠ PDF
                remaining_images = total_images - (full_pdfs * IMAGES_PER_PDF)
                last_pdf_pages = (remaining_images + IMAGES_PER_PAGE - 1) // IMAGES_PER_PAGE
                
                total_pages = total_pages_in_full_pdfs + last_pdf_pages
            
            return total_pages, last_pdf_pages, None
            
        except Exception as e:
            return None, None, f"Chyba v√Ωpoƒçtu: {e}"
    
    def update_pdf_pages_stats(self):
        """Aktualizuje zobrazen√≠ statistik str√°nek PDF."""
        if not hasattr(self, 'pdf_pages_stats_label'):
            return
        
        total_pages, last_pdf_pages, error = self.calculate_pdf_pages_stats()
        
        if error:
            self.pdf_pages_stats_label.setText(f"‚ùå {error}")
            self.pdf_pages_stats_label.setStyleSheet("""
                QLabel {
                    color: #f44336;
                    font-weight: bold;
                    padding: 4px 8px;
                    background-color: #4a1a1a;
                    border: 1px solid #f44336;
                    border-radius: 4px;
                }
            """)
        elif total_pages is None or last_pdf_pages is None:
            self.pdf_pages_stats_label.setText("Celkem stran: ‚Äî | Posledn√≠ PDF: ‚Äî stran")
            self.pdf_pages_stats_label.setStyleSheet("""
                QLabel {
                    color: #888888;
                    font-weight: bold;
                    padding: 4px 8px;
                    background-color: #2a2a2a;
                    border: 1px solid #888888;
                    border-radius: 4px;
                }
            """)
        else:
            # Zjist√≠ poƒçet PDF soubor≈Ø pro lep≈°√≠ popis
            n = self.spin_n.value()
            m = self.spin_m.value()
            pages_per_pdf = self.spin_pages_per_pdf.value()
            total_images = m - n + 1
            IMAGES_PER_PDF = 5 * pages_per_pdf
            num_pdfs = (total_images + IMAGES_PER_PDF - 1) // IMAGES_PER_PDF if total_images > 0 else 1
            
            if num_pdfs <= 1:
                self.pdf_pages_stats_label.setText(f"üìÑ Celkem: {total_pages} stran (1 PDF)")
            else:
                self.pdf_pages_stats_label.setText(f"üìÑ Celkem: {total_pages} stran | Posledn√≠ PDF: {last_pdf_pages} stran")
            
            self.pdf_pages_stats_label.setStyleSheet("""
                QLabel {
                    color: #4CAF50;
                    font-weight: bold;
                    padding: 4px 8px;
                    background-color: #1a4a2a;
                    border: 1px solid #4CAF50;
                    border-radius: 4px;
                }
            """)
        
        # Tooltip s detailn√≠mi informacemi
        if total_pages is not None and last_pdf_pages is not None and not error:
            n = self.spin_n.value()
            m = self.spin_m.value()
            pages_per_pdf = self.spin_pages_per_pdf.value()
            total_images = m - n + 1
            IMAGES_PER_PDF = 5 * pages_per_pdf
            num_pdfs = (total_images + IMAGES_PER_PDF - 1) // IMAGES_PER_PDF if total_images > 0 else 1
            
            tooltip_lines = [
                f"Rozsah ƒçty≈ôl√≠stk≈Ø: {n} - {m} ({total_images} obr√°zk≈Ø)",
                f"Obr√°zk≈Ø na str√°nku: 5",
                f"Max. stran na PDF: {pages_per_pdf}",
                f"Obr√°zk≈Ø na PDF: {IMAGES_PER_PDF}",
                f"Poƒçet PDF soubor≈Ø: {num_pdfs}",
                f"Celkov√Ω poƒçet stran: {total_pages}",
                f"Stran v posledn√≠m PDF: {last_pdf_pages}"
            ]
            self.pdf_pages_stats_label.setToolTip("\n".join(tooltip_lines))
        else:
            self.pdf_pages_stats_label.setToolTip("Nastavte platn√Ω rozsah ƒçty≈ôl√≠stk≈Ø pro v√Ωpoƒçet str√°nek PDF")


    def scan_clover_numbers(self):
        r"""
        Prohled√° slo≈æku se ƒçty≈ôl√≠stky a vr√°t√≠ (min_n, max_m, count).
        Robustn√≠: pou≈æ√≠v√° os.scandir, rozpozn√° √∫vodn√≠ ƒç√≠sla regexem ^(\d+),
        a bere jen podporovan√© obrazov√© p≈ô√≠pony (case-insensitive).
        """
        import re, unicodedata
        path = (self.edit_clover_path.text() or "").strip()
        if not path or not os.path.isdir(path):
            return None, None, 0
    
        # Normalizace cesty kv≈Øli NFD/NFC na macOS (iCloud Drive s diakritikou)
        try:
            path = unicodedata.normalize("NFC", path)
        except Exception:
            pass
    
        exts = {'.jpg', '.jpeg', '.png', '.heic', '.heif', '.tiff', '.tif', '.bmp'}
        rx_leading_num = re.compile(r'^(\d+)')
        min_n = None
        max_m = None
        count = 0
    
        try:
            with os.scandir(path) as it:
                for de in it:
                    if not de.is_file():
                        continue
                    name = de.name
                    # Normalizace n√°zvu kv≈Øli diakritice v NFD
                    try:
                        name = unicodedata.normalize("NFC", name)
                    except Exception:
                        pass
                    ext = os.path.splitext(name)[1].lower()
                    if ext not in exts:
                        continue
                    m = rx_leading_num.match(name)
                    if not m:
                        continue
                    try:
                        num = int(m.group(1))
                    except Exception:
                        continue
                    count += 1
                    if (min_n is None) or (num < min_n):
                        min_n = num
                    if (max_m is None) or (num > max_m):
                        max_m = num
        except Exception:
            return None, None, 0
    
        return min_n, max_m, count
    
    
    def update_clover_stats_label(self):
        """
        Aktualizuje ≈°t√≠tek s p≈ôehledem podle obsahu slo≈æky ƒçty≈ôl√≠stk≈Ø.
        Nezasahuje do validace ani do spinbox≈Ø N/M.
        """
        min_n, max_m, count = self.scan_clover_numbers()
        if count <= 0 or min_n is None or max_m is None:
            self.clover_stats_label.setText("Nalezeno: ‚Äî (0)")
            self.clover_stats_label.setToolTip("Ve slo≈æce nebyly nalezeny ≈æ√°dn√© soubory ƒçty≈ôl√≠stk≈Ø nebo chyb√≠ √∫vodn√≠ ƒç√≠slo v n√°zvu")
            return
        self.clover_stats_label.setText(f"Nalezeno: {min_n} ‚Äì {max_m} ({count})")
        self.clover_stats_label.setToolTip(f"Nejmen≈°√≠: {min_n}\nNejvƒõt≈°√≠: {max_m}\nPoƒçet soubor≈Ø: {count}")

    def update_clover_stats_label(self):
        """
        Aktualizuje ≈°t√≠tek s p≈ôehledem podle obsahu slo≈æky ƒçty≈ôl√≠stk≈Ø.
        Nezasahuje do validace ani do spinbox≈Ø N/M.
        """
        min_n, max_m, count = self.scan_clover_numbers()
        if count <= 0 or min_n is None or max_m is None:
            self.clover_stats_label.setText("Nalezeno: ‚Äî (0)")
            self.clover_stats_label.setToolTip("Ve slo≈æce nebyly nalezeny ≈æ√°dn√© soubory ƒçty≈ôl√≠stk≈Ø")
            return
    
        self.clover_stats_label.setText(f"Nalezeno: {min_n} ‚Äì {max_m} ({count})")
        self.clover_stats_label.setToolTip(f"Nejmen≈°√≠: {min_n}\nNejvƒõt≈°√≠: {max_m}\nPoƒçet soubor≈Ø: {count}")

    def _trigger_clover_validation(self):
        """Pomocn√° metoda pro debounce validace."""
        self.clover_validation_timer.start(500)

    def browse_folder(self, target_edit):
        directory = QFileDialog.getExistingDirectory(self, "Vyberte slo≈æku", target_edit.text())
        if directory:
            target_edit.setText(directory)

    # FILE: gui/pdf_generator_window.py
    # CLASS: PdfGeneratorWindow
    # FUNCTION: create_location_config_tab
    # NAHRAƒé TOUTO VERZ√ç (odstranƒõna tlaƒç√≠tka: ‚Äûüìä Se≈ôadit lokace vzestupnƒõ‚Äú, ‚Äûüßπ Vyƒçistit neexistuj√≠c√≠ fotky‚Äú, ‚ÄûüóëÔ∏è Uklidit .bak soubory‚Äú)
    
    def create_location_config_tab(self):
        """Vytvo≈ôen√≠ tabu 'Nastaven√≠ lokac√≠' s JSON editorem a sekc√≠ 'Anal√Ωza fotek' vƒçetnƒõ tlaƒç√≠tka ‚úÇÔ∏è Rychl√Ω o≈ôez."""
        # Ko≈ôen tabu
        tab = QWidget()
        layout = QVBoxLayout(tab)
        layout.setContentsMargins(15, 15, 15, 15)
    
        # Indik√°tory (beze zmƒõny)
        indicators_layout = QVBoxLayout()
        indicators_layout.setSpacing(5)
    
        self.duplicates_indicator = QLabel()
        self.duplicates_indicator.setVisible(False)
        self.duplicates_indicator.setWordWrap(True)
        indicators_layout.addWidget(self.duplicates_indicator)
    
        self.missing_locations_indicator = QLabel()
        self.missing_locations_indicator.setVisible(False)
        self.missing_locations_indicator.setWordWrap(True)
        indicators_layout.addWidget(self.missing_locations_indicator)
    
        self.conflicts_indicator = QLabel()
        self.conflicts_indicator.setVisible(False)
        self.conflicts_indicator.setWordWrap(True)
        indicators_layout.addWidget(self.conflicts_indicator)
    
        layout.addLayout(indicators_layout)
    
        # Dvƒõ sloupce vedle sebe
        horizontal_layout = QHBoxLayout()
        horizontal_layout.setSpacing(15)
    
        # === Lev√Ω sloupec: Konfigurace lokac√≠ (JSON) ===
        config_group = QGroupBox("‚öôÔ∏è Konfigurace lokac√≠ (JSON)")
        config_layout = QVBoxLayout()
        config_layout.setContentsMargins(8, 8, 8, 8)
        config_group.setLayout(config_layout)
    
        self.location_config_text = QPlainTextEdit()
        self.location_config_text.setPlaceholderText(
            "{\n  \"36\": [\"13600-13680\", \"13681\"],\n  \"8\": [\"13300-13301\"]\n}\n"
        )
        # 2 mezery za tab
        self.location_config_text.setTabStopDistance(
            2 * self.location_config_text.fontMetrics().horizontalAdvance(' ')
        )
        self.location_config_text.setStyleSheet(
            "QPlainTextEdit {"
            "  font-family: Consolas, Menlo, Monaco, 'Courier New', monospace;"
            "  font-size: 11px;"
            "  background: #1e1e1e;"
            "  color: #dcdcdc;"
            "  border: 1px solid #3a3a3a;"
            "  border-radius: 6px;"
            "}"
        )
        config_layout.addWidget(self.location_config_text)
    
        # Ovl√°d√°n√≠/validace JSON (beze zmƒõny)
        validate_layout = QHBoxLayout()
        self.btn_validate_config = QPushButton("‚úÖ Validovat JSON")
        self.btn_validate_config.clicked.connect(self.validate_location_config)
        validate_layout.addWidget(self.btn_validate_config)
        validate_layout.addStretch()
        config_layout.addLayout(validate_layout)
    
        # Propojen√≠ ‚Äì pouze jednou (≈æ√°dn√© duplikace sign√°l≈Ø)
        self.location_config_text.textChanged.connect(self.update_missing_photos_list)
        self.location_config_text.textChanged.connect(self.trigger_all_location_checks)
    
        # === Prav√Ω sloupec: Anal√Ωza fotek ===
        missing_photos_group = QGroupBox("üìã Anal√Ωza fotek")
        missing_layout = QVBoxLayout()
        missing_layout.setContentsMargins(8, 8, 8, 8)
        missing_photos_group.setLayout(missing_layout)
    
        # Horn√≠ ≈ô√°dek se checkboxem a ‚úÇÔ∏è Rychl√Ω o≈ôez (jako ve star√© verzi)
        top_controls_layout = QHBoxLayout()
        top_controls_layout.setSpacing(20)
    
        self.show_all_photos_checkbox = QCheckBox("Zobrazit v≈°echny fotky (nez√°visle na p≈ôi≈ôazen√≠ lokac√≠)")
        self.show_all_photos_checkbox.setChecked(False)
        self.show_all_photos_checkbox.setToolTip(
            "Po za≈°krtnut√≠ zobraz√≠ v≈°echny fotky ve slo≈æce, nez√°visle na tom, zda maj√≠ p≈ôi≈ôazenou lokaci"
        )
        self.show_all_photos_checkbox.setStyleSheet("""
            QCheckBox {
                font-size: 10px;
            }
            QCheckBox::indicator {
                width: 10px;
                height: 10px;
            }
            QCheckBox::indicator:unchecked {
                border: 1px solid #555555;
                background-color: #2b2b2b;
                border-radius: 2px;
            }
            QCheckBox::indicator:checked {
                border: 1px solid #3498db;
                background-color: #3498db;
                border-radius: 2px;
            }
        """)
        self.show_all_photos_checkbox.stateChanged.connect(self.on_toggle_show_all_photos)
        top_controls_layout.addWidget(self.show_all_photos_checkbox, 0)
    
        # ‚úÇÔ∏è Rychl√Ω o≈ôez ‚Äì tlaƒç√≠tko (vol√° p≈Øvodn√≠ handler)
        self.btn_quick_crop = QPushButton("‚úÇÔ∏è Rychl√Ω o≈ôez")
        self.btn_quick_crop.setToolTip("Otev≈ô√≠t prvn√≠ neo≈ôezanou fotku pro rychl√Ω o≈ôez")
        # Pokud star√° verze pou≈æ√≠vala konkr√©tn√≠ styl, ponech√°me jednoduch√Ω (nezp≈Øsobuje probl√©my)
        self.btn_quick_crop.setCursor(Qt.PointingHandCursor)
        # Z√°kladn√≠ ≈°√≠≈ôka; p≈ô√≠padn√© povolen√≠/zak√°z√°n√≠ ≈ôe≈°√≠ tvoje existuj√≠c√≠ logika
        
        
        # Jednoduch√Ω stylesheet bez problematick√Ωch vlastnost√≠
        self.btn_quick_crop.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: #FFFFFF;
                border: none;
                border-radius: 4px;
                font-weight: bold;
                font-size: 9px;
                padding: 2px 6px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
            QPushButton:pressed {
                background-color: #3d8b40;
            }
            QPushButton:disabled {
                background-color: #888888;
                color: #cccccc;
            }
        """)
        
        self.btn_quick_crop.setEnabled(True)
        # P≈Øvodn√≠ handler ze star√© verze:
        if hasattr(self, "open_first_uncropped_photo"):
            self.btn_quick_crop.clicked.connect(self.open_first_uncropped_photo)
        elif hasattr(self, "find_first_uncropped_photo"):
            self.btn_quick_crop.clicked.connect(self.find_first_uncropped_photo)
    
        top_controls_layout.addStretch(1)
        top_controls_layout.addWidget(self.btn_quick_crop, 0)
        missing_layout.addLayout(top_controls_layout)
    
        # Seznam/obsah anal√Ωzy fotek (beze zmƒõny)
        self.photos_container = QWidget()
        photos_container_layout = QVBoxLayout(self.photos_container)
        photos_container_layout.setContentsMargins(0, 0, 0, 0)
    
        self.missing_photos_widget = MissingPhotosWidget()
        photos_container_layout.addWidget(self.missing_photos_widget)
        missing_layout.addWidget(self.photos_container)
    
        # Sestaven√≠ sloupc≈Ø
        horizontal_layout.addWidget(config_group, stretch=7)
        horizontal_layout.addWidget(missing_photos_group, stretch=3)
        layout.addLayout(horizontal_layout)
    
        # P≈ôid√°n√≠ tabu
        self.tabs.addTab(tab, "üó∫Ô∏è Nastaven√≠ lokac√≠")
        
    def on_toggle_show_all_photos(self, state):
        """Handler pro zmƒõnu checkboxu zobrazen√≠ v≈°ech fotek."""
        if state == 2:  # Qt.Checked
            self.update_log("üìã Zobrazuji v≈°echny fotky (vƒçetnƒõ p≈ôi≈ôazen√Ωch lokac√≠)")
        else:  # Qt.Unchecked
            self.update_log("üìã Zobrazuji pouze fotky bez p≈ôi≈ôazen√© lokace")
        
        # Okam≈æit√° aktualizace seznamu
        self.update_missing_photos_list()
        
        # ‚úÖ NOV√â: Aktualizace stavu tlaƒç√≠tka podle nov√©ho re≈æimu
        QTimer.singleShot(100, self.update_quick_crop_button_state)

    def find_first_uncropped_photo(self):
        """
        Najde prvn√≠ fotku v seznamu nep≈ôi≈ôazen√Ωch fotek, kter√° nen√≠ o≈ôezan√°.
        Vrac√≠ tuple (photo_number, photo_path) nebo (None, None) pokud ≈æ√°dn√° nen√≠ nalezena.
        """
        try:
            clover_path = self.edit_clover_path.text().strip()
            if not clover_path or not os.path.isdir(clover_path):
                return None, None
    
            # Z√≠skej seznam nep≈ôi≈ôazen√Ωch fotek
            json_numbers = self.extract_numbers_from_location_json()
            existing_photos = self._get_existing_photo_numbers(clover_path)
            missing_location_photos = existing_photos - set(json_numbers)
    
            if not missing_location_photos:
                return None, None
    
            # Najdi prvn√≠ neo≈ôezanou fotku v se≈ôazen√©m seznamu
            sorted_photos = sorted(missing_location_photos)
            photo_extensions = {'.jpg', '.jpeg', '.png', '.heic', '.heif', '.tiff', '.tif', '.bmp'}
    
            for photo_number in sorted_photos:
                # Zkontroluj, zda fotka nen√≠ o≈ôezan√°
                is_cropped = self.crop_status.get(str(photo_number), False)
                if not is_cropped:
                    # Najdi soubor s t√≠mto ƒç√≠slem
                    try:
                        files = os.listdir(clover_path)
                        for filename in files:
                            if filename.startswith(f"{photo_number}+"):
                                ext = os.path.splitext(filename)[1].lower()
                                if ext in photo_extensions:
                                    photo_path = os.path.join(clover_path, filename)
                                    return photo_number, photo_path
                    except Exception:
                        continue
    
            return None, None
    
        except Exception as e:
            self.update_log(f"‚ùå Chyba p≈ôi hled√°n√≠ neo≈ôezan√© fotky: {e}")
            return None, None

    def open_first_uncropped_photo(self):
        """Otev≈ôe prvn√≠ neo≈ôezanou fotku ze seznamu 'Anal√Ωza fotek' pro rychl√Ω o≈ôez."""
        try:
            # ‚úÖ NOV√Å LOGIKA: Vezmi prvn√≠ neo≈ôezanou fotku p≈ô√≠mo ze seznamu MissingPhotosWidget
            first_uncropped_item = None
            first_uncropped_number = None
            
            # Projdi seznam a najdi prvn√≠ neo≈ôezanou fotku (ikona üñºÔ∏è)
            for i in range(self.missing_photos_widget.list_widget.count()):
                item = self.missing_photos_widget.list_widget.item(i)
                if item is None:
                    continue
                    
                # Kontrola ikony: "üñºÔ∏è" = neo≈ôezan√°
                if item.text().startswith("üñºÔ∏è"):
                    first_uncropped_item = item
                    # Extrakce ƒç√≠sla fotky z textu "üñºÔ∏è 12345"
                    try:
                        first_uncropped_number = int(item.text().split()[-1])
                        break
                    except (ValueError, IndexError):
                        continue
            
            # Pokud nebyla nalezena ≈æ√°dn√° neo≈ôezan√° fotka
            if first_uncropped_item is None or first_uncropped_number is None:
                # JEDNODUCH√â: Tlaƒç√≠tko by nemƒõlo b√Ωt aktivn√≠, ale pro jistotu
                QMessageBox.information(
                    self,
                    "Rychl√Ω o≈ôez",
                    "‚úÇÔ∏è V seznamu nejsou ≈æ√°dn√© neo≈ôezan√© fotky."
                )
                return
    
            self.update_log(f"‚úÇÔ∏è Otev√≠r√°m prvn√≠ neo≈ôezanou fotku ze seznamu: {first_uncropped_number}")
    
            # Sestaven√≠ cesty k fotce
            clover_path = self.edit_clover_path.text().strip()
            if not clover_path or not os.path.isdir(clover_path):
                QMessageBox.warning(self, "Chyba", "‚ùå Cesta ke slo≈æce s fotkami ƒçty≈ôl√≠stk≈Ø nen√≠ nastavena nebo neexistuje.")
                return
    
            # Najdi skuteƒçn√Ω soubor s t√≠mto ƒç√≠slem
            photo_extensions = {'.jpg', '.jpeg', '.png', '.heic', '.heif', '.tiff', '.tif', '.bmp'}
            target_photo_path = None
            
            try:
                files_in_dir = os.listdir(clover_path)
                for filename in files_in_dir:
                    if filename.startswith(f"{first_uncropped_number}+"):
                        ext = os.path.splitext(filename)[1].lower()
                        if ext in photo_extensions:
                            target_photo_path = os.path.join(clover_path, filename)
                            break
            except Exception as e:
                QMessageBox.critical(self, "Chyba", f"Nepoda≈ôilo se naj√≠t soubor fotky {first_uncropped_number}:\n{str(e)}")
                return
    
            if not target_photo_path or not os.path.exists(target_photo_path):
                QMessageBox.critical(self, "Chyba", f"Soubor fotky {first_uncropped_number} nebyl nalezen ve slo≈æce.")
                return
    
            # Sestaven√≠ seznamu v≈°ech fotek pro navigaci v dialogu (stejn√° logika jako p≈ôedt√≠m)
            try:
                photo_files_map = {}
                for f in files_in_dir:
                    try:
                        number_part = f.split('+')[0]
                        if number_part.isdigit():
                            num = int(number_part)
                            ext = os.path.splitext(f)[1].lower()
                            if ext in photo_extensions:
                                photo_files_map[num] = os.path.join(clover_path, f)
                    except (ValueError, IndexError):
                        continue
    
                # Se≈ôazen√≠ fotek podle ƒç√≠sel
                ordered_photos = sorted(photo_files_map.items(), key=lambda x: x[0])
                ordered_paths = [photo[1] for photo in ordered_photos]
                ordered_numbers = [photo[0] for photo in ordered_photos]
    
                # Najdi index aktu√°ln√≠ fotky
                start_index = 0
                if first_uncropped_number in ordered_numbers:
                    start_index = ordered_numbers.index(first_uncropped_number)
    
                # Doƒçasnƒõ zak√°zat automatick√© aktualizace
                self.disable_photo_list_updates()
    
                # Otev≈ôi ImagePreviewDialog
                dialog = ImagePreviewDialog(ordered_paths, start_index, self, crop_status_dict=self.crop_status)
                dialog.exec()
    
                # Po zav≈ôen√≠ dialogu aktualizuj seznamy
                self.update_missing_photos_list()
                self.update_status_photos_list()
    
                # Znovu povolit automatick√© aktualizace
                self.enable_photo_list_updates(first_uncropped_number)
    
                # Informace o dokonƒçen√≠
                self.update_log(f"‚úÖ N√°hled fotky {first_uncropped_number} dokonƒçen")
    
            except Exception as e:
                self.update_log(f"‚ùå Chyba p≈ôi sestavov√°n√≠ seznamu fotek: {e}")
                QMessageBox.critical(self, "Chyba", f"Nepoda≈ôilo se sestavit seznam fotek pro navigaci:\n{str(e)}")
    
        except Exception as e:
            self.update_log(f"‚ùå Chyba p≈ôi otev√≠r√°n√≠ rychl√©ho o≈ôezu: {e}")
            QMessageBox.critical(self, "Chyba", f"Nepoda≈ôilo se otev≈ô√≠t fotku:\n{str(e)}")

    def update_quick_crop_button_state(self):
        """Aktualizuje stav tlaƒç√≠tka rychl√©ho o≈ôezu podle stavu checkboxu a dostupn√Ωch neo≈ôezan√Ωch fotek."""
        try:
            if not hasattr(self, 'btn_quick_crop'):
                return
    
            # Zkontroluj stav checkboxu
            show_all = hasattr(self, 'show_all_photos_checkbox') and self.show_all_photos_checkbox.isChecked()
            
            if show_all:
                # ‚úÖ NOV√â: Checkbox za≈°krtnut√Ω - kontroluj seznam "Anal√Ωza fotek" na neo≈ôezan√© fotky
                any_uncropped = False
                
                # Projdi v≈°echny polo≈æky v seznamu MissingPhotosWidget
                for i in range(self.missing_photos_widget.list_widget.count()):
                    item = self.missing_photos_widget.list_widget.item(i)
                    if item is None:
                        continue
                    
                    # Kontrola ikony: "üñºÔ∏è" = neo≈ôezan√°, "‚úÇÔ∏è" = o≈ôezan√°
                    if item.text().startswith("üñºÔ∏è"):
                        any_uncropped = True
                        break
                
                # Nastaven√≠ stavu tlaƒç√≠tka
                if any_uncropped:
                    self.btn_quick_crop.setEnabled(True)
                    self.btn_quick_crop.setToolTip("Otev≈ô√≠t prvn√≠ neo≈ôezanou fotku ze seznamu")
                else:
                    self.btn_quick_crop.setEnabled(False)
                    self.btn_quick_crop.setToolTip("V≈°echny fotky v seznamu jsou ji≈æ o≈ôezan√©")
                    
            else:
                # ‚úÖ P≈ÆVODN√ç: Checkbox neza≈°krtnut√Ω - p≈Øvodn√≠ logika jen pro nep≈ôi≈ôazen√© fotky
                photo_number, photo_path = self.find_first_uncropped_photo()
    
                if photo_number is not None:
                    self.btn_quick_crop.setEnabled(True)
                    self.btn_quick_crop.setToolTip(f"Otev≈ô√≠t prvn√≠ neo≈ôezanou fotku: {photo_number}")
                else:
                    self.btn_quick_crop.setEnabled(False)
                    
                    # Zjisti d≈Øvod nedostupnosti
                    clover_path = self.edit_clover_path.text().strip()
                    if not clover_path or not os.path.isdir(clover_path):
                        self.btn_quick_crop.setToolTip("Cesta ke slo≈æce s fotkami nen√≠ nastavena")
                    else:
                        json_numbers = self.extract_numbers_from_location_json()
                        existing_photos = self._get_existing_photo_numbers(clover_path)
                        missing_location_photos = existing_photos - set(json_numbers)
                        
                        if not missing_location_photos:
                            self.btn_quick_crop.setToolTip("V≈°echny fotky jsou p≈ôi≈ôazen√© k lokac√≠m")
                        else:
                            self.btn_quick_crop.setToolTip("V≈°echny nep≈ôi≈ôazen√© fotky jsou ji≈æ o≈ôezan√©")
    
        except Exception:
            # Tich√° chyba - nezastavuj UI
            pass

    # FILE: gui/pdf_generator_window.py
    # CLASS: PdfGeneratorWindow
    # FUNCTION: cleanup_bak_files
    # NAHRAƒé TOUTO ‚ÄûNO-OP‚Äú VERZ√ç (bezpeƒçn√© odstranƒõn√≠ handleru; √∫klid .bak prob√≠h√° p≈ôi zav≈ôen√≠ okna)
    def cleanup_bak_files(self):
        """(removed) D≈ô√≠vƒõj≈°√≠ tlaƒç√≠tko 'üóëÔ∏è Uklidit .bak soubory' bylo odstranƒõno (√∫klid prob√≠h√° p≈ôi zav≈ôen√≠ okna)."""
        return

    # FILE: gui/pdf_generator_window.py
    # CLASS: PdfGeneratorWindow
    # FUNCTION: cleanup_nonexistent_photos
    # NAHRAƒé TOUTO ‚ÄûNO-OP‚Äú VERZ√ç (bezpeƒçn√© odstranƒõn√≠ handleru; nikde se u≈æ nevol√°)
    def cleanup_nonexistent_photos(self):
        """(removed) D≈ô√≠vƒõj≈°√≠ tlaƒç√≠tko 'üßπ Vyƒçistit neexistuj√≠c√≠ fotky' bylo odstranƒõno."""
        return
    
    def _get_existing_photo_numbers(self, clover_path):
        """Z√≠sk√° seznam ƒç√≠sel skuteƒçnƒõ existuj√≠c√≠ch fotek ve slo≈æce"""
        try:
            existing_photos = set()
            photo_extensions = {'.jpg', '.jpeg', '.png', '.heic', '.heif', '.tiff', '.tif', '.bmp'}
            
            for filename in os.listdir(clover_path):
                ext = os.path.splitext(filename)[1].lower()
                if ext in photo_extensions:
                    try:
                        # Extrakce ƒç√≠sla ze zaƒç√°tku n√°zvu souboru (p≈ôed prvn√≠m '+')
                        number_part = filename.split('+')[0]
                        photo_number = int(number_part)
                        existing_photos.add(photo_number)
                    except (ValueError, IndexError):
                        continue
            
            return existing_photos
        
        except Exception as e:
            self.update_log(f"‚ùå Chyba p≈ôi skenov√°n√≠ slo≈æky: {e}")
            return set()

    # FILE: gui/pdf_generator_window.py
    # CLASS: PdfGeneratorWindow
    # FUNCTION: sort_locations_json
    # NAHRAƒé TOUTO ‚ÄûNO-OP‚Äú VERZ√ç (bezpeƒçn√© odstranƒõn√≠ handleru; nikde se u≈æ nevol√°)
    def sort_locations_json(self):
        """(removed) D≈ô√≠vƒõj≈°√≠ tlaƒç√≠tko 'üìä Se≈ôadit lokace vzestupnƒõ' bylo odstranƒõno."""
        return

    def _create_path_widget(self, line_edit):
        widget = QWidget()
        layout = QHBoxLayout(widget)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(5)

        layout.addWidget(line_edit)

        browse_btn = QPushButton("...")
        browse_btn.setFixedSize(30, 30)
        browse_btn.clicked.connect(lambda: self.browse_folder(line_edit))
        layout.addWidget(browse_btn)

        return widget
    
    # FILE: gui/pdf_generator_window.py
    # CLASS: PdfGeneratorWindow
    # FUNCTION: set_notes_watch_path
    # NOV√Å FUNKCE ‚Äì vlo≈æ do t≈ô√≠dy PdfGeneratorWindow. Slou≈æ√≠ k bezpeƒçn√© zmƒõnƒõ sledovan√© slo≈æky.
    def set_notes_watch_path(self, path: str):
        """Nastav√≠/obmƒõn√≠ sledovanou slo≈æku pro z√°lo≈æku 'Nastaven√≠ pozn√°mek' (bez podslo≈æek)."""
        from PySide6.QtCore import QFileSystemWatcher
        import os
    
        self.notes_watch_path = path or ""
        if not hasattr(self, "notes_fs_watcher") or not isinstance(self.notes_fs_watcher, QFileSystemWatcher):
            return
    
        try:
            # Zru≈° star√© cesty
            for p in list(self.notes_fs_watcher.directories()):
                self.notes_fs_watcher.removePath(p)
        except Exception:
            pass
    
        # P≈ôidej novou (jen pokud existuje a je slo≈æka)
        if self.notes_watch_path and os.path.isdir(self.notes_watch_path):
            try:
                self.notes_fs_watcher.addPath(self.notes_watch_path)
            except Exception:
                pass
    
        # Po zmƒõnƒõ cesty hned obnov seznam
        try:
            self.update_notes_photos_list()
        except Exception:
            pass

    # FILE: gui/pdf_generator_window.py
    # CLASS: PdfGeneratorWindow
    # FUNCTION: update_notes_photos_list
    # NOV√Å FUNKCE ‚Äì vlo≈æ do t≈ô√≠dy PdfGeneratorWindow (nap≈ô. hned pod update_status_photos_list). Nic jin√©ho NEMƒö≈á.
    def update_notes_photos_list(self):
        """Aktualizuje seznam fotek v z√°lo≈æce Nastaven√≠ pozn√°mek (zobrazuje fotky bez zapsan√© Nastaven√≠ pozn√°mek)."""
        if not hasattr(self, 'notes_photos_widget'):
            return
        folder = getattr(self, "notes_watch_path", "") or ""
        crop = getattr(self, "crop_status", {})
        self.notes_photos_widget.update_photos_list(folder, crop)

     # FILE: gui/pdf_generator_window.py
    # CLASS: PdfGeneratorWindow
    # FUNCTION: create_notes_tab
    # NAHRAƒé CEL√ù OBSAH FUNKCE TOUTO VERZ√ç.
    # ZMƒöNY:
    # - P≈ôid√°n prav√Ω panel se seznamem fotek (NotesPhotosWidget).
    # - P≈ôid√°n QFileSystemWatcher pro real-time sledov√°n√≠ slo≈æky s fotkami jen v t√©to slo≈æce (bez podslo≈æek).
    # - Sledovan√° slo≈æka nastavena na: `/Users/safronus/Library/Mobile Documents/com~apple~CloudDocs/ƒåty≈ôl√≠stky/Generov√°n√≠ PDF/Obr√°zky ke zpracov√°n√≠/`
    # - Napojen√≠ na update_notes_photos_list() p≈ôi zmƒõnƒõ slo≈æky i p≈ôi zmƒõnƒõ JSONu pozn√°mek.
    def create_notes_tab(self):
        """Z√°lo≈æka 'Nastaven√≠ pozn√°mek' s JSON editorem a prav√Ωm seznamem fotek (real-time sledov√°n√≠ slo≈æky)."""
        from PySide6.QtWidgets import QWidget, QVBoxLayout, QLabel, QGroupBox, QHBoxLayout, QPushButton
        from PySide6.QtGui import QFont
        from PySide6.QtCore import QTimer, QFileSystemWatcher
    
        tab = QWidget()
        layout = QVBoxLayout(tab)
        layout.setContentsMargins(15, 15, 15, 15)
    
        # Indik√°tor nad obsahem (ponech√°no)
        self.notes_states_without_notes_indicator = QLabel()
        self.notes_states_without_notes_indicator.setVisible(False)
        self.notes_states_without_notes_indicator.setWordWrap(True)
        layout.addWidget(self.notes_states_without_notes_indicator)
    
        # === LEV√Å STRANA: Editor ‚Äûüìù JSON Nastaven√≠ pozn√°mek‚Äú ===
        notes_group = QGroupBox("üìù JSON nastaven√≠ pozn√°mek")
        notes_layout = QVBoxLayout()
    
        editor_container = QWidget()
        editor_container_layout = QVBoxLayout(editor_container)
        editor_container_layout.setContentsMargins(0, 0, 0, 0)
    
        # JSONCodeEditor
        self.notes_text = JSONCodeEditor()
        self.notes_text.setFont(QFont("Consolas", 11))
    
        if not self.notes_text.toPlainText().strip():
            self.notes_text.setPlainText('{\n "13302": "DAR - BIP 2025"\n}')
    
        # Live kontrola a refresh prav√©ho seznamu
        self.notes_text.textChanged.connect(self.check_states_without_notes_real_time)
        self.notes_text.textChanged.connect(self.update_notes_photos_list)
    
        help_btn = QPushButton("?")
        help_btn.setParent(editor_container)
        help_btn.setFixedSize(24, 24)
        help_btn.setStyleSheet("""
            QPushButton {
                background-color: #3498db;
                color: white;
                border: none;
                border-radius: 12px;
                font-weight: bold;
                font-size: 12px;
            }
            QPushButton:hover { background-color: #2980b9; }
        """)
        help_btn.setToolTip(
            "Nastaven√≠ pozn√°mek ve form√°tu JSON: { \"ƒå√≠sloN√°lezu\": \"text pozn√°mky\" }.\n"
            "Editor zobrazuje ƒç√≠sla ≈ô√°dk≈Ø; kl√°vesa Tab vlo≈æ√≠ 2 mezery."
        )
    
        def position_help_button():
            help_btn.move(editor_container.width() - 30, 5)
            help_btn.raise_()
    
        original_resize = editor_container.resizeEvent
        def new_resize_event(event):
            if original_resize:
                original_resize(event)
            position_help_button()
        editor_container.resizeEvent = new_resize_event
        QTimer.singleShot(100, position_help_button)
    
        editor_container_layout.addWidget(self.notes_text)
        notes_layout.addWidget(editor_container)
    
        validate_layout = QHBoxLayout()
        self.btn_validate_notes = QPushButton("‚úÖ Validovat JSON")
        self.btn_validate_notes.clicked.connect(self.validate_notes)
        validate_layout.addWidget(self.btn_validate_notes)
        validate_layout.addStretch()
    
        notes_layout.addLayout(validate_layout)
        notes_group.setLayout(notes_layout)
    
        # === PRAV√Å STRANA: Seznam fotek (jen akce ‚ÄûZapsat pozn√°mku‚Äú) ===
        photos_group = QGroupBox("üìã Seznam fotek")
        photos_layout = QVBoxLayout(photos_group)
        photos_layout.setContentsMargins(8, 8, 8, 8)
    
        self.notes_photos_widget = NotesPhotosWidget()
        photos_layout.addWidget(self.notes_photos_widget)
    
        # === HORIZONT√ÅLN√ç ROZVR≈ΩEN√ç ===
        horizontal_layout = QHBoxLayout()
        horizontal_layout.setSpacing(15)
        horizontal_layout.addWidget(notes_group, stretch=7)
        horizontal_layout.addWidget(photos_group, stretch=3)
        layout.addLayout(horizontal_layout)
    
        # === QFileSystemWatcher pro real-time sledov√°n√≠ slo≈æky (bez podslo≈æek) ===
        self.notes_watch_path = "/Users/safronus/Library/Mobile Documents/com~apple~CloudDocs/ƒåty≈ôl√≠stky/Generov√°n√≠ PDF/Obr√°zky ke zpracov√°n√≠/"
        # Pokud watcher u≈æ existuje (opakovan√© vol√°n√≠), nejprve odpoj a uvolni
        if hasattr(self, "notes_fs_watcher") and isinstance(self.notes_fs_watcher, QFileSystemWatcher):
            try:
                for p in self.notes_fs_watcher.directories():
                    self.notes_fs_watcher.removePath(p)
            except Exception:
                pass
        self.notes_fs_watcher = QFileSystemWatcher(self)
        # p≈ôidej, pokud existuje
        self.set_notes_watch_path(self.notes_watch_path)
        # zmƒõny ve slo≈æce -> refresh prav√©ho seznamu
        self.notes_fs_watcher.directoryChanged.connect(lambda _: self.update_notes_photos_list())
    
        # Prvn√≠ naƒçten√≠ seznamu
        self.update_notes_photos_list()
    
        self.tabs.addTab(tab, "üìù Nastaven√≠ pozn√°mek")

    def _update_notes_states_without_notes_indicator(self, missing_notes_set, all_ok=False):
        """Aktualizuje indik√°tor chybƒõj√≠c√≠ch pozn√°mek v z√°lo≈æce Nastaven√≠ pozn√°mek."""
        if not hasattr(self, 'notes_states_without_notes_indicator'):
            return
    
        if missing_notes_set is None:
            self.notes_states_without_notes_indicator.setVisible(False)
            return
    
        if all_ok:
            self.notes_states_without_notes_indicator.setText("‚úÖ V≈°echny fotky se stavem maj√≠ pozn√°mku")
            self.notes_states_without_notes_indicator.setStyleSheet("""
            QLabel {
                color: #27ae60;
                background-color: #d5f4e6;
                border: 1px solid #27ae60;
                border-radius: 4px;
                padding: 6px 10px;
                font-size: 11px;
                font-weight: bold;
            }
            """)
            self.notes_states_without_notes_indicator.setVisible(True)
        else:
            missing_list = sorted(list(missing_notes_set))
            if len(missing_list) <= 12:
                missing_str = ", ".join(str(x) for x in missing_list)
            else:
                missing_str = ", ".join(str(x) for x in missing_list[:10]) + f", ... (+{len(missing_list)-10})"
            
            self.notes_states_without_notes_indicator.setText(f"‚ö†Ô∏è Chybƒõj√≠c√≠ pozn√°mky pro fotky: {missing_str}")
            self.notes_states_without_notes_indicator.setToolTip(
                f"Celkem {len(missing_list)} fotek se stavem nem√° pozn√°mku.\n"
                f"Fotky: {', '.join(str(x) for x in missing_list)}"
            )
            self.notes_states_without_notes_indicator.setStyleSheet("""
            QLabel {
                color: #e74c3c;
                background-color: #fadbd8;
                border: 1px solid #e74c3c;
                border-radius: 4px;
                padding: 6px 10px;
                font-size: 11px;
                font-weight: bold;
            }
            """)
            self.notes_states_without_notes_indicator.setVisible(True)


    def create_status_config_tab(self):
        """Z√°lo≈æka 'Nastaven√≠ stav≈Ø' s JSON editorem a real-time indikacemi"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        layout.setContentsMargins(15, 15, 15, 15)
    
        # Real-time indikace (nad hlavn√≠m obsahem)
        indicators_layout = QVBoxLayout()
        indicators_layout.setSpacing(5)
    
        # Indik√°tor duplik√°tn√≠ch stav≈Ø
        self.duplicate_states_indicator = QLabel()
        self.duplicate_states_indicator.setVisible(False)
        self.duplicate_states_indicator.setWordWrap(True)
        indicators_layout.addWidget(self.duplicate_states_indicator)
    
        # NOV√â: Indik√°tor chybƒõj√≠c√≠ch pozn√°mek pro stavy
        self.states_without_notes_indicator = QLabel()
        self.states_without_notes_indicator.setVisible(False)
        self.states_without_notes_indicator.setWordWrap(True)
        indicators_layout.addWidget(self.states_without_notes_indicator)
    
        layout.addLayout(indicators_layout)
    
        horizontal_layout = QHBoxLayout()
        horizontal_layout.setSpacing(15)
    
        config_group = QGroupBox("‚öôÔ∏è JSON Nastaven√≠ stav≈Ø")
        config_layout = QVBoxLayout()
    
        editor_container = QWidget()
        editor_container_layout = QVBoxLayout(editor_container)
        editor_container_layout.setContentsMargins(0, 0, 0, 0)
    
        # JSONCodeEditor
        self.status_config_text = JSONCodeEditor()
        self.status_config_text.setFont(QFont("Consolas", 11))
    
        if not self.status_config_text.toPlainText().strip():
            self.status_config_text.setPlainText('{\n "BEZFOTKY": ["13600-13602", "13603"],\n "BEZGPS": ["13700-13702"]\n}')  # NOV√â: P≈ôid√°n p≈ô√≠klad BEZGPS

    
        # Help tlaƒç√≠tko
        help_btn = QPushButton("?")
        help_btn.setParent(editor_container)
        help_btn.setFixedSize(24, 24)
        help_btn.setStyleSheet("""
            QPushButton {
                background-color: #3498db; color: white; border: none;
                border-radius: 12px; font-weight: bold; font-size: 12px;
            }
            QPushButton:hover { background-color: #2980b9; }
        """)
    
        help_tooltip = (
            "JSON pro Nastaven√≠ stav≈Ø (nov√Ω form√°t):\n"
            "Form√°t: { \"STAV\": [\"start-end\", \"cislo\", ...] }\n"
            "Povolen√© stavy: \"BEZFOTKY\", \"DAROVANY\", \"ZTRACENY\", \"BEZGPS\".\n\n"
            "P≈ô√≠klad:\n"
            "{ \"BEZFOTKY\": [\"13600-13602\", \"13603\"],\n"
            "  \"DAROVANY\": [\"13610-13615\"],\n"
            "  \"ZTRACENY\": [\"13620-13625\"],\n"
            "  \"BEZGPS\": [\"13630-13635\"] }\n\n"
            "Stav BEZFOTKY:\n"
            "‚Ä¢ Do PDF se vlo≈æ√≠ BEZ_FOTKY.png m√≠sto fotky ƒçty≈ôl√≠stku\n"
            "‚Ä¢ GPS sou≈ôadnice se zobraz√≠ jako: \"N ??¬∞ ??' ??.??\\\"\" a \"E ??¬∞ ??' ??.??\\\"\"\n"
            "‚Ä¢ Kop√≠rov√°n√≠/p≈ôejmenov√°n√≠ se pro tento z√°znam p≈ôeskoƒç√≠\n"
            "‚Ä¢ Vy≈æaduje pozn√°mku\n\n"
            "Stav DAROVANY:\n"
            "‚Ä¢ Fotka, GPS sou≈ôadnice a datum se zpracov√°vaj√≠ norm√°lnƒõ\n"
            "‚Ä¢ Do b√≠l√©ho prostoru vedle se vlo≈æ√≠ obr√°zek DAROVANY.png\n"
            "‚Ä¢ Pozn√°mka se zobraz√≠ nad tento obr√°zek\n"
            "‚Ä¢ Kop√≠rov√°n√≠/p≈ôejmenov√°n√≠ se pro tento z√°znam p≈ôeskoƒç√≠\n"
            "‚Ä¢ Vy≈æaduje pozn√°mku\n\n"
            "Stav ZTRACENY:\n"
            "‚Ä¢ Fotka, GPS sou≈ôadnice a datum se zpracov√°vaj√≠ norm√°lnƒõ\n"
            "‚Ä¢ Do b√≠l√©ho prostoru vedle se vlo≈æ√≠ obr√°zek ZTRACENY.png\n"
            "‚Ä¢ Automatick√° pozn√°mka: \"Ztracen√Ω ü•∫ü•∫ü•∫\" (nad obr√°zek)\n"  # ‚Üê Zmƒõna zde
            "‚Ä¢ Kop√≠rov√°n√≠/p≈ôejmenov√°n√≠ se pro tento z√°znam p≈ôeskoƒç√≠\n"
            "‚Ä¢ Pozn√°mka nen√≠ vy≈æadov√°na (automatick√°)\n\n"
            "Stav BEZGPS:\n"
            "‚Ä¢ Fotka, lokaƒçn√≠ mapa, datum a ƒças se zpracov√°vaj√≠ norm√°lnƒõ\n"
            "‚Ä¢ GPS sou≈ôadnice se zobraz√≠ jako: \"N ??¬∞ ??' ??.??\\\"\" a \"E ??¬∞ ??' ??.??\\\"\"\n"
            "‚Ä¢ Automatick√° pozn√°mka: \"Fotka byla vyfocena bez GPS sou≈ôadnic\"\n"
            "‚Ä¢ Kop√≠rov√°n√≠/p≈ôejmenov√°n√≠ se pro tento z√°znam p≈ôeskoƒç√≠\n"
            "‚Ä¢ Pozn√°mka nen√≠ vy≈æadov√°na (automatick√°)\n\n"
            "‚Ä¢ Lze kombinovat intervaly i jednotliv√° ƒç√≠sla\n"
            "‚Ä¢ Editor zobrazuje ƒç√≠sla ≈ô√°dk≈Ø; kl√°vesa Tab vlo≈æ√≠ 2 mezery"
        )

        help_btn.setToolTip(help_tooltip)
    
        def position_help_button():
            help_btn.move(editor_container.width() - 30, 5)
            help_btn.raise_()
    
        original_resize = editor_container.resizeEvent
        def new_resize_event(event):
            if original_resize: original_resize(event)
            position_help_button()
        editor_container.resizeEvent = new_resize_event
    
        QTimer.singleShot(100, position_help_button)
    
        editor_container_layout.addWidget(self.status_config_text)
        config_layout.addWidget(editor_container)
    
        # Tlaƒç√≠tka pro validaci a se≈ôazen√≠
        validate_layout = QHBoxLayout()
    
        self.btn_validate_status = QPushButton("‚úÖ Validovat JSON")
        self.btn_validate_status.clicked.connect(self.validate_status_config)
    
        self.btn_sort_status = QPushButton("üìä Se≈ôadit stavy vzestupnƒõ")
        self.btn_sort_status.clicked.connect(self.sort_status_json)
    
        validate_layout.addWidget(self.btn_validate_status)
        validate_layout.addWidget(self.btn_sort_status)
        validate_layout.addStretch()
    
        config_layout.addLayout(validate_layout)
        config_group.setLayout(config_layout)
    
        # === PRAV√Å STRANA: Seznam fotek ===
        photos_group = QGroupBox("üìã Seznam fotek")
        photos_layout = QVBoxLayout(photos_group)
        photos_layout.setContentsMargins(8, 8, 8, 8)
    
        self.photos_status_widget = PhotosStatusWidget()
        photos_layout.addWidget(self.photos_status_widget)
    
        # === HORIZONT√ÅLN√ç ROZVR≈ΩEN√ç ===
        horizontal_layout.addWidget(config_group, stretch=7)
        horizontal_layout.addWidget(photos_group, stretch=3)
    
        layout.addLayout(horizontal_layout)
    
        # Propojen√≠ sign√°l≈Ø
        self.status_config_text.textChanged.connect(self.update_status_photos_list)
        self.status_config_text.textChanged.connect(self.check_duplicate_states_real_time)
        self.status_config_text.textChanged.connect(self.check_states_without_notes_real_time)
    
        self.tabs.addTab(tab, "‚öôÔ∏è Nastaven√≠ stav≈Ø")

        # ‚úÖ JEDIN√ù DOPLNƒöN√ù ≈ò√ÅDEK: hned po p≈ôid√°n√≠ ‚ÄûNastaven√≠ stav≈Ø‚Äú vytvo≈ô i z√°lo≈æku anonymizace (a t√≠m ji za≈ôaƒè hned za stavy)
        self.create_anonymization_tab()

    # Ve t≈ô√≠dƒõ PDFGeneratorWindow
    def update_status_photos_list(self):
        """Aktualizuje seznam fotek v z√°lo≈æce Nastaven√≠ stav≈Ø a p≈ôed√°v√° stav o≈ôezu."""
        if not hasattr(self, 'photos_status_widget'):
            return
        clover_path = self.edit_clover_path.text().strip()
        # OPRAVA: P≈ôed√°n√≠ `self.crop_status`
        self.photos_status_widget.update_photos_list(clover_path, self.crop_status)
        
    def sort_status_json(self):
        """Se≈ôad√≠ JSON s nastaven√≠m stav≈Ø podle n√°zv≈Ø stav≈Ø vzestupnƒõ a naform√°tuje ka≈æd√Ω stav na nov√Ω ≈ô√°dek"""
        try:
            # Z√≠sk√°n√≠ aktu√°ln√≠ho JSON textu
            current_json_text = self.status_config_text.toPlainText().strip()
            
            if not current_json_text:
                QMessageBox.warning(self, "Varov√°n√≠", "JSON konfigurace stav≈Ø je pr√°zdn√°")
                return
            
            # Parsov√°n√≠ JSON
            try:
                status_data = json.loads(current_json_text)
            except json.JSONDecodeError as e:
                QMessageBox.critical(self, "Chyba", f"Neplatn√Ω JSON form√°t:\n{str(e)}")
                return
            
            if not isinstance(status_data, dict):
                QMessageBox.critical(self, "Chyba", "JSON mus√≠ b√Ωt objekt s kl√≠ƒçi jako n√°zvy stav≈Ø")
                return
            
            # Se≈ôazen√≠ podle n√°zv≈Ø stav≈Ø (abecednƒõ)
            sorted_keys = sorted(status_data.keys())
            sorted_data = {key: status_data[key] for key in sorted_keys}
            
            # Vlastn√≠ form√°tov√°n√≠ - ka≈æd√Ω stav na nov√©m ≈ô√°dku
            lines = ["{"]
            keys_list = list(sorted_data.keys())
            
            for i, key in enumerate(keys_list):
                value = sorted_data[key]
                # P≈ôev√©st hodnotu na JSON string
                value_json = json.dumps(value, ensure_ascii=False)
                
                # P≈ôidat ƒç√°rku na konec, kromƒõ posledn√≠ho ≈ô√°dku
                comma = "," if i < len(keys_list) - 1 else ""
                
                # Zarovn√°n√≠ kl√≠ƒç≈Ø pro lep≈°√≠ ƒçitelnost
                key_padded = f'"{key}":'.ljust(12)  # zarovn√°n√≠ na 12 znak≈Ø (del≈°√≠ ne≈æ u lokac√≠)
                
                lines.append(f"  {key_padded} {value_json}{comma}")
            
            lines.append("}")
            
            # Spojen√≠ do fin√°ln√≠ho textu
            sorted_json_text = "\n".join(lines)
            
            # Aktualizace text editoru
            self.status_config_text.setPlainText(sorted_json_text)
            
            # Zobrazen√≠ √∫spƒõchu v logu
            self.update_log("üìä Stavy byly se≈ôazeny vzestupnƒõ podle n√°zv≈Ø")
            QMessageBox.information(self, "√öspƒõch", 
                                   f"‚úÖ Stavy byly se≈ôazeny vzestupnƒõ podle n√°zv≈Ø\n"
                                   f"Poƒçet stav≈Ø: {len(sorted_data)}\n"
                                   f"Form√°tov√°no po ≈ô√°dc√≠ch")
            
        except Exception as e:
            error_msg = f"Do≈°lo k chybƒõ p≈ôi se≈ôazov√°n√≠: {str(e)}"
            self.update_log(f"‚ùå {error_msg}")
            QMessageBox.critical(self, "Chyba", error_msg)
            
    # FILE: gui/pdf_generator_window.py
    # CLASS: PdfGeneratorWindow
    # FUNCTION: set_anonym_watch_path
    # NOV√Å FUNKCE ‚Äì bezpeƒçn√© p≈ôenastaven√≠ sledovan√© slo≈æky pro anonymizaƒçn√≠ seznam.
    def set_anonym_watch_path(self, path: str):
        from PySide6.QtCore import QFileSystemWatcher
        import os
    
        self.anonym_watch_path = path or ""
        if not hasattr(self, "anonym_fs_watcher") or not isinstance(self.anonym_fs_watcher, QFileSystemWatcher):
            return
    
        try:
            for p in list(self.anonym_fs_watcher.directories()):
                self.anonym_fs_watcher.removePath(p)
        except Exception:
            pass
    
        if self.anonym_watch_path and os.path.isdir(self.anonym_watch_path):
            try:
                self.anonym_fs_watcher.addPath(self.anonym_watch_path)
            except Exception:
                pass
    
        try:
            self.update_anonym_photos_list()
        except Exception:
            pass
        
    # FILE: gui/pdf_generator_window.py
    # CLASS: PdfGeneratorWindow
    # FUNCTION: update_anonym_photos_list
    # NOV√Å FUNKCE ‚Äì naƒçte fotky ze sledovan√© slo≈æky a zobraz√≠ jen ty, kter√© NEJSOU v JSONu anonymizace.
    def update_anonym_photos_list(self):
        if not hasattr(self, 'anonym_photos_widget'):
            return
        folder = getattr(self, "anonym_watch_path", "") or ""
        crop = getattr(self, "crop_status", {})
        self.anonym_photos_widget.update_photos_list(folder, crop)
            
    # FILE: gui/pdf_generator_window.py
    # CLASS: PdfGeneratorWindow
    # FUNCTION: create_anonymization_tab
    # NOV√Å FUNKCE ‚Äì vytvo≈ô√≠ z√°lo≈æku "Nastaven√≠ anonymizace" (za "Nastaven√≠ stav≈Ø").
    # Obsah: vlevo JSON editor, vpravo seznam fotek (real-time watcher na c√≠lovou slo≈æku).
    def create_anonymization_tab(self):
        from PySide6.QtWidgets import QWidget, QVBoxLayout, QLabel, QGroupBox, QHBoxLayout, QPushButton
        from PySide6.QtGui import QFont
        from PySide6.QtCore import QTimer, QFileSystemWatcher
    
        tab = QWidget()
        layout = QVBoxLayout(tab)
        layout.setContentsMargins(15, 15, 15, 15)
    
        # === LEV√Å STRANA: Editor ‚Äûüõ°Ô∏è JSON anonymizace‚Äú ===
        anonym_group = QGroupBox("üõ°Ô∏è JSON anonymizace")
        anonym_layout = QVBoxLayout()
    
        editor_container = QWidget()
        editor_container_layout = QVBoxLayout(editor_container)
        editor_container_layout.setContentsMargins(0, 0, 0, 0)
    
        # JSONCodeEditor pro anonymizaci
        self.anonym_config_text = JSONCodeEditor()
        self.anonym_config_text.setFont(QFont("Consolas", 11))
        if not self.anonym_config_text.toPlainText().strip():
            # v√Ωchoz√≠ struktura dle zad√°n√≠
            self.anonym_config_text.setPlainText('{\n "ANONYMIZOVANE": []\n}')
    
        # Zmƒõna JSONu => obnov prav√Ω seznam
        self.anonym_config_text.textChanged.connect(self.update_anonym_photos_list)
    
        # Help tlaƒç√≠tko
        help_btn = QPushButton("?", parent=editor_container)
        help_btn.setFixedSize(24, 24)
        help_btn.setStyleSheet("""
            QPushButton {
                background-color: #3498db; color: white; border: none;
                border-radius: 12px; font-weight: bold; font-size: 12px;
            }
            QPushButton:hover { background-color: #2980b9; }
        """)
        help_btn.setToolTip(
            "Form√°t JSON anonymizace:\n"
            "{ \"ANONYMIZOVANE\": [\"1-5\", \"43\", ...] }\n\n"
            "‚Ä¢ Lze kombinovat intervaly i jednotliv√° ƒç√≠sla.\n"
            "‚Ä¢ ƒå√≠sla uveden√° v seznamu se NEZOBRAZ√ç v prav√©m seznamu (ji≈æ anonymizovan√°).\n"
            "‚Ä¢ Editor zobrazuje ƒç√≠sla ≈ô√°dk≈Ø; kl√°vesa Tab vlo≈æ√≠ 2 mezery."
        )
    
        def position_help_button():
            help_btn.move(editor_container.width() - 30, 5)
            help_btn.raise_()
    
        original_resize = editor_container.resizeEvent
        def new_resize_event(event):
            if original_resize:
                original_resize(event)
            position_help_button()
        editor_container.resizeEvent = new_resize_event
        QTimer.singleShot(100, position_help_button)
    
        editor_container_layout.addWidget(self.anonym_config_text)
        anonym_layout.addWidget(editor_container)
    
        # Ovl√°dac√≠ li≈°ta (ponech√°me jen validaci ‚Äì pokud m√°≈° valid√°tor)
        buttons_layout = QHBoxLayout()
        if hasattr(self, "validate_notes"):  # pou≈æ√≠v√°me stejn√Ω valid√°tor, pokud existuje
            btn_validate = QPushButton("‚úÖ Validovat JSON")
            btn_validate.clicked.connect(lambda: self._validate_json_editor(self.anonym_config_text))
            buttons_layout.addWidget(btn_validate)
        buttons_layout.addStretch()
        anonym_layout.addLayout(buttons_layout)
        anonym_group.setLayout(anonym_layout)
    
        # === PRAV√Å STRANA: Seznam fotek s jedinou akc√≠ ‚ÄûAnonymizovat‚Äú ===
        photos_group = QGroupBox("üìã Seznam fotek")
        photos_layout = QVBoxLayout(photos_group)
        photos_layout.setContentsMargins(8, 8, 8, 8)
    
        self.anonym_photos_widget = AnonymPhotosWidget()
        photos_layout.addWidget(self.anonym_photos_widget)
    
        # === HORIZONT√ÅLN√ç ROZVR≈ΩEN√ç ===
        horizontal_layout = QHBoxLayout()
        horizontal_layout.setSpacing(15)
        horizontal_layout.addWidget(anonym_group, stretch=7)
        horizontal_layout.addWidget(photos_group, stretch=3)
        layout.addLayout(horizontal_layout)
    
        # === QFileSystemWatcher ‚Äì real-time sledov√°n√≠ c√≠lov√© slo≈æky (bez podslo≈æek) ===
        from PySide6.QtCore import QFileSystemWatcher
        self.anonym_watch_path = "/Users/safronus/Library/Mobile Documents/com~apple~CloudDocs/ƒåty≈ôl√≠stky/Generov√°n√≠ PDF/Obr√°zky ke zpracov√°n√≠/"
    
        # Pokud existuje star√Ω watcher, odpoj ho
        if hasattr(self, "anonym_fs_watcher") and isinstance(self.anonym_fs_watcher, QFileSystemWatcher):
            try:
                for p in self.anonym_fs_watcher.directories():
                    self.anonym_fs_watcher.removePath(p)
            except Exception:
                pass
    
        self.anonym_fs_watcher = QFileSystemWatcher(self)
        self.set_anonym_watch_path(self.anonym_watch_path)
        self.anonym_fs_watcher.directoryChanged.connect(lambda _: self.update_anonym_photos_list())
    
        # Prvn√≠ naƒçten√≠
        self.update_anonym_photos_list()
    
        # Za≈ôazen√≠ tabu ‚Äì hned za ‚ÄûNastaven√≠ stav≈Ø‚Äú
        # (pokud po≈ôad√≠ ≈ôe≈°√≠≈° explicitnƒõ, m≈Ø≈æe≈° pou≈æ√≠t insertTab s indexem)
        self.tabs.addTab(tab, "üõ°Ô∏è Nastaven√≠ anonymizace")

    def validate_status_config(self):
        """Validace JSON konfigurace stav≈Ø v nov√©m form√°tu { "STAV": ["start-end"|"cislo", ...] }."""
        try:
            config_text = self.status_config_text.toPlainText().strip()
            if not config_text:
                QMessageBox.information(self, "Validace", "‚ö†Ô∏è JSON konfigurace stav≈Ø je pr√°zdn√°")
                return
    
            data = json.loads(config_text)
    
            if not isinstance(data, dict):
                QMessageBox.critical(self, "Chyba validace", "‚ùå JSON mus√≠ b√Ωt objekt tvaru {\"BEZFOTKY\": [\"13600-13602\", \"13603\"]}")
                return
    
            allowed_states = {"BEZFOTKY", "DAROVANY", "ZTRACENY", "BEZGPS"}  # NOV√â: P≈ôid√°n stav BEZGPS
    
            analysis = []
            analysis.append("‚úÖ JSON konfigurace stav≈Ø (nov√Ω form√°t) je platn√°\n")
    
            invalid_states = []
            invalid_tokens = []
            total_numbers = 0
    
            for state_key, seq in data.items():
                state = str(state_key).strip().upper()
                if state not in allowed_states:
                    invalid_states.append(state_key)
                    continue
    
                if not isinstance(seq, list):
                    analysis.append(f"‚ùå Stav {state}: hodnota mus√≠ b√Ωt seznam (list)")
                    continue
    
                numbers_in_state = 0
                for token in seq:
                    s = str(token).strip()
                    if not s:
                        continue
    
                    if '-' in s:
                        try:
                            a, b = s.split('-', 1)
                            start = int(a.strip())
                            end = int(b.strip())
                            if start > end:
                                start, end = end, start
                            numbers_in_state += end - start + 1
                            analysis.append(f"üìä Stav {state}: interval {start}-{end}")
                        except Exception:
                            invalid_tokens.append(f"{state}:{s}")
                    else:
                        try:
                            num = int(s)
                            numbers_in_state += 1
                            analysis.append(f"üéØ Stav {state}: ƒç√≠slo {num}")
                        except Exception:
                            invalid_tokens.append(f"{state}:{s}")
    
                total_numbers += numbers_in_state
                analysis.append(f"üìà Stav {state}: celkem {numbers_in_state} ƒç√≠sel")
    
            if invalid_states:
                analysis.append(f"\n‚ùå Nepovolen√© stavy (povoleno: BEZFOTKY, DAROVANY, ZTRACENY, BEZGPS): {', '.join(invalid_states)}")
    
            if invalid_tokens:
                analysis.append(f"\n‚ùå Neplatn√© polo≈æky: {', '.join(invalid_tokens)}")
    
            if invalid_states or invalid_tokens:
                QMessageBox.critical(self, "Chyba validace", "\n".join(analysis))
            else:
                analysis.append(f"\nüìä Celkem ƒç√≠sel ve v≈°ech stavech: {total_numbers}")
                analysis_text = "\n".join(analysis)
                QMessageBox.information(self, "Validace konfigurace stav≈Ø", analysis_text)
    
        except json.JSONDecodeError as e:
            QMessageBox.critical(self, "Chyba validace", f"‚ùå Neplatn√Ω JSON:\n\n≈ò√°dek {e.lineno}, pozice {e.colno}:\n{str(e)}")

    def sync_single_tree(self, tree_widget, new_path, name):
        """Synchronizuje jeden strom s novou cestou"""
        try:
            tree_view = tree_widget.findChild(QTreeView)
            if tree_view and hasattr(tree_view, 'file_model'):
                tree_view.root_path = new_path

                # Aktualizace path labelu
                if hasattr(tree_view, 'path_label'):
                    path_label = tree_view.path_label
                    if new_path and os.path.exists(new_path):
                        # Zkr√°cen√≠ dlouh√© cesty - v√≠ce znak≈Ø kv≈Øli vƒõt≈°√≠mu oknu
                        display_path = new_path
                        if len(new_path) > 80:  # 60*1.33 ‚âà 80
                            display_path = "..." + new_path[-77:]
                        path_label.setText(f"üìÇ {display_path}")
                        path_label.setToolTip(new_path)
                    else:
                        path_label.setText("üìÇ Cesta nen√≠ nastavena nebo neexistuje")
                        path_label.setToolTip("")

                # Aktualizace stromu
                if new_path and os.path.exists(new_path):
                    tree_view.file_model.setRootPath(new_path)
                    tree_view.setRootIndex(tree_view.file_model.index(new_path))
                    self.update_log(f"üîó {name} synchronizov√°n: {os.path.basename(new_path)}")
                else:
                    tree_view.file_model.setRootPath("")
                    if new_path:
                        self.update_log(f"‚ö†Ô∏è {name}: Cesta neexistuje")

        except Exception as e:
            self.update_log(f"‚ùå Chyba synchronizace {name}: {str(e)}")

    def validate_location_config(self):
        """Validuje JSON konfiguraci lokac√≠ v nov√©m form√°tu { IDLokace: [\"start-end\"|\"cislo\", ...] } a vyp√≠≈°e anal√Ωzu."""
        try:
            config_text = self.location_config_text.toPlainText().strip()
            if not config_text:
                QMessageBox.information(self, "Validace", "‚ö†Ô∏è JSON konfigurace je pr√°zdn√°")
                return
            data = json.loads(config_text)
            if not isinstance(data, dict):
                QMessageBox.critical(self, "Chyba validace", "‚ùå JSON mus√≠ b√Ωt objekt tvaru { \"36\": [\"13600-13680\", \"13681\"], ... }")
                return
    
            analysis = []
            analysis.append("‚úÖ JSON nastaven√≠ lokac√≠ (nov√Ω form√°t) je platn√°\n")
    
            intervals = []        # [(start,end,loc)]
            singles = {}          # {num: loc}
            invalid_tokens = []
            invalid_loc_ids = []
            first_loc = None
    
            for loc_key, seq in data.items():
                try:
                    loc_id = int(str(loc_key).strip())
                except Exception:
                    invalid_loc_ids.append(str(loc_key))
                    continue
    
                if first_loc is None:
                    first_loc = loc_id
    
                if not isinstance(seq, list):
                    analysis.append(f"‚ùå Lokace {loc_id}: hodnota mus√≠ b√Ωt seznam (list)")
                    continue
    
                for token in seq:
                    s = str(token).strip()
                    if not s:
                        continue
                    if '-' in s:
                        try:
                            a, b = s.split('-', 1)
                            start = int(a.strip()); end = int(b.strip())
                            if start > end: start, end = end, start
                            intervals.append((start, end, loc_id))
                            analysis.append(f"üìä Lokace {loc_id}: interval {start}-{end}")
                        except Exception:
                            invalid_tokens.append(f"{loc_id}:{s}")
                    else:
                        try:
                            num = int(s)
                            if num in singles and singles[num] != loc_id:
                                analysis.append(f"‚ö†Ô∏è Duplicitn√≠ ƒç√≠slo {num} pro lokace {singles[num]} a {loc_id}")
                            singles[num] = loc_id
                            analysis.append(f"üéØ Lokace {loc_id}: ƒç√≠slo {num}")
                        except Exception:
                            invalid_tokens.append(f"{loc_id}:{s}")
    
            if invalid_loc_ids:
                analysis.append(f"\n‚ùå Neplatn√° ID lokac√≠: {', '.join(invalid_loc_ids)}")
            if invalid_tokens:
                analysis.append(f"\n‚ùå Neplatn√© polo≈æky: {', '.join(invalid_tokens)}")
    
            # Kontrola p≈ôekryv≈Ø interval≈Ø (mezi r≈Øzn√Ωmi lokacemi m≈Ø≈æe znamenat konflikt)
            intervals.sort()
            for i in range(len(intervals) - 1):
                s1, e1, l1 = intervals[i]
                s2, e2, l2 = intervals[i + 1]
                if not (e1 < s2):  # p≈ôekryv nebo dotyk
                    if l1 != l2:
                        analysis.append(f"‚ö†Ô∏è P≈ôekr√Ωvaj√≠c√≠ se intervaly {s1}-{e1} (loc {l1}) a {s2}-{e2} (loc {l2})")
    
            if first_loc is None:
                analysis.append("\n‚ÑπÔ∏è Konfigurace je pr√°zdn√°; fallback v gener√°toru pou≈æije lokaci 1")
    
            analysis_text = "\n".join(analysis)
            QMessageBox.information(self, "Validace konfigurace", analysis_text)
        except json.JSONDecodeError as e:
            QMessageBox.critical(self, "Chyba validace", f"‚ùå Neplatn√Ω JSON:\n\n≈ò√°dek {e.lineno}, pozice {e.colno}:\n{str(e)}")

    def validate_notes(self):
        """Validuje JSON Nastaven√≠ pozn√°mek s detailn√≠m v√Ωstupem"""
        try:
            notes_text = self.notes_text.toPlainText().strip()
            if not notes_text:
                QMessageBox.information(self, "Validace", "‚ÑπÔ∏è Nastaven√≠ pozn√°mek jsou pr√°zdn√© (voliteln√©)")
                return

            notes = json.loads(notes_text)

            # Anal√Ωza pozn√°mek
            analysis = []
            analysis.append("‚úÖ JSON Nastaven√≠ pozn√°mek jsou platn√©\n")

            valid_notes = 0
            invalid_keys = []

            for key, value in notes.items():
                try:
                    number = int(key)
                    analysis.append(f"üìù ƒåty≈ôl√≠stek {number}: '{value}'")
                    valid_notes += 1
                except ValueError:
                    invalid_keys.append(key)

            if invalid_keys:
                analysis.append(f"\n‚ö†Ô∏è Neplatn√© kl√≠ƒçe (mus√≠ b√Ωt ƒç√≠sla): {', '.join(invalid_keys)}")

            analysis.append(f"\nüìä Celkem platn√Ωch pozn√°mek: {valid_notes}")

            analysis_text = "\n".join(analysis)
            QMessageBox.information(self, "Validace pozn√°mek", analysis_text)

        except json.JSONDecodeError as e:
            QMessageBox.critical(self, "Chyba validace", f"‚ùå Neplatn√Ω JSON:\n\nChyba na ≈ô√°dku {e.lineno}, pozici {e.colno}:\n{str(e)}")
            
    def analyze_location_config_real_time(self):
        """Real-time anal√Ωza JSON konfigurace lokac√≠ pro duplicity a neexistuj√≠c√≠ lokace"""
        try:
            config_text = self.location_config_text.toPlainText().strip()
            
            # Resetuj indikace
            duplicates = set()
            missing_locations = set()
            
            if config_text:
                try:
                    data = json.loads(config_text)
                    if isinstance(data, dict):
                        duplicates = self._find_duplicate_numbers_in_config(data)
                        missing_locations = self._find_missing_location_folders(data)
                except json.JSONDecodeError:
                    # JSON nen√≠ platn√Ω, neukazuj chyby (to ≈ôe≈°√≠ validace)
                    pass
            
            # Aktualizuj indikaƒçn√≠ labely
            self._update_duplicates_indicator(duplicates)
            self._update_missing_locations_indicator(missing_locations)
            
        except Exception as e:
            # Tich√° chyba - nenaru≈°uj u≈æivatelsk√© rozhran√≠
            pass
    
    def _find_duplicate_numbers_in_config(self, config: dict) -> set:
        """Najde duplicitn√≠ ƒç√≠sla fotek nap≈ô√≠ƒç lokacemi"""
        number_to_locations = {}
        duplicates = set()
        
        for location_id, intervals_list in config.items():
            if not isinstance(intervals_list, list):
                continue
                
            location_numbers = self._expand_intervals_to_numbers(intervals_list)
            
            for number in location_numbers:
                if number in number_to_locations:
                    duplicates.add(number)
                    number_to_locations[number].append(str(location_id))
                else:
                    number_to_locations[number] = [str(location_id)]
        
        return duplicates
    
    def _expand_intervals_to_numbers(self, intervals_list: list) -> set:
        """Rozbal√≠ seznam interval≈Ø na mno≈æinu ƒç√≠sel"""
        numbers = set()
        
        for item in intervals_list:
            item_str = str(item).strip()
            if not item_str:
                continue
                
            if '-' in item_str:
                try:
                    start_str, end_str = item_str.split('-', 1)
                    start_num = int(start_str.strip())
                    end_num = int(end_str.strip())
                    if start_num > end_num:
                        start_num, end_num = end_num, start_num
                    numbers.update(range(start_num, end_num + 1))
                except ValueError:
                    continue
            else:
                try:
                    number = int(item_str)
                    numbers.add(number)
                except ValueError:
                    continue
        
        return numbers
    
    def _find_missing_location_folders(self, config: dict) -> set:
        """Najde lokace, kter√© nemaj√≠ odpov√≠daj√≠c√≠ slo≈æky"""
        location_folder = "/Users/safronus/Library/Mobile Documents/com~apple~CloudDocs/ƒåty≈ôl√≠stky/Generov√°n√≠ PDF/Mapky lokac√≠/Nerozt≈ô√≠dƒõn√©/"
        missing = set()
        
        if not os.path.isdir(location_folder):
            return set(config.keys())
        
        try:
            existing_items = set()
            for item in os.listdir(location_folder):
                item_path = os.path.join(location_folder, item)
                existing_items.add(item)
                
                if os.path.isfile(item_path):
                    import re
                    numbers_in_name = re.findall(r'\b(\d+)\b', item)
                    for num_str in numbers_in_name:
                        existing_items.add(num_str)
            
            for location_id in config.keys():
                location_id_str = str(location_id).strip()
                
                found = False
                for existing_item in existing_items:
                    if (location_id_str == existing_item or 
                        location_id_str in existing_item or
                        existing_item.startswith(location_id_str + "+") or
                        existing_item.startswith(location_id_str + "_") or
                        existing_item.startswith(location_id_str + "-")):
                        found = True
                        break
                
                if not found:
                    missing.add(location_id_str)
                    
        except Exception:
            missing = set(config.keys())
        
        return missing
    
    def _update_duplicates_indicator(self, duplicates: set):
        """Aktualizuj indik√°tor duplicitn√≠ch p≈ôi≈ôazen√≠"""
        if not hasattr(self, 'duplicates_indicator'):
            return
            
        if duplicates:
            duplicates_list = sorted(list(duplicates))
            if len(duplicates_list) <= 10:
                duplicates_str = ", ".join(map(str, duplicates_list))
            else:
                duplicates_str = ", ".join(map(str, duplicates_list[:8])) + f", ... (+{len(duplicates_list)-8})"
            
            self.duplicates_indicator.setText(f"‚ö†Ô∏è Duplicitn√≠ ƒç√≠sla: {duplicates_str}")
            self.duplicates_indicator.setStyleSheet("""
                QLabel {
                    color: #e74c3c;
                    background-color: #fadbd8;
                    border: 1px solid #e74c3c;
                    border-radius: 4px;
                    padding: 6px 10px;
                    font-size: 11px;
                    font-weight: bold;
                }
            """)
            self.duplicates_indicator.setVisible(True)
        else:
            self.duplicates_indicator.setVisible(False)
    
    def _update_missing_locations_indicator(self, missing: set):
        """Aktualizuj indik√°tor chybƒõj√≠c√≠ch lokac√≠"""
        if not hasattr(self, 'missing_locations_indicator'):
            return
            
        if missing:
            missing_list = sorted(list(missing), key=lambda x: int(x) if x.isdigit() else 0)
            if len(missing_list) <= 8:
                missing_str = ", ".join(missing_list)
            else:
                missing_str = ", ".join(missing_list[:6]) + f", ... (+{len(missing_list)-6})"
            
            self.missing_locations_indicator.setText(f"üìÅ Neexistuj√≠c√≠ lokace: {missing_str}")
            self.missing_locations_indicator.setStyleSheet("""
                QLabel {
                    color: #f39c12;
                    background-color: #fef9e7;
                    border: 1px solid #f39c12;
                    border-radius: 4px;
                    padding: 6px 10px;
                    font-size: 11px;
                    font-weight: bold;
                }
            """)
            self.missing_locations_indicator.setVisible(True)
        else:
            self.missing_locations_indicator.setVisible(False)

    def generate_pdf(self):
        """Spust√≠ generov√°n√≠ PDF s aktualizovan√Ωmi parametry."""
        if not self.validate_inputs():
            return
    
        self.generation_start_time = time.time()
        n = self.spin_n.value()
        m = self.spin_m.value()
    
        location_path = self.edit_location_path.text()
        clover_path = self.edit_clover_path.text()
        output_folder = self.edit_output_folder.text()
        pages_per_pdf = self.spin_pages_per_pdf.value()
    
        # Bez pou≈æit√≠ strip: robustn√≠ extrakce prvn√≠ho n√°zvu p≈ôed ƒç√°rkou/nov√Ωm ≈ô√°dkem
        def _extract_first_filename(raw):
            # Pokud by omylem dorazil list, vezmi prvn√≠ prvek
            if isinstance(raw, list):
                raw = raw if raw else ""
            if raw is None:
                raw = ""
            s = str(raw)
            # Najdi prvn√≠ oddƒõlovaƒç (ƒç√°rka nebo nov√Ω ≈ô√°dek)
            end = len(s)
            for sep in (',', '\n', '\r'):
                p = s.find(sep)
                if p != -1 and p < end:
                    end = p
            # O≈ôez√°n√≠ b√≠l√Ωch znak≈Ø manu√°lnƒõ (bez strip)
            i = end - 1
            while i >= 0 and s[i].isspace():
                i -= 1
            start = 0
            while start <= i and s[start].isspace():
                start += 1
            return s[start:i+1] if i >= start else ""
    
        raw_name = self.edit_pdf_filename.text()
        pdf_filename = _extract_first_filename(raw_name)
        output_pdf = os.path.join(output_folder, pdf_filename)
    
        # Naƒçten√≠ JSON konfigurace lokac√≠
        try:
            location_config = json.loads(self.location_config_text.toPlainText().strip())
        except json.JSONDecodeError as e:
            QMessageBox.critical(self, "Chyba", f"Neplatn√° JSON nastaven√≠ lokac√≠:\n{str(e)}")
            return
    
        # Naƒçten√≠ pozn√°mek
        poznamky_dict = {}
        notes_text = self.notes_text.toPlainText().strip()
        if notes_text:
            try:
                notes_data = json.loads(notes_text)
                poznamky_dict = {int(k): v for k, v in notes_data.items()}
            except (json.JSONDecodeError, ValueError) as e:
                QMessageBox.critical(self, "Chyba", f"Neplatn√Ω form√°t pozn√°mek:\n{str(e)}")
                return
    
        # P≈ôevod JSON stav≈Ø z nov√©ho form√°tu {"STAV": [intervaly/ƒç√≠sla]} na star√Ω {ƒç√≠slo: STAV}
        def _strip_json_comments(text: str) -> str:
            import re
            text = re.sub(r"/\*.*?\*/", "", text, flags=re.S)
            text = re.sub(r"//.*", "", text)
            return text
        
        def _parse_status_config_new_format(config_dict):
            """P≈ôevede nov√Ω form√°t {"STAV": [intervaly/ƒç√≠sla]} na {ƒç√≠slo: STAV} pro pdf_generator.py"""
            result = {}
            
            for state_name, number_list in config_dict.items():
                if not isinstance(number_list, list):
                    continue
                    
                for item in number_list:
                    item_str = str(item).strip()
                    if not item_str:
                        continue
                        
                    if '-' in item_str:
                        try:
                            start_str, end_str = item_str.split('-', 1)
                            start_num = int(start_str.strip())
                            end_num = int(end_str.strip())
                            if start_num > end_num:
                                start_num, end_num = end_num, start_num
                            
                            for num in range(start_num, end_num + 1):
                                result[num] = state_name
                        except ValueError:
                            continue
                    else:
                        try:
                            num = int(item_str)
                            result[num] = state_name
                        except ValueError:
                            continue
            
            return result
        
        status_dict = {}
        status_text_raw = self.status_config_text.toPlainText().strip()
        if status_text_raw:
            try:
                status_text = _strip_json_comments(status_text_raw)
                if status_text.strip():
                    data = json.loads(status_text)
                    if not isinstance(data, dict):
                        raise ValueError("JSON konfigurace stav≈Ø mus√≠ b√Ωt objekt.")
                    
                    # P≈ôevod z nov√©ho form√°tu na star√Ω pro pdf_generator.py
                    status_dict = _parse_status_config_new_format(data)
                    
                    if status_dict:
                        self.update_log(f"‚úÖ Naƒçteno {len(status_dict)} stavov√Ωch z√°znam≈Ø")
                        
            except Exception as e:
                self.update_log(f"‚ö†Ô∏è Stavov√Ω JSON ignorov√°n (chyba): {e}")
                QMessageBox.warning(self, "Varov√°n√≠", f"Konfigurace stav≈Ø bude ignorov√°na:\n{e}")

    
        copy_folder = self.edit_copy_folder.text() if self.checkbox_copy_enabled.isChecked() else None
    
        # Vytvo≈ôen√≠ a spu≈°tƒõn√≠ vl√°kna
        try:
            self.generator_thread = PDFGeneratorThread(
                n=n, m=m, location_config=location_config,
                def_cesta_lokaci=location_path, cesta_ctyrlistky=clover_path,
                output_pdf=output_pdf, poznamky_dict=poznamky_dict, copy_folder=copy_folder,
                pages_per_pdf=pages_per_pdf, status_dict=status_dict
            )
        except Exception as e:
            self.update_log(f"‚ùå Chyba p≈ôi p≈ô√≠pravƒõ generov√°n√≠: {e}")
            QMessageBox.critical(self, "Chyba", f"Nelze spustit generov√°n√≠:\n{e}")
            return
    
        self.generator_thread.progress_updated.connect(self.update_log_and_progress)
        self.generator_thread.finished_success.connect(self.on_generation_success)
        self.generator_thread.finished_error.connect(self.on_generation_error)
    
        self.btn_generate.setEnabled(False)
        self.btn_stop.setEnabled(True)
        self.tabs.setEnabled(False)
    
        for bar in [self.progress_bar_loading, self.progress_bar_combining, self.progress_bar_saving]:
            bar.setValue(0)
            bar.setVisible(True)
    
        self.log_text.clear()
        self.update_log(f"üöÄ Spou≈°t√≠m generov√°n√≠ PDF pro rozsah: {n} - {m}")
        self.generator_thread.start()

    def validate_inputs(self):
        """Validace vstupn√≠ch hodnot - s progress indik√°torem"""
        self.update_log("üîç Spou≈°t√≠m validaci vstupn√≠ch hodnot...")

        # Kontrola rozsahu
        if self.spin_n.value() > self.spin_m.value():
            self.update_log("‚ùå Chyba: Prvn√≠ ƒçty≈ôl√≠stek (N) nem≈Ø≈æe b√Ωt vƒõt≈°√≠ ne≈æ posledn√≠ (M)")
            QMessageBox.warning(self, "Chyba", "Prvn√≠ ƒçty≈ôl√≠stek (N) nem≈Ø≈æe b√Ωt vƒõt≈°√≠ ne≈æ posledn√≠ (M)")
            return False

        self.update_log("‚úÖ Rozsah ƒçty≈ôl√≠stk≈Ø je v po≈ô√°dku")

        # Kontrola cest
        paths_to_check = [
            (self.edit_location_path.text(), "mapky lokac√≠", "üìÅ"),
            (self.edit_clover_path.text(), "ƒçty≈ôl√≠stky", "üçÄ")
        ]

        for path, name, icon in paths_to_check:
            if not path:
                error_msg = f"‚ùå Chyba: Zadejte cestu k {name}"
                self.update_log(error_msg)
                QMessageBox.warning(self, "Chyba", f"Zadejte cestu k {name}")
                return False

            if not os.path.exists(path):
                error_msg = f"‚ùå Chyba: Cesta k {name} neexistuje: {path}"
                self.update_log(error_msg)
                QMessageBox.warning(self, "Chyba", f"Cesta k {name} neexistuje")
                return False

            self.update_log(f"‚úÖ Cesta k {name} je platn√°")

        # Kontrola v√Ωstupn√≠ slo≈æky
        if not self.edit_output_folder.text():
            self.update_log("‚ùå Chyba: Zadejte v√Ωstupn√≠ slo≈æku pro PDF")
            QMessageBox.warning(self, "Chyba", "Zadejte v√Ωstupn√≠ slo≈æku pro PDF")
            return False

        # Kontrola n√°zvu PDF souboru
        if not self.edit_pdf_filename.text():
            self.update_log("‚ùå Chyba: Zadejte n√°zev PDF souboru")
            QMessageBox.warning(self, "Chyba", "Zadejte n√°zev PDF souboru")
            return False

        # Kontrola p≈ô√≠pony .pdf
        if not self.edit_pdf_filename.text().lower().endswith('.pdf'):
            reply = QMessageBox.question(
                self,
                "P≈ô√≠pona souboru",
                "N√°zev souboru neobsahuje p≈ô√≠ponu .pdf. Chcete ji p≈ôidat automaticky?",
                QMessageBox.Yes | QMessageBox.No
            )

            if reply == QMessageBox.Yes:
                current_name = self.edit_pdf_filename.text()
                self.edit_pdf_filename.setText(f"{current_name}.pdf")
                self.update_log(f"‚úÖ P≈ôid√°na p≈ô√≠pona .pdf: {current_name}.pdf")

        # Kontrola existence v√Ωstupn√≠ slo≈æky
        output_folder = self.edit_output_folder.text()
        if not os.path.exists(output_folder):
            reply = QMessageBox.question(
                self,
                "V√Ωstupn√≠ slo≈æka",
                f"V√Ωstupn√≠ slo≈æka neexistuje:\n{output_folder}\n\nChcete ji vytvo≈ôit?",
                QMessageBox.Yes | QMessageBox.No
            )

            if reply == QMessageBox.Yes:
                try:
                    os.makedirs(output_folder, exist_ok=True)
                    self.update_log(f"‚úÖ Vytvo≈ôena v√Ωstupn√≠ slo≈æka: {output_folder}")
                except Exception as e:
                    error_msg = f"‚ùå Nepoda≈ôilo se vytvo≈ôit slo≈æku: {str(e)}"
                    self.update_log(error_msg)
                    QMessageBox.critical(self, "Chyba", f"Nepoda≈ôilo se vytvo≈ôit slo≈æku:\n{str(e)}")
                    return False
            else:
                self.update_log("‚ùå Validace zru≈°ena u≈æivatelem")
                return False

        self.update_log("‚úÖ V√Ωstupn√≠ slo≈æka je v po≈ô√°dku")

        # Kontrola JSON konfigurace
        try:
            config_text = self.location_config_text.toPlainText().strip()
            json.loads(config_text)
            self.update_log("‚úÖ JSON konfigurace lokac√≠ je platn√°")
        except json.JSONDecodeError as e:
            error_msg = f"‚ùå Neplatn√° JSON konfigurace lokac√≠: {str(e)}"
            self.update_log(error_msg)
            QMessageBox.warning(self, "Chyba", "Neplatn√° JSON konfigurace lokac√≠")
            return False

        # Kontrola JSON pozn√°mek
        notes_text = self.notes_text.toPlainText().strip()
        if notes_text:
            try:
                json.loads(notes_text)
                self.update_log("‚úÖ JSON Nastaven√≠ pozn√°mek jsou platn√©")
            except json.JSONDecodeError as e:
                error_msg = f"‚ùå Neplatn√Ω JSON form√°t pozn√°mek: {str(e)}"
                self.update_log(error_msg)
                QMessageBox.warning(self, "Chyba", "Neplatn√Ω JSON form√°t pozn√°mek")
                return False
        else:
            self.update_log("‚ÑπÔ∏è Nastaven√≠ pozn√°mek nejsou zad√°ny (voliteln√©)")

        # Kontrola duplicitn√≠ho souboru
        full_pdf_path = self.get_full_pdf_path()
        if os.path.exists(full_pdf_path):
            reply = QMessageBox.question(
                self,
                "Soubor ji≈æ existuje",
                f"PDF soubor ji≈æ existuje:\n{full_pdf_path}\n\nChcete ho p≈ôepsat?",
                QMessageBox.Yes | QMessageBox.No
            )

            if reply == QMessageBox.No:
                self.update_log("‚ùå Generov√°n√≠ zru≈°eno - soubor ji≈æ existuje")
                return False
            else:
                self.update_log("‚ö†Ô∏è Existuj√≠c√≠ soubor bude p≈ôeps√°n")

        self.update_log("‚úÖ V≈°echny validace √∫spƒõ≈°nƒõ dokonƒçeny")
        return True

    def get_full_pdf_path(self):
        """Vr√°t√≠ celou cestu k PDF souboru"""
        output_folder = self.edit_output_folder.text()
        pdf_filename = self.edit_pdf_filename.text()
        return os.path.join(output_folder, pdf_filename)

    def stop_generation(self):
        """Zastaven√≠ generov√°n√≠ - opraven√° verze bez zamrznut√≠"""
        if hasattr(self, 'generator_thread') and self.generator_thread and self.generator_thread.isRunning():
            self.update_log("‚èπÔ∏è Zastavuji generov√°n√≠...")
            
            # Pou≈æijeme requestInterruption() m√≠sto terminate()
            self.generator_thread.requestInterruption()
            
            # Pou≈æijeme timeout pro wait() aby se aplikace nezamrzla
            if not self.generator_thread.wait(2000):  # 2 sekundy timeout
                self.update_log("‚ö†Ô∏è Vynucen√© ukonƒçen√≠ vl√°kna...")
                self.generator_thread.terminate()
                self.generator_thread.wait(1000)
            
            self.update_log("‚èπÔ∏è Generov√°n√≠ zastaveno u≈æivatelem")
            self.reset_ui_after_generation()


    def update_log(self, message: str):
        """
        Bezpeƒçn√© logov√°n√≠ do panelu:
        - pokud log panel je≈°tƒõ nen√≠ p≈ôipraven, buffruje ≈ô√°dky do self._early_logs,
        - jakmile je panel vytvo≈ôen, v≈°e se flushne a dal≈°√≠ zpr√°vy jdou rovnou do UI,
        - nikdy nep√≠≈°e do konzole.
        """
        try:
            # P≈ôidej ƒçasovou znaƒçku a lehk√© barevn√© oznaƒçen√≠ podle ikon (zachov√°no jako prost√Ω text)
            import datetime
            ts = datetime.datetime.now().strftime("%H:%M:%S")
            line = f"[{ts}] {message}"

            # Pokud je≈°tƒõ log panel nen√≠ p≈ôipraven ‚Üí buffer
            if not getattr(self, "_log_ready", False) or not hasattr(self, "log_text") or self.log_text is None:
                if not hasattr(self, "_early_logs") or self._early_logs is None:
                    self._early_logs = []
                self._early_logs.append(line)
                return

            # P≈ô√≠m√Ω z√°pis do panelu
            self._append_log_line(line)

            # UI pump (jemn√©) ‚Äì jen pokud existuje QApplication
            try:
                from PySide6.QtWidgets import QApplication
                app = QApplication.instance()
                if app:
                    app.processEvents()
            except Exception:
                pass

        except Exception:
            # Z√°mƒõrnƒõ ≈æ√°dn√Ω print ‚Äì logy do konzole nechceme
            pass

    def on_generation_success(self, pdf_paths):
        """√öspƒõ≈°n√© dokonƒçen√≠ generov√°n√≠ - s podporou v√≠ce soubor≈Ø a mƒõ≈ôen√≠m ƒçasu."""
        # Vypoƒç√≠t√°me a zalogujeme celkov√Ω ƒças
        if hasattr(self, 'generation_start_time'):
            end_time = time.time()
            duration = end_time - self.generation_start_time
            self.update_log(f"‚úÖ Celkov√Ω ƒças generov√°n√≠: {duration:.2f} s")
            del self.generation_start_time # Vyƒçist√≠me promƒõnnou

        self.reset_ui_after_generation()

        if isinstance(pdf_paths, list) and len(pdf_paths) > 1:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Information)
            msg.setWindowTitle("Generov√°n√≠ dokonƒçeno")
            msg.setText(f"‚úÖ Bylo √∫spƒõ≈°nƒõ vygenerov√°no {len(pdf_paths)} PDF soubor≈Ø!")
            
            btn_open_folder = msg.addButton("üìÅ Otev≈ô√≠t slo≈æku", QMessageBox.ActionRole)
            btn_open_all = msg.addButton("üìÑ Otev≈ô√≠t v≈°echna PDF", QMessageBox.ActionRole)
            btn_ok = msg.addButton("OK", QMessageBox.AcceptRole)
            
            msg.exec()

            clicked_button = msg.clickedButton()
            if clicked_button == btn_open_all:
                for path in pdf_paths:
                    self.open_pdf_file(path)
            elif clicked_button == btn_open_folder:
                self.open_output_folder()
        
        elif isinstance(pdf_paths, list) and len(pdf_paths) == 1:
            self.handle_single_pdf_success(pdf_paths[0])
        else:
            self.handle_single_pdf_success(str(pdf_paths))

    def handle_single_pdf_success(self, pdf_path):
        """Obsluha √∫spƒõ≈°n√©ho dokonƒçen√≠ pro jeden PDF soubor."""
        self.reset_ui_after_generation()
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Information)
        msg.setWindowTitle("Generov√°n√≠ dokonƒçeno")
        msg.setText("‚úÖ PDF bylo √∫spƒõ≈°nƒõ vygenerov√°no!")
        msg.setInformativeText(f"Soubor: {os.path.basename(pdf_path)}")
        msg.setDetailedText(f"Cel√° cesta:\n{pdf_path}")
        
        btn_open_folder = msg.addButton("üìÅ Otev≈ô√≠t slo≈æku", QMessageBox.ActionRole)
        btn_open_file = msg.addButton("üìÑ Otev≈ô√≠t PDF", QMessageBox.ActionRole)
        btn_ok = msg.addButton("OK", QMessageBox.AcceptRole)

        msg.exec()

        if msg.clickedButton() == btn_open_folder:
            self.open_output_folder()
        elif msg.clickedButton() == btn_open_file:
            self.open_pdf_file(pdf_path)


    def open_pdf_file(self, pdf_path):
        """Otev≈ôe PDF soubor v defaultn√≠ aplikaci"""
        try:
            import subprocess
            import platform

            if platform.system() == 'Darwin':  # macOS
                subprocess.Popen(['open', pdf_path])
            elif platform.system() == 'Windows':
                subprocess.Popen(['start', pdf_path], shell=True)
            else:  # Linux
                subprocess.Popen(['xdg-open', pdf_path])

            self.update_log(f"üìÑ PDF otev≈ôeno: {os.path.basename(pdf_path)}")

        except Exception as e:
            self.update_log(f"‚ùå Chyba p≈ôi otev√≠r√°n√≠ PDF: {str(e)}")
            QMessageBox.warning(self, "Chyba", f"Nepoda≈ôilo se otev≈ô√≠t PDF:\n{str(e)}")

    def on_generation_error(self, error_message):
        """Chyba p≈ôi generov√°n√≠"""
        self.reset_ui_after_generation()
        QMessageBox.critical(self, "Chyba generov√°n√≠", f"Do≈°lo k chybƒõ:\n\n{error_message}")
        
    def reset_ui_after_generation(self):
        """Resetuje UI po dokonƒçen√≠ generov√°n√≠."""
        self.btn_generate.setEnabled(True)
        self.btn_stop.setEnabled(False)
        self.tabs.setEnabled(True)
        
        # Skryt√≠ v≈°ech progress bar≈Ø
        self.progress_bar_loading.setVisible(False)
        self.progress_bar_combining.setVisible(False)
        self.progress_bar_saving.setVisible(False)

        # Cleanup thread
        if hasattr(self, 'generator_thread') and self.generator_thread:
            self.generator_thread.deleteLater()
            self.generator_thread = None

        self.update_full_pdf_path_preview()

    def open_output_folder(self):
        """Otev≈ôe v√Ωstupn√≠ slo≈æku v file manageru - aktualizovan√° verze"""
        output_folder = self.edit_output_folder.text()
        if output_folder and os.path.exists(output_folder):
            try:
                import subprocess
                import platform

                if platform.system() == 'Darwin':  # macOS
                    subprocess.Popen(['open', output_folder])
                elif platform.system() == 'Windows':
                    subprocess.Popen(['explorer', output_folder])
                else:  # Linux
                    subprocess.Popen(['xdg-open', output_folder])

                self.update_log(f"üìÅ Slo≈æka otev≈ôena: {output_folder}")

            except Exception as e:
                self.update_log(f"‚ùå Chyba p≈ôi otev√≠r√°n√≠ slo≈æky: {str(e)}")
                QMessageBox.warning(self, "Chyba", f"Nepoda≈ôilo se otev≈ô√≠t slo≈æku:\n{str(e)}")
        else:
            QMessageBox.warning(self, "Chyba", "V√Ωstupn√≠ slo≈æka neexistuje nebo nen√≠ zad√°na")

    def save_settings(self):
        """Ulo≈æ√≠ aktu√°ln√≠ nastaven√≠ a stav o≈ôez√°n√≠ fotek do slo≈æky 'settings'."""
        from pathlib import Path
        import json
        from PySide6.QtWidgets import QMessageBox

        settings_dir = Path("settings")
        settings_dir.mkdir(exist_ok=True)  # Zajist√≠, ≈æe slo≈æka existuje

        settings_path = settings_dir / "pdf_generator_settings.json"
        crop_status_path = settings_dir / "crop_status.json"  # nez√°visl√Ω soubor pro o≈ôezy

        # Sestav slovn√≠k nastaven√≠
        try:
            settings = {
                'n': self.spin_n.value(),
                'm': self.spin_m.value(),
                'location_path': self.edit_location_path.text(),
                'clover_path': self.edit_clover_path.text(),
                'output_folder': self.edit_output_folder.text(),
                'pdf_filename': self.edit_pdf_filename.text(),
                'auto_filename': self.checkbox_auto_filename.isChecked(),
                'copy_folder': self.edit_copy_folder.text() if hasattr(self, 'edit_copy_folder') else '',
                'copy_enabled': self.checkbox_copy_enabled.isChecked() if hasattr(self, 'checkbox_copy_enabled') else False,
                'location_config': self.location_config_text.toPlainText() if hasattr(self, 'location_config_text') else '',
                'notes': self.notes_text.toPlainText() if hasattr(self, 'notes_text') else '',
                'status_config': self.status_config_text.toPlainText() if hasattr(self, 'status_config_text') else '',
                # ‚úÖ NOV√â: ulo≈æ i JSON anonymizace
                'anonym_config': self.anonym_config_text.toPlainText() if hasattr(self, 'anonym_config_text') else ''
            }
        except Exception as e:
            if hasattr(self, 'update_log'):
                self.update_log(f"‚ö†Ô∏è Chyba p≈ôi ƒçten√≠ vstup≈Ø pro ulo≈æen√≠ nastaven√≠: {e}")
            settings = {}

        # Ulo≈æen√≠ nastaven√≠
        try:
            with open(settings_path, "w", encoding="utf-8") as f:
                json.dump(settings, f, indent=2, ensure_ascii=False)
            if hasattr(self, 'update_log'):
                self.update_log(f"üíæ Nastaven√≠ ulo≈æeno do: {settings_path}")
        except Exception as e:
            if hasattr(self, 'update_log'):
                self.update_log(f"‚ö†Ô∏è Chyba p≈ôi ukl√°d√°n√≠ nastaven√≠: {e}")
            QMessageBox.warning(self, "Varov√°n√≠", f"Nepoda≈ôilo se ulo≈æit nastaven√≠:\n{str(e)}")

        # Ulo≈æen√≠ stavu o≈ôez√°n√≠
        try:
            with open(crop_status_path, "w", encoding="utf-8") as f:
                json.dump(getattr(self, 'crop_status', {}), f, indent=2, ensure_ascii=False)
            if hasattr(self, 'update_log'):
                self.update_log(f"üíæ Stav o≈ôez√°n√≠ ulo≈æen do: {crop_status_path}")
        except Exception as e:
            if hasattr(self, 'update_log'):
                self.update_log(f"‚ö†Ô∏è Chyba p≈ôi ukl√°d√°n√≠ stavu o≈ôez√°n√≠: {e}")

    def load_settings(self):
        """Naƒçte ulo≈æen√° nastaven√≠ a stav o≈ôez√°n√≠ fotek ze slo≈æky 'settings'."""
        from pathlib import Path
        import json
        from PySide6.QtCore import QTimer

        settings_dir = Path("settings")
        settings_path = settings_dir / "pdf_generator_settings.json"
        crop_status_path = settings_dir / "crop_status.json"

        # V√Ωchoz√≠ hodnoty (vƒçetnƒõ anonymizace)
        default_settings = {
            'n': 13590, 'm': 13590,
            'location_path': '',
            'clover_path': '',
            'output_folder': '',
            'pdf_filename': '',
            'auto_filename': True,
            'copy_folder': '',
            'copy_enabled': False,
            'location_config': '{\n "36": ["13600-13680", "13681"],\n "8": ["13300-13301"]\n}',
            'notes': '{\n "13302": "DAR - BIP 2025"\n}',
            'status_config': '{}',
            # ‚úÖ NOV√â: v√Ωchoz√≠ JSON anonymizace
            'anonym_config': '{\n "ANONYMIZOVANE": []\n}'
        }

        # Naƒçti nastaven√≠
        if settings_path.exists():
            try:
                with open(settings_path, 'r', encoding='utf-8') as f:
                    saved = json.load(f)
                settings = {**default_settings, **(saved or {})}
                if hasattr(self, 'update_log'):
                    self.update_log(f"‚úÖ Nastaven√≠ naƒçteno z: {settings_path}")
            except Exception as e:
                settings = default_settings
                if hasattr(self, 'update_log'):
                    self.update_log(f"‚ö†Ô∏è Chyba p≈ôi naƒç√≠t√°n√≠ nastaven√≠: {e}")
        else:
            settings = default_settings
            if hasattr(self, 'update_log'):
                self.update_log("‚ÑπÔ∏è Pou≈æ√≠v√°m v√Ωchoz√≠ nastaven√≠")

        # Aplikuj nastaven√≠ do UI
        try:
            self.spin_n.setValue(settings['n'])
            self.spin_m.setValue(settings['m'])
            self.edit_location_path.setText(settings['location_path'])
            self.edit_clover_path.setText(settings['clover_path'])
            self.edit_output_folder.setText(settings['output_folder'])
            if hasattr(self, 'edit_copy_folder'):
                self.edit_copy_folder.setText(settings['copy_folder'])
            if hasattr(self, 'checkbox_copy_enabled'):
                self.checkbox_copy_enabled.setChecked(settings['copy_enabled'])
            if hasattr(self, 'location_config_text'):
                self.location_config_text.setPlainText(settings['location_config'])
            if hasattr(self, 'notes_text'):
                self.notes_text.setPlainText(settings['notes'])
            if hasattr(self, 'status_config_text'):
                self.status_config_text.setPlainText(settings['status_config'])
            if hasattr(self, 'anonym_config_text'):
                # ‚úÖ NOV√â: naƒçti ulo≈æen√Ω JSON anonymizace
                self.anonym_config_text.setPlainText(settings.get('anonym_config', default_settings['anonym_config']))
            if hasattr(self, 'checkbox_auto_filename'):
                self.checkbox_auto_filename.setChecked(settings['auto_filename'])
            if settings.get('pdf_filename'):
                self.edit_pdf_filename.setText(settings['pdf_filename'])
            else:
                if hasattr(self, 'update_pdf_filename'):
                    self.update_pdf_filename()
        except Exception as e:
            if hasattr(self, 'update_log'):
                self.update_log(f"‚ö†Ô∏è Chyba p≈ôi aplikaci nastaven√≠ do UI: {e}")

        # Naƒçti stav o≈ôez√°n√≠
        try:
            self.crop_status_file = crop_status_path
            if crop_status_path.exists():
                with open(crop_status_path, "r", encoding="utf-8") as f:
                    self.crop_status = json.load(f)
                if hasattr(self, 'update_log'):
                    self.update_log(f"‚úÖ Stav o≈ôez√°n√≠ naƒçten z: {crop_status_path}")
            else:
                self.crop_status = {}
        except Exception as e:
            self.crop_status = {}
            if hasattr(self, 'update_log'):
                self.update_log(f"‚ö†Ô∏è Chyba p≈ôi naƒç√≠t√°n√≠ crop_status.json: {e}")

        # Refreshy / watchery (ponech√°no dle existuj√≠c√≠ logiky)
        if hasattr(self, '_refresh_clover_watcher'):
            self._refresh_clover_watcher()
        if hasattr(self, '_refresh_output_watcher'):
            self._refresh_output_watcher()
        if hasattr(self, 'update_clover_stats_label'):
            QTimer.singleShot(50, self.update_clover_stats_label)
        if hasattr(self, 'update_full_pdf_path_preview'):
            QTimer.singleShot(50, self.update_full_pdf_path_preview)
        if hasattr(self, 'update_missing_photos_list'):
            QTimer.singleShot(200, self.update_missing_photos_list)
        if hasattr(self, 'check_duplicate_photos_real_time'):
            QTimer.singleShot(300, self.check_duplicate_photos_real_time)
        if hasattr(self, 'check_missing_locations_real_time'):
            QTimer.singleShot(350, self.check_missing_locations_real_time)
        if hasattr(self, 'update_status_photos_list'):
            QTimer.singleShot(400, self.update_status_photos_list)
        if hasattr(self, 'check_duplicate_states_real_time'):
            QTimer.singleShot(400, self.check_duplicate_states_real_time)
        if hasattr(self, 'check_states_without_notes_real_time'):
            QTimer.singleShot(450, self.check_states_without_notes_real_time)
        if hasattr(self, 'update_pdf_pages_stats'):
            QTimer.singleShot(100, self.update_pdf_pages_stats)

    def _load_crop_status(self):
        """Naƒçte stavy o≈ôezu fotek ze souboru crop_status.json."""
        try:
            if self.crop_status_file.exists():
                with open(self.crop_status_file, 'r', encoding='utf-8') as f:
                    self.crop_status = json.load(f)
                self.update_log(f"‚úÖ Naƒçteno {len(self.crop_status)} stav≈Ø o≈ôezu.")
            else:
                self.update_log("‚ÑπÔ∏è Soubor se stavy o≈ôezu nenalezen, bude vytvo≈ôen p≈ôi ulo≈æen√≠.")
                self.crop_status = {}
                
        except (json.JSONDecodeError, IOError) as e:
            self.update_log(f"‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ stav≈Ø o≈ôezu: {e}")
            self.crop_status = {}

    def _save_crop_status(self):
        """Ulo≈æ√≠ aktu√°ln√≠ stavy o≈ôezu fotek do souboru crop_status.json."""
        try:
            # Vytvo≈ôen√≠ slo≈æky pokud neexistuje
            self.crop_status_file.parent.mkdir(parents=True, exist_ok=True)
            
            # Z√°pis JSON dat
            with open(self.crop_status_file, 'w', encoding='utf-8') as f:
                json.dump(self.crop_status, f, ensure_ascii=False, indent=2)
                
            self.update_log(f"üíæ Stav o≈ôez√°n√≠ ulo≈æen ({len(self.crop_status)} fotek)")
            
        except Exception as e:
            self.update_log(f"‚ùå Chyba p≈ôi ukl√°d√°n√≠ stav≈Ø o≈ôezu: {e}")
            
    def check_duplicate_photos_real_time(self):
        """Real-time kontrola duplicitn√≠ch p≈ôi≈ôazen√≠ ƒç√≠sel fotek"""
        try:
            config_text = self.location_config_text.toPlainText().strip()
            duplicates = set()
            
            if config_text:
                try:
                    data = json.loads(config_text)
                    if isinstance(data, dict):
                        duplicates = self._find_duplicate_numbers_in_config(data)
                except json.JSONDecodeError:
                    # JSON nen√≠ platn√Ω, neukazuj chyby duplicit
                    pass
            
            # Aktualizuj pouze indik√°tor duplicit
            self._update_duplicates_indicator(duplicates)
            
        except Exception:
            # Tich√° chyba - nenaru≈°uj u≈æivatelsk√© rozhran√≠
            pass
    
    def check_missing_locations_real_time(self):
        """Real-time kontrola neexistuj√≠c√≠ch lokac√≠ ve slo≈æce"""
        try:
            config_text = self.location_config_text.toPlainText().strip()
            missing_locations = set()
            
            if config_text:
                try:
                    data = json.loads(config_text)
                    if isinstance(data, dict):
                        missing_locations = self._find_missing_location_folders(data)
                except json.JSONDecodeError:
                    # JSON nen√≠ platn√Ω, neukazuj chyby lokac√≠
                    pass
            
            # Aktualizuj pouze indik√°tor chybƒõj√≠c√≠ch lokac√≠
            self._update_missing_locations_indicator(missing_locations)
            
        except Exception:
            # Tich√° chyba - nenaru≈°uj u≈æivatelsk√© rozhran√≠
            pass
    
    def trigger_all_location_checks(self):
        """Spust√≠ v≈°echny kontroly lokac√≠ nez√°visle"""
        # Spust√≠ obƒõ kontroly samostatnƒõ
        QTimer.singleShot(50, self.check_duplicate_photos_real_time)
        QTimer.singleShot(100, self.check_missing_locations_real_time)


    def _mark_log_ready(self):
        """
        Oznaƒç√≠ log panel jako p≈ôipraven√Ω a vypr√°zdn√≠ early‚Äëbuffer do self.log_text.
        Bez efektu, pokud ji≈æ bylo provedeno.
        """
        try:
            if getattr(self, "_log_ready", False):
                return
            if not hasattr(self, "log_text") or self.log_text is None:
                return

            # Flush early zpr√°v (pokud nƒõjak√© jsou)
            for line in getattr(self, "_early_logs", []) or []:
                self._append_log_line(line)
            self._early_logs = []
            self._log_ready = True
        except Exception:
            # Bezpeƒçn√Ω no‚Äëop; nechceme padat p≈ôi startu okna
            pass

    def _append_log_line(self, message: str):
        """
        Intern√≠: zap√≠≈°e jednu zpr√°vu do log panelu se zachov√°n√≠m auto‚Äëscrollu.
        Pou≈æ√≠v√° HTML form√°tov√°n√≠ pro barevn√© rozli≈°en√≠ podle typu zpr√°vy.
        """
        try:
            # Urƒçen√≠ barvy podle ikony ve zpr√°vƒõ
            color = self._get_log_color(message)
            
            # HTML form√°tov√°n√≠ s barvou
            html_message = f'<span style="color: {color};">{message}</span>'
            
            # P≈ôid√°n√≠ do log panelu
            self.log_text.append(html_message)
            
            # Auto‚Äëscroll
            try:
                sb = self.log_text.verticalScrollBar()
                if sb is not None:
                    sb.setValue(sb.maximum())
            except Exception:
                pass
        except Exception:
            pass
    
    def _get_log_color(self, message: str):
        """Urƒç√≠ barvu zpr√°vy podle jej√≠ho obsahu/ikony"""
        # Pozitivn√≠ zpr√°vy - zelen√°
        positive_icons = ['‚úÖ', 'üöÄ', 'üìÑ', 'üìÅ', 'üíæ', 'üîó', 'üéØ']
        if any(icon in message for icon in positive_icons):
            return '#4CAF50'  # Zelen√°
        
        # Chybov√© zpr√°vy - ƒçerven√°  
        error_icons = ['‚ùå', '‚ö†Ô∏è', 'üö´']
        if any(icon in message for icon in error_icons):
            return '#f44336'  # ƒåerven√°
        
        # Ostatn√≠ informativn√≠ zpr√°vy - b√≠l√° (svƒõtl√° pro dark theme)
        return '#e6e6e6'  # B√≠l√°/svƒõtl√°

    # FILE: gui/pdf_generator_window.py
    # CLASS: PdfGeneratorWindow
    # FUNCTION: _cleanup_bak_files
    # P≈òIDEJ TUTO NOVOU FUNKCI DO T≈ò√çDY (nemƒõ≈à nic jin√©ho).
    def _cleanup_bak_files(self) -> None:
        """
        Sma≈æe v≈°echny .bak soubory ve slo≈æce:
          /Users/safronus/Library/Mobile Documents/com~apple~CloudDocs/ƒåty≈ôl√≠stky/Generov√°n√≠ PDF/Obr√°zky ke zpracov√°n√≠/
        Tich√Ω bƒõh (bez dialog≈Ø). Chyby jsou ignorov√°ny.
        """
        import os
        from pathlib import Path
    
        root = Path("/Users/safronus/Library/Mobile Documents/com~apple~CloudDocs/ƒåty≈ôl√≠stky/Generov√°n√≠ PDF/Obr√°zky ke zpracov√°n√≠/")
        if not root.is_dir():
            return
    
        try:
            for name in os.listdir(root):
                p = root / name
                # pouze soubory p≈ô√≠mo v t√©to slo≈æce (bez podslo≈æek)
                if p.is_file() and p.suffix.lower() == ".bak":
                    try:
                        p.unlink()
                    except Exception:
                        # tich√© p≈ôeskoƒçen√≠ na p≈ô√≠padn√© zamƒçen√© / nedostupn√© soubory
                        pass
        except Exception:
            pass
            
    def closeEvent(self, event):
        """Ulo≈æ√≠ nastaven√≠ a zastav√≠ vl√°kno p≈ôed zav≈ôen√≠m"""
        self.stop_clover_validation_timer()
        self._save_crop_status()
        self._cleanup_bak_files()
        self.save_settings()
        if hasattr(self, 'generator_thread') and self.generator_thread and self.generator_thread.isRunning():
            self.generator_thread.terminate()
            self.generator_thread.wait(3000)
        if hasattr(self, 'generator_thread'):
            del self.generator_thread
        self.update_log("üëã PDF okno se zav√≠r√° ‚Äì nastaven√≠ ulo≈æeno a vl√°kna uklizena")
        event.accept()

# FILE: gui/pdf_generator_window.py
# === NOV√Å T≈ò√çDA (modulov√°, mimo jakoukoli jinou t≈ô√≠du) ===
# Umo≈æn√≠ hromadn√Ω Drag&Drop p≈ôesun mezi dvƒõma stromov√Ωmi widgety slo≈æek.
# Pou≈æit√° POUZE v z√°lo≈æce ‚ÄûüìÇ P≈ôehled vygenerovan√Ωch PDF‚Äú p≈ôes create_file_tree_widget().
from PySide6.QtWidgets import QTreeView
from PySide6.QtCore import Qt, QMimeData, QModelIndex
from PySide6.QtGui import QDragEnterEvent, QDragMoveEvent, QDropEvent
import os, shutil, pathlib

class FileTreeView(QTreeView):
    """QTreeView s podporou hromadn√©ho p≈ôesunu soubor≈Ø pomoc√≠ Drag&Drop.
       P≈ôedpokl√°d√° QFileSystemModel jako model a platn√Ω .root_path (c√≠lov√Ω ko≈ôen)."""

    def __init__(self, parent=None):
        super().__init__(parent)
        self.setDragEnabled(True)
        self.setAcceptDrops(True)
        self.setDropIndicatorShown(True)
        self.setDefaultDropAction(Qt.MoveAction)
        self.setSelectionMode(QTreeView.ExtendedSelection)
        self.root_path = ""   # nastavuje create_file_tree_widget

    def _dest_dir_for_index(self, index: QModelIndex) -> str:
        """Vr√°t√≠ c√≠lovou slo≈æku pro drop podle indexu."""
        model = self.model()
        if not model:
            return self.root_path or ""
        if index.isValid():
            p = model.filePath(index)
            try:
                if os.path.isdir(p):
                    return p
                return os.path.dirname(p)
            except Exception:
                return self.root_path or ""
        return self.root_path or ""

    def dragEnterEvent(self, e: QDragEnterEvent):
        if e.mimeData().hasUrls():
            e.acceptProposedAction()
        else:
            super().dragEnterEvent(e)

    def dragMoveEvent(self, e: QDragMoveEvent):
        if e.mimeData().hasUrls():
            e.acceptProposedAction()
        else:
            super().dragMoveEvent(e)

    def dropEvent(self, e: QDropEvent):
        md: QMimeData = e.mimeData()
        if not md.hasUrls():
            return super().dropEvent(e)

        dest_dir = self._dest_dir_for_index(self.indexAt(e.position().toPoint()))
        if not dest_dir or not os.path.isdir(dest_dir):
            return super().dropEvent(e)

        # P≈ôesu≈à v≈°echny soubory
        moved = 0
        skipped = 0
        errors = 0
        for url in md.urls():
            try:
                src = url.toLocalFile()
                if not src or not os.path.isfile(src):
                    skipped += 1
                    continue
                base = os.path.basename(src)
                dst = os.path.join(dest_dir, base)
                if os.path.abspath(src) == os.path.abspath(dst):
                    skipped += 1
                    continue
                if os.path.exists(dst):
                    # kolize n√°zvu -> p≈ôeskoƒçit (nep≈ôepisujeme)
                    skipped += 1
                    continue
                shutil.move(src, dst)
                moved += 1
            except Exception:
                errors += 1
                continue

        # Refresh modelu ‚Äì zmƒõny se obvykle prop√≠≈°√≠ samy, ale t√≠mhle to jist√≠me.
        try:
            m = self.model()
            if hasattr(m, "setRootPath") and self.root_path:
                m.setRootPath(self.root_path)
                self.setRootIndex(m.index(self.root_path))
        except Exception:
            pass

        e.acceptProposedAction()

if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = PDFGeneratorWindow()
    window.show()
    sys.exit(app.exec())
